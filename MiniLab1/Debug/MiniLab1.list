
MiniLab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002aa0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002c28  08002c28  00003c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c68  08002c68  00004010  2**0
                  CONTENTS
  4 .ARM          00000000  08002c68  08002c68  00004010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c68  08002c68  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c68  08002c68  00003c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c6c  08002c6c  00003c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002c70  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000010  08002c80  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002c80  000040c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096d5  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001701  00000000  00000000  0000d715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  0000ee18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000893  00000000  00000000  0000f938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000251dc  00000000  00000000  000101cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bad8  00000000  00000000  000353a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8eb2  00000000  00000000  00040e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00129d31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e10  00000000  00000000  00129d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0012cb84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002c10 	.word	0x08002c10

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08002c10 	.word	0x08002c10

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 facd 	bl	800076a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f81a 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f990 	bl	80004f8 <MX_GPIO_Init>
  MX_TIM1_Init();
 80001d8:	f000 f868 	bl	80002ac <MX_TIM1_Init>
  MX_TIM2_Init();
 80001dc:	f000 f914 	bl	8000408 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80001e0:	2100      	movs	r1, #0
 80001e2:	4806      	ldr	r0, [pc, #24]	@ (80001fc <main+0x34>)
 80001e4:	f001 fcce 	bl	8001b84 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  TIM1->CCR1 = pdc;
 80001e8:	4b05      	ldr	r3, [pc, #20]	@ (8000200 <main+0x38>)
 80001ea:	681a      	ldr	r2, [r3, #0]
 80001ec:	4b05      	ldr	r3, [pc, #20]	@ (8000204 <main+0x3c>)
 80001ee:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_Delay(10);
 80001f0:	200a      	movs	r0, #10
 80001f2:	f000 fb2f 	bl	8000854 <HAL_Delay>
	  TIM1->CCR1 = pdc;
 80001f6:	bf00      	nop
 80001f8:	e7f6      	b.n	80001e8 <main+0x20>
 80001fa:	bf00      	nop
 80001fc:	2000002c 	.word	0x2000002c
 8000200:	20000000 	.word	0x20000000
 8000204:	40012c00 	.word	0x40012c00

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b096      	sub	sp, #88	@ 0x58
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0314 	add.w	r3, r7, #20
 8000212:	2244      	movs	r2, #68	@ 0x44
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f002 fcce 	bl	8002bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	463b      	mov	r3, r7
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]
 8000228:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800022a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800022e:	f000 fdd3 	bl	8000dd8 <HAL_PWREx_ControlVoltageScaling>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d001      	beq.n	800023c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000238:	f000 f976 	bl	8000528 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800023c:	2310      	movs	r3, #16
 800023e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000240:	2301      	movs	r3, #1
 8000242:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000244:	2300      	movs	r3, #0
 8000246:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000248:	2360      	movs	r3, #96	@ 0x60
 800024a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024c:	2302      	movs	r3, #2
 800024e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000250:	2301      	movs	r3, #1
 8000252:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000254:	2301      	movs	r3, #1
 8000256:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000258:	2328      	movs	r3, #40	@ 0x28
 800025a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800025c:	2307      	movs	r3, #7
 800025e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000260:	2302      	movs	r3, #2
 8000262:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000264:	2302      	movs	r3, #2
 8000266:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000268:	f107 0314 	add.w	r3, r7, #20
 800026c:	4618      	mov	r0, r3
 800026e:	f000 fe09 	bl	8000e84 <HAL_RCC_OscConfig>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000278:	f000 f956 	bl	8000528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027c:	230f      	movs	r3, #15
 800027e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000280:	2303      	movs	r3, #3
 8000282:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000290:	463b      	mov	r3, r7
 8000292:	2104      	movs	r1, #4
 8000294:	4618      	mov	r0, r3
 8000296:	f001 f9d1 	bl	800163c <HAL_RCC_ClockConfig>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002a0:	f000 f942 	bl	8000528 <Error_Handler>
  }
}
 80002a4:	bf00      	nop
 80002a6:	3758      	adds	r7, #88	@ 0x58
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}

080002ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b09a      	sub	sp, #104	@ 0x68
 80002b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002b2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002c0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
 80002c8:	605a      	str	r2, [r3, #4]
 80002ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	605a      	str	r2, [r3, #4]
 80002d6:	609a      	str	r2, [r3, #8]
 80002d8:	60da      	str	r2, [r3, #12]
 80002da:	611a      	str	r2, [r3, #16]
 80002dc:	615a      	str	r2, [r3, #20]
 80002de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	222c      	movs	r2, #44	@ 0x2c
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f002 fc66 	bl	8002bb8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002ec:	4b44      	ldr	r3, [pc, #272]	@ (8000400 <MX_TIM1_Init+0x154>)
 80002ee:	4a45      	ldr	r2, [pc, #276]	@ (8000404 <MX_TIM1_Init+0x158>)
 80002f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 610;
 80002f2:	4b43      	ldr	r3, [pc, #268]	@ (8000400 <MX_TIM1_Init+0x154>)
 80002f4:	f240 2262 	movw	r2, #610	@ 0x262
 80002f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002fa:	4b41      	ldr	r3, [pc, #260]	@ (8000400 <MX_TIM1_Init+0x154>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65466;
 8000300:	4b3f      	ldr	r3, [pc, #252]	@ (8000400 <MX_TIM1_Init+0x154>)
 8000302:	f64f 72ba 	movw	r2, #65466	@ 0xffba
 8000306:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000308:	4b3d      	ldr	r3, [pc, #244]	@ (8000400 <MX_TIM1_Init+0x154>)
 800030a:	2200      	movs	r2, #0
 800030c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800030e:	4b3c      	ldr	r3, [pc, #240]	@ (8000400 <MX_TIM1_Init+0x154>)
 8000310:	2200      	movs	r2, #0
 8000312:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000314:	4b3a      	ldr	r3, [pc, #232]	@ (8000400 <MX_TIM1_Init+0x154>)
 8000316:	2200      	movs	r2, #0
 8000318:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800031a:	4839      	ldr	r0, [pc, #228]	@ (8000400 <MX_TIM1_Init+0x154>)
 800031c:	f001 fb7a 	bl	8001a14 <HAL_TIM_Base_Init>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000326:	f000 f8ff 	bl	8000528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800032a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800032e:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000330:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000334:	4619      	mov	r1, r3
 8000336:	4832      	ldr	r0, [pc, #200]	@ (8000400 <MX_TIM1_Init+0x154>)
 8000338:	f001 fe3e 	bl	8001fb8 <HAL_TIM_ConfigClockSource>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000342:	f000 f8f1 	bl	8000528 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000346:	482e      	ldr	r0, [pc, #184]	@ (8000400 <MX_TIM1_Init+0x154>)
 8000348:	f001 fbbb 	bl	8001ac2 <HAL_TIM_PWM_Init>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8000352:	f000 f8e9 	bl	8000528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000356:	2300      	movs	r3, #0
 8000358:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800035a:	2300      	movs	r3, #0
 800035c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800035e:	2300      	movs	r3, #0
 8000360:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000362:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000366:	4619      	mov	r1, r3
 8000368:	4825      	ldr	r0, [pc, #148]	@ (8000400 <MX_TIM1_Init+0x154>)
 800036a:	f002 fb1f 	bl	80029ac <HAL_TIMEx_MasterConfigSynchronization>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000374:	f000 f8d8 	bl	8000528 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000378:	2360      	movs	r3, #96	@ 0x60
 800037a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 26187;
 800037c:	f246 634b 	movw	r3, #26187	@ 0x664b
 8000380:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000382:	2300      	movs	r3, #0
 8000384:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000386:	2300      	movs	r3, #0
 8000388:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800038a:	2300      	movs	r3, #0
 800038c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800038e:	2300      	movs	r3, #0
 8000390:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000392:	2300      	movs	r3, #0
 8000394:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000396:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800039a:	2200      	movs	r2, #0
 800039c:	4619      	mov	r1, r3
 800039e:	4818      	ldr	r0, [pc, #96]	@ (8000400 <MX_TIM1_Init+0x154>)
 80003a0:	f001 fcf6 	bl	8001d90 <HAL_TIM_PWM_ConfigChannel>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 80003aa:	f000 f8bd 	bl	8000528 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003ae:	2300      	movs	r3, #0
 80003b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003b2:	2300      	movs	r3, #0
 80003b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003b6:	2300      	movs	r3, #0
 80003b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80003ba:	2300      	movs	r3, #0
 80003bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003be:	2300      	movs	r3, #0
 80003c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80003cc:	2300      	movs	r3, #0
 80003ce:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80003d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80003d4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80003d6:	2300      	movs	r3, #0
 80003d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80003da:	2300      	movs	r3, #0
 80003dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	4619      	mov	r1, r3
 80003e2:	4807      	ldr	r0, [pc, #28]	@ (8000400 <MX_TIM1_Init+0x154>)
 80003e4:	f002 fb6a 	bl	8002abc <HAL_TIMEx_ConfigBreakDeadTime>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 80003ee:	f000 f89b 	bl	8000528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80003f2:	4803      	ldr	r0, [pc, #12]	@ (8000400 <MX_TIM1_Init+0x154>)
 80003f4:	f000 f8f4 	bl	80005e0 <HAL_TIM_MspPostInit>

}
 80003f8:	bf00      	nop
 80003fa:	3768      	adds	r7, #104	@ 0x68
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	2000002c 	.word	0x2000002c
 8000404:	40012c00 	.word	0x40012c00

08000408 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b08e      	sub	sp, #56	@ 0x38
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800040e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800041c:	f107 031c 	add.w	r3, r7, #28
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
 8000424:	605a      	str	r2, [r3, #4]
 8000426:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000428:	463b      	mov	r3, r7
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	605a      	str	r2, [r3, #4]
 8000430:	609a      	str	r2, [r3, #8]
 8000432:	60da      	str	r2, [r3, #12]
 8000434:	611a      	str	r2, [r3, #16]
 8000436:	615a      	str	r2, [r3, #20]
 8000438:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800043a:	4b2e      	ldr	r3, [pc, #184]	@ (80004f4 <MX_TIM2_Init+0xec>)
 800043c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000440:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 610;
 8000442:	4b2c      	ldr	r3, [pc, #176]	@ (80004f4 <MX_TIM2_Init+0xec>)
 8000444:	f240 2262 	movw	r2, #610	@ 0x262
 8000448:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800044a:	4b2a      	ldr	r3, [pc, #168]	@ (80004f4 <MX_TIM2_Init+0xec>)
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000450:	4b28      	ldr	r3, [pc, #160]	@ (80004f4 <MX_TIM2_Init+0xec>)
 8000452:	f04f 32ff 	mov.w	r2, #4294967295
 8000456:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000458:	4b26      	ldr	r3, [pc, #152]	@ (80004f4 <MX_TIM2_Init+0xec>)
 800045a:	2200      	movs	r2, #0
 800045c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800045e:	4b25      	ldr	r3, [pc, #148]	@ (80004f4 <MX_TIM2_Init+0xec>)
 8000460:	2200      	movs	r2, #0
 8000462:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000464:	4823      	ldr	r0, [pc, #140]	@ (80004f4 <MX_TIM2_Init+0xec>)
 8000466:	f001 fad5 	bl	8001a14 <HAL_TIM_Base_Init>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000470:	f000 f85a 	bl	8000528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000474:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000478:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800047a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800047e:	4619      	mov	r1, r3
 8000480:	481c      	ldr	r0, [pc, #112]	@ (80004f4 <MX_TIM2_Init+0xec>)
 8000482:	f001 fd99 	bl	8001fb8 <HAL_TIM_ConfigClockSource>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 800048c:	f000 f84c 	bl	8000528 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000490:	4818      	ldr	r0, [pc, #96]	@ (80004f4 <MX_TIM2_Init+0xec>)
 8000492:	f001 fb16 	bl	8001ac2 <HAL_TIM_PWM_Init>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800049c:	f000 f844 	bl	8000528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004a0:	2300      	movs	r3, #0
 80004a2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004a4:	2300      	movs	r3, #0
 80004a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004a8:	f107 031c 	add.w	r3, r7, #28
 80004ac:	4619      	mov	r1, r3
 80004ae:	4811      	ldr	r0, [pc, #68]	@ (80004f4 <MX_TIM2_Init+0xec>)
 80004b0:	f002 fa7c 	bl	80029ac <HAL_TIMEx_MasterConfigSynchronization>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80004ba:	f000 f835 	bl	8000528 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004be:	2360      	movs	r3, #96	@ 0x60
 80004c0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80004c2:	2300      	movs	r3, #0
 80004c4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004c6:	2300      	movs	r3, #0
 80004c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004ca:	2300      	movs	r3, #0
 80004cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004ce:	463b      	mov	r3, r7
 80004d0:	2200      	movs	r2, #0
 80004d2:	4619      	mov	r1, r3
 80004d4:	4807      	ldr	r0, [pc, #28]	@ (80004f4 <MX_TIM2_Init+0xec>)
 80004d6:	f001 fc5b 	bl	8001d90 <HAL_TIM_PWM_ConfigChannel>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80004e0:	f000 f822 	bl	8000528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80004e4:	4803      	ldr	r0, [pc, #12]	@ (80004f4 <MX_TIM2_Init+0xec>)
 80004e6:	f000 f87b 	bl	80005e0 <HAL_TIM_MspPostInit>

}
 80004ea:	bf00      	nop
 80004ec:	3738      	adds	r7, #56	@ 0x38
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000078 	.word	0x20000078

080004f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fe:	4b09      	ldr	r3, [pc, #36]	@ (8000524 <MX_GPIO_Init+0x2c>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000502:	4a08      	ldr	r2, [pc, #32]	@ (8000524 <MX_GPIO_Init+0x2c>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800050a:	4b06      	ldr	r3, [pc, #24]	@ (8000524 <MX_GPIO_Init+0x2c>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	40021000 	.word	0x40021000

08000528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800052c:	b672      	cpsid	i
}
 800052e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000530:	bf00      	nop
 8000532:	e7fd      	b.n	8000530 <Error_Handler+0x8>

08000534 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800053a:	4b0f      	ldr	r3, [pc, #60]	@ (8000578 <HAL_MspInit+0x44>)
 800053c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800053e:	4a0e      	ldr	r2, [pc, #56]	@ (8000578 <HAL_MspInit+0x44>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6613      	str	r3, [r2, #96]	@ 0x60
 8000546:	4b0c      	ldr	r3, [pc, #48]	@ (8000578 <HAL_MspInit+0x44>)
 8000548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000552:	4b09      	ldr	r3, [pc, #36]	@ (8000578 <HAL_MspInit+0x44>)
 8000554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000556:	4a08      	ldr	r2, [pc, #32]	@ (8000578 <HAL_MspInit+0x44>)
 8000558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800055c:	6593      	str	r3, [r2, #88]	@ 0x58
 800055e:	4b06      	ldr	r3, [pc, #24]	@ (8000578 <HAL_MspInit+0x44>)
 8000560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000566:	603b      	str	r3, [r7, #0]
 8000568:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	40021000 	.word	0x40021000

0800057c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a13      	ldr	r2, [pc, #76]	@ (80005d8 <HAL_TIM_Base_MspInit+0x5c>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d10c      	bne.n	80005a8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800058e:	4b13      	ldr	r3, [pc, #76]	@ (80005dc <HAL_TIM_Base_MspInit+0x60>)
 8000590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000592:	4a12      	ldr	r2, [pc, #72]	@ (80005dc <HAL_TIM_Base_MspInit+0x60>)
 8000594:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000598:	6613      	str	r3, [r2, #96]	@ 0x60
 800059a:	4b10      	ldr	r3, [pc, #64]	@ (80005dc <HAL_TIM_Base_MspInit+0x60>)
 800059c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800059e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80005a6:	e010      	b.n	80005ca <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80005b0:	d10b      	bne.n	80005ca <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005b2:	4b0a      	ldr	r3, [pc, #40]	@ (80005dc <HAL_TIM_Base_MspInit+0x60>)
 80005b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005b6:	4a09      	ldr	r2, [pc, #36]	@ (80005dc <HAL_TIM_Base_MspInit+0x60>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80005be:	4b07      	ldr	r3, [pc, #28]	@ (80005dc <HAL_TIM_Base_MspInit+0x60>)
 80005c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	40012c00 	.word	0x40012c00
 80005dc:	40021000 	.word	0x40021000

080005e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08a      	sub	sp, #40	@ 0x28
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a23      	ldr	r2, [pc, #140]	@ (800068c <HAL_TIM_MspPostInit+0xac>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d11e      	bne.n	8000640 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	4b23      	ldr	r3, [pc, #140]	@ (8000690 <HAL_TIM_MspPostInit+0xb0>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000606:	4a22      	ldr	r2, [pc, #136]	@ (8000690 <HAL_TIM_MspPostInit+0xb0>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800060e:	4b20      	ldr	r3, [pc, #128]	@ (8000690 <HAL_TIM_MspPostInit+0xb0>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800061a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800061e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000620:	2302      	movs	r3, #2
 8000622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000628:	2300      	movs	r3, #0
 800062a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800062c:	2301      	movs	r3, #1
 800062e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	4619      	mov	r1, r3
 8000636:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800063a:	f000 fa15 	bl	8000a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800063e:	e021      	b.n	8000684 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000648:	d11c      	bne.n	8000684 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4b11      	ldr	r3, [pc, #68]	@ (8000690 <HAL_TIM_MspPostInit+0xb0>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064e:	4a10      	ldr	r2, [pc, #64]	@ (8000690 <HAL_TIM_MspPostInit+0xb0>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000656:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <HAL_TIM_MspPostInit+0xb0>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000662:	2320      	movs	r3, #32
 8000664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000666:	2302      	movs	r3, #2
 8000668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	2300      	movs	r3, #0
 8000670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000672:	2301      	movs	r3, #1
 8000674:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4619      	mov	r1, r3
 800067c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000680:	f000 f9f2 	bl	8000a68 <HAL_GPIO_Init>
}
 8000684:	bf00      	nop
 8000686:	3728      	adds	r7, #40	@ 0x28
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40012c00 	.word	0x40012c00
 8000690:	40021000 	.word	0x40021000

08000694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <NMI_Handler+0x4>

0800069c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <HardFault_Handler+0x4>

080006a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a8:	bf00      	nop
 80006aa:	e7fd      	b.n	80006a8 <MemManage_Handler+0x4>

080006ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b0:	bf00      	nop
 80006b2:	e7fd      	b.n	80006b0 <BusFault_Handler+0x4>

080006b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <UsageFault_Handler+0x4>

080006bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr

080006ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr

080006e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ea:	f000 f893 	bl	8000814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006f8:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <SystemInit+0x20>)
 80006fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006fe:	4a05      	ldr	r2, [pc, #20]	@ (8000714 <SystemInit+0x20>)
 8000700:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000704:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000718:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000750 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800071c:	f7ff ffea 	bl	80006f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000720:	480c      	ldr	r0, [pc, #48]	@ (8000754 <LoopForever+0x6>)
  ldr r1, =_edata
 8000722:	490d      	ldr	r1, [pc, #52]	@ (8000758 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000724:	4a0d      	ldr	r2, [pc, #52]	@ (800075c <LoopForever+0xe>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000728:	e002      	b.n	8000730 <LoopCopyDataInit>

0800072a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800072a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800072c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800072e:	3304      	adds	r3, #4

08000730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000734:	d3f9      	bcc.n	800072a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000736:	4a0a      	ldr	r2, [pc, #40]	@ (8000760 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000738:	4c0a      	ldr	r4, [pc, #40]	@ (8000764 <LoopForever+0x16>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800073c:	e001      	b.n	8000742 <LoopFillZerobss>

0800073e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800073e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000740:	3204      	adds	r2, #4

08000742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000744:	d3fb      	bcc.n	800073e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000746:	f002 fa3f 	bl	8002bc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800074a:	f7ff fd3d 	bl	80001c8 <main>

0800074e <LoopForever>:

LoopForever:
    b LoopForever
 800074e:	e7fe      	b.n	800074e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000750:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000758:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800075c:	08002c70 	.word	0x08002c70
  ldr r2, =_sbss
 8000760:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000764:	200000c8 	.word	0x200000c8

08000768 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000768:	e7fe      	b.n	8000768 <ADC1_2_IRQHandler>

0800076a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000770:	2300      	movs	r3, #0
 8000772:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000774:	2003      	movs	r0, #3
 8000776:	f000 f943 	bl	8000a00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800077a:	200f      	movs	r0, #15
 800077c:	f000 f80e 	bl	800079c <HAL_InitTick>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d002      	beq.n	800078c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000786:	2301      	movs	r3, #1
 8000788:	71fb      	strb	r3, [r7, #7]
 800078a:	e001      	b.n	8000790 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800078c:	f7ff fed2 	bl	8000534 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000790:	79fb      	ldrb	r3, [r7, #7]
}
 8000792:	4618      	mov	r0, r3
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007a4:	2300      	movs	r3, #0
 80007a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80007a8:	4b17      	ldr	r3, [pc, #92]	@ (8000808 <HAL_InitTick+0x6c>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d023      	beq.n	80007f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80007b0:	4b16      	ldr	r3, [pc, #88]	@ (800080c <HAL_InitTick+0x70>)
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4b14      	ldr	r3, [pc, #80]	@ (8000808 <HAL_InitTick+0x6c>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	4619      	mov	r1, r3
 80007ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007be:	fbb3 f3f1 	udiv	r3, r3, r1
 80007c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 f941 	bl	8000a4e <HAL_SYSTICK_Config>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d10f      	bne.n	80007f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2b0f      	cmp	r3, #15
 80007d6:	d809      	bhi.n	80007ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d8:	2200      	movs	r2, #0
 80007da:	6879      	ldr	r1, [r7, #4]
 80007dc:	f04f 30ff 	mov.w	r0, #4294967295
 80007e0:	f000 f919 	bl	8000a16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000810 <HAL_InitTick+0x74>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6013      	str	r3, [r2, #0]
 80007ea:	e007      	b.n	80007fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80007ec:	2301      	movs	r3, #1
 80007ee:	73fb      	strb	r3, [r7, #15]
 80007f0:	e004      	b.n	80007fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
 80007f4:	73fb      	strb	r3, [r7, #15]
 80007f6:	e001      	b.n	80007fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007f8:	2301      	movs	r3, #1
 80007fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	2000000c 	.word	0x2000000c
 800080c:	20000004 	.word	0x20000004
 8000810:	20000008 	.word	0x20000008

08000814 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <HAL_IncTick+0x20>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	461a      	mov	r2, r3
 800081e:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <HAL_IncTick+0x24>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4413      	add	r3, r2
 8000824:	4a04      	ldr	r2, [pc, #16]	@ (8000838 <HAL_IncTick+0x24>)
 8000826:	6013      	str	r3, [r2, #0]
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	2000000c 	.word	0x2000000c
 8000838:	200000c4 	.word	0x200000c4

0800083c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  return uwTick;
 8000840:	4b03      	ldr	r3, [pc, #12]	@ (8000850 <HAL_GetTick+0x14>)
 8000842:	681b      	ldr	r3, [r3, #0]
}
 8000844:	4618      	mov	r0, r3
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	200000c4 	.word	0x200000c4

08000854 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800085c:	f7ff ffee 	bl	800083c <HAL_GetTick>
 8000860:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800086c:	d005      	beq.n	800087a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800086e:	4b0a      	ldr	r3, [pc, #40]	@ (8000898 <HAL_Delay+0x44>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	461a      	mov	r2, r3
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	4413      	add	r3, r2
 8000878:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800087a:	bf00      	nop
 800087c:	f7ff ffde 	bl	800083c <HAL_GetTick>
 8000880:	4602      	mov	r2, r0
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	68fa      	ldr	r2, [r7, #12]
 8000888:	429a      	cmp	r2, r3
 800088a:	d8f7      	bhi.n	800087c <HAL_Delay+0x28>
  {
  }
}
 800088c:	bf00      	nop
 800088e:	bf00      	nop
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	2000000c 	.word	0x2000000c

0800089c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f003 0307 	and.w	r3, r3, #7
 80008aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008ac:	4b0c      	ldr	r3, [pc, #48]	@ (80008e0 <__NVIC_SetPriorityGrouping+0x44>)
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008b2:	68ba      	ldr	r2, [r7, #8]
 80008b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008b8:	4013      	ands	r3, r2
 80008ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ce:	4a04      	ldr	r2, [pc, #16]	@ (80008e0 <__NVIC_SetPriorityGrouping+0x44>)
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	60d3      	str	r3, [r2, #12]
}
 80008d4:	bf00      	nop
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e8:	4b04      	ldr	r3, [pc, #16]	@ (80008fc <__NVIC_GetPriorityGrouping+0x18>)
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	0a1b      	lsrs	r3, r3, #8
 80008ee:	f003 0307 	and.w	r3, r3, #7
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	6039      	str	r1, [r7, #0]
 800090a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800090c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000910:	2b00      	cmp	r3, #0
 8000912:	db0a      	blt.n	800092a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	b2da      	uxtb	r2, r3
 8000918:	490c      	ldr	r1, [pc, #48]	@ (800094c <__NVIC_SetPriority+0x4c>)
 800091a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091e:	0112      	lsls	r2, r2, #4
 8000920:	b2d2      	uxtb	r2, r2
 8000922:	440b      	add	r3, r1
 8000924:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000928:	e00a      	b.n	8000940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4908      	ldr	r1, [pc, #32]	@ (8000950 <__NVIC_SetPriority+0x50>)
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	f003 030f 	and.w	r3, r3, #15
 8000936:	3b04      	subs	r3, #4
 8000938:	0112      	lsls	r2, r2, #4
 800093a:	b2d2      	uxtb	r2, r2
 800093c:	440b      	add	r3, r1
 800093e:	761a      	strb	r2, [r3, #24]
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	e000e100 	.word	0xe000e100
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000954:	b480      	push	{r7}
 8000956:	b089      	sub	sp, #36	@ 0x24
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000968:	69fb      	ldr	r3, [r7, #28]
 800096a:	f1c3 0307 	rsb	r3, r3, #7
 800096e:	2b04      	cmp	r3, #4
 8000970:	bf28      	it	cs
 8000972:	2304      	movcs	r3, #4
 8000974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	3304      	adds	r3, #4
 800097a:	2b06      	cmp	r3, #6
 800097c:	d902      	bls.n	8000984 <NVIC_EncodePriority+0x30>
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	3b03      	subs	r3, #3
 8000982:	e000      	b.n	8000986 <NVIC_EncodePriority+0x32>
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000988:	f04f 32ff 	mov.w	r2, #4294967295
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	43da      	mvns	r2, r3
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	401a      	ands	r2, r3
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800099c:	f04f 31ff 	mov.w	r1, #4294967295
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	fa01 f303 	lsl.w	r3, r1, r3
 80009a6:	43d9      	mvns	r1, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ac:	4313      	orrs	r3, r2
         );
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3724      	adds	r7, #36	@ 0x24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
	...

080009bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	3b01      	subs	r3, #1
 80009c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009cc:	d301      	bcc.n	80009d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ce:	2301      	movs	r3, #1
 80009d0:	e00f      	b.n	80009f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009d2:	4a0a      	ldr	r2, [pc, #40]	@ (80009fc <SysTick_Config+0x40>)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009da:	210f      	movs	r1, #15
 80009dc:	f04f 30ff 	mov.w	r0, #4294967295
 80009e0:	f7ff ff8e 	bl	8000900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009e4:	4b05      	ldr	r3, [pc, #20]	@ (80009fc <SysTick_Config+0x40>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ea:	4b04      	ldr	r3, [pc, #16]	@ (80009fc <SysTick_Config+0x40>)
 80009ec:	2207      	movs	r2, #7
 80009ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	e000e010 	.word	0xe000e010

08000a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f7ff ff47 	bl	800089c <__NVIC_SetPriorityGrouping>
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b086      	sub	sp, #24
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	60b9      	str	r1, [r7, #8]
 8000a20:	607a      	str	r2, [r7, #4]
 8000a22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a28:	f7ff ff5c 	bl	80008e4 <__NVIC_GetPriorityGrouping>
 8000a2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	68b9      	ldr	r1, [r7, #8]
 8000a32:	6978      	ldr	r0, [r7, #20]
 8000a34:	f7ff ff8e 	bl	8000954 <NVIC_EncodePriority>
 8000a38:	4602      	mov	r2, r0
 8000a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a3e:	4611      	mov	r1, r2
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ff5d 	bl	8000900 <__NVIC_SetPriority>
}
 8000a46:	bf00      	nop
 8000a48:	3718      	adds	r7, #24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b082      	sub	sp, #8
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f7ff ffb0 	bl	80009bc <SysTick_Config>
 8000a5c:	4603      	mov	r3, r0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b087      	sub	sp, #28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a76:	e17f      	b.n	8000d78 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	fa01 f303 	lsl.w	r3, r1, r3
 8000a84:	4013      	ands	r3, r2
 8000a86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	f000 8171 	beq.w	8000d72 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f003 0303 	and.w	r3, r3, #3
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d005      	beq.n	8000aa8 <HAL_GPIO_Init+0x40>
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f003 0303 	and.w	r3, r3, #3
 8000aa4:	2b02      	cmp	r3, #2
 8000aa6:	d130      	bne.n	8000b0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	2203      	movs	r2, #3
 8000ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4013      	ands	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	68da      	ldr	r2, [r3, #12]
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ade:	2201      	movs	r2, #1
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	43db      	mvns	r3, r3
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	4013      	ands	r3, r2
 8000aec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	091b      	lsrs	r3, r3, #4
 8000af4:	f003 0201 	and.w	r2, r3, #1
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f003 0303 	and.w	r3, r3, #3
 8000b12:	2b03      	cmp	r3, #3
 8000b14:	d118      	bne.n	8000b48 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	43db      	mvns	r3, r3
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	08db      	lsrs	r3, r3, #3
 8000b32:	f003 0201 	and.w	r2, r3, #1
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f003 0303 	and.w	r3, r3, #3
 8000b50:	2b03      	cmp	r3, #3
 8000b52:	d017      	beq.n	8000b84 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	2203      	movs	r2, #3
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	43db      	mvns	r3, r3
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	689a      	ldr	r2, [r3, #8]
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	fa02 f303 	lsl.w	r3, r2, r3
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f003 0303 	and.w	r3, r3, #3
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	d123      	bne.n	8000bd8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	08da      	lsrs	r2, r3, #3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3208      	adds	r2, #8
 8000b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	f003 0307 	and.w	r3, r3, #7
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	220f      	movs	r2, #15
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	43db      	mvns	r3, r3
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	691a      	ldr	r2, [r3, #16]
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	08da      	lsrs	r2, r3, #3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	3208      	adds	r2, #8
 8000bd2:	6939      	ldr	r1, [r7, #16]
 8000bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	2203      	movs	r2, #3
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f003 0203 	and.w	r2, r3, #3
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	f000 80ac 	beq.w	8000d72 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	4b5f      	ldr	r3, [pc, #380]	@ (8000d98 <HAL_GPIO_Init+0x330>)
 8000c1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c1e:	4a5e      	ldr	r2, [pc, #376]	@ (8000d98 <HAL_GPIO_Init+0x330>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c26:	4b5c      	ldr	r3, [pc, #368]	@ (8000d98 <HAL_GPIO_Init+0x330>)
 8000c28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c32:	4a5a      	ldr	r2, [pc, #360]	@ (8000d9c <HAL_GPIO_Init+0x334>)
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	089b      	lsrs	r3, r3, #2
 8000c38:	3302      	adds	r3, #2
 8000c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	f003 0303 	and.w	r3, r3, #3
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	220f      	movs	r2, #15
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	4013      	ands	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c5c:	d025      	beq.n	8000caa <HAL_GPIO_Init+0x242>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a4f      	ldr	r2, [pc, #316]	@ (8000da0 <HAL_GPIO_Init+0x338>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d01f      	beq.n	8000ca6 <HAL_GPIO_Init+0x23e>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a4e      	ldr	r2, [pc, #312]	@ (8000da4 <HAL_GPIO_Init+0x33c>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d019      	beq.n	8000ca2 <HAL_GPIO_Init+0x23a>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a4d      	ldr	r2, [pc, #308]	@ (8000da8 <HAL_GPIO_Init+0x340>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d013      	beq.n	8000c9e <HAL_GPIO_Init+0x236>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a4c      	ldr	r2, [pc, #304]	@ (8000dac <HAL_GPIO_Init+0x344>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d00d      	beq.n	8000c9a <HAL_GPIO_Init+0x232>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a4b      	ldr	r2, [pc, #300]	@ (8000db0 <HAL_GPIO_Init+0x348>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d007      	beq.n	8000c96 <HAL_GPIO_Init+0x22e>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a4a      	ldr	r2, [pc, #296]	@ (8000db4 <HAL_GPIO_Init+0x34c>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d101      	bne.n	8000c92 <HAL_GPIO_Init+0x22a>
 8000c8e:	2306      	movs	r3, #6
 8000c90:	e00c      	b.n	8000cac <HAL_GPIO_Init+0x244>
 8000c92:	2307      	movs	r3, #7
 8000c94:	e00a      	b.n	8000cac <HAL_GPIO_Init+0x244>
 8000c96:	2305      	movs	r3, #5
 8000c98:	e008      	b.n	8000cac <HAL_GPIO_Init+0x244>
 8000c9a:	2304      	movs	r3, #4
 8000c9c:	e006      	b.n	8000cac <HAL_GPIO_Init+0x244>
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	e004      	b.n	8000cac <HAL_GPIO_Init+0x244>
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	e002      	b.n	8000cac <HAL_GPIO_Init+0x244>
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e000      	b.n	8000cac <HAL_GPIO_Init+0x244>
 8000caa:	2300      	movs	r3, #0
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	f002 0203 	and.w	r2, r2, #3
 8000cb2:	0092      	lsls	r2, r2, #2
 8000cb4:	4093      	lsls	r3, r2
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cbc:	4937      	ldr	r1, [pc, #220]	@ (8000d9c <HAL_GPIO_Init+0x334>)
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	089b      	lsrs	r3, r3, #2
 8000cc2:	3302      	adds	r3, #2
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cca:	4b3b      	ldr	r3, [pc, #236]	@ (8000db8 <HAL_GPIO_Init+0x350>)
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d003      	beq.n	8000cee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000cee:	4a32      	ldr	r2, [pc, #200]	@ (8000db8 <HAL_GPIO_Init+0x350>)
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000cf4:	4b30      	ldr	r3, [pc, #192]	@ (8000db8 <HAL_GPIO_Init+0x350>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4013      	ands	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d003      	beq.n	8000d18 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d18:	4a27      	ldr	r2, [pc, #156]	@ (8000db8 <HAL_GPIO_Init+0x350>)
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000d1e:	4b26      	ldr	r3, [pc, #152]	@ (8000db8 <HAL_GPIO_Init+0x350>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	43db      	mvns	r3, r3
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d003      	beq.n	8000d42 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d42:	4a1d      	ldr	r2, [pc, #116]	@ (8000db8 <HAL_GPIO_Init+0x350>)
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000d48:	4b1b      	ldr	r3, [pc, #108]	@ (8000db8 <HAL_GPIO_Init+0x350>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	43db      	mvns	r3, r3
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	4013      	ands	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d003      	beq.n	8000d6c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d6c:	4a12      	ldr	r2, [pc, #72]	@ (8000db8 <HAL_GPIO_Init+0x350>)
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	3301      	adds	r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f47f ae78 	bne.w	8000a78 <HAL_GPIO_Init+0x10>
  }
}
 8000d88:	bf00      	nop
 8000d8a:	bf00      	nop
 8000d8c:	371c      	adds	r7, #28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40010000 	.word	0x40010000
 8000da0:	48000400 	.word	0x48000400
 8000da4:	48000800 	.word	0x48000800
 8000da8:	48000c00 	.word	0x48000c00
 8000dac:	48001000 	.word	0x48001000
 8000db0:	48001400 	.word	0x48001400
 8000db4:	48001800 	.word	0x48001800
 8000db8:	40010400 	.word	0x40010400

08000dbc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000dc0:	4b04      	ldr	r3, [pc, #16]	@ (8000dd4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40007000 	.word	0x40007000

08000dd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000de6:	d130      	bne.n	8000e4a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000de8:	4b23      	ldr	r3, [pc, #140]	@ (8000e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000df0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000df4:	d038      	beq.n	8000e68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000df6:	4b20      	ldr	r3, [pc, #128]	@ (8000e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000dfe:	4a1e      	ldr	r2, [pc, #120]	@ (8000e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e04:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e06:	4b1d      	ldr	r3, [pc, #116]	@ (8000e7c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2232      	movs	r2, #50	@ 0x32
 8000e0c:	fb02 f303 	mul.w	r3, r2, r3
 8000e10:	4a1b      	ldr	r2, [pc, #108]	@ (8000e80 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e12:	fba2 2303 	umull	r2, r3, r2, r3
 8000e16:	0c9b      	lsrs	r3, r3, #18
 8000e18:	3301      	adds	r3, #1
 8000e1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e1c:	e002      	b.n	8000e24 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	3b01      	subs	r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e24:	4b14      	ldr	r3, [pc, #80]	@ (8000e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e30:	d102      	bne.n	8000e38 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1f2      	bne.n	8000e1e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e38:	4b0f      	ldr	r3, [pc, #60]	@ (8000e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e3a:	695b      	ldr	r3, [r3, #20]
 8000e3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e44:	d110      	bne.n	8000e68 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000e46:	2303      	movs	r3, #3
 8000e48:	e00f      	b.n	8000e6a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000e52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e56:	d007      	beq.n	8000e68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e58:	4b07      	ldr	r3, [pc, #28]	@ (8000e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e60:	4a05      	ldr	r2, [pc, #20]	@ (8000e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e66:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40007000 	.word	0x40007000
 8000e7c:	20000004 	.word	0x20000004
 8000e80:	431bde83 	.word	0x431bde83

08000e84 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d101      	bne.n	8000e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e3ca      	b.n	800162c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e96:	4b97      	ldr	r3, [pc, #604]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	f003 030c 	and.w	r3, r3, #12
 8000e9e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ea0:	4b94      	ldr	r3, [pc, #592]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0310 	and.w	r3, r3, #16
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f000 80e4 	beq.w	8001080 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d007      	beq.n	8000ece <HAL_RCC_OscConfig+0x4a>
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	2b0c      	cmp	r3, #12
 8000ec2:	f040 808b 	bne.w	8000fdc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	f040 8087 	bne.w	8000fdc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ece:	4b89      	ldr	r3, [pc, #548]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d005      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x62>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d101      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e3a2      	b.n	800162c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6a1a      	ldr	r2, [r3, #32]
 8000eea:	4b82      	ldr	r3, [pc, #520]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0308 	and.w	r3, r3, #8
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d004      	beq.n	8000f00 <HAL_RCC_OscConfig+0x7c>
 8000ef6:	4b7f      	ldr	r3, [pc, #508]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000efe:	e005      	b.n	8000f0c <HAL_RCC_OscConfig+0x88>
 8000f00:	4b7c      	ldr	r3, [pc, #496]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f06:	091b      	lsrs	r3, r3, #4
 8000f08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d223      	bcs.n	8000f58 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6a1b      	ldr	r3, [r3, #32]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 fd1d 	bl	8001954 <RCC_SetFlashLatencyFromMSIRange>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	e383      	b.n	800162c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f24:	4b73      	ldr	r3, [pc, #460]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a72      	ldr	r2, [pc, #456]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f2a:	f043 0308 	orr.w	r3, r3, #8
 8000f2e:	6013      	str	r3, [r2, #0]
 8000f30:	4b70      	ldr	r3, [pc, #448]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a1b      	ldr	r3, [r3, #32]
 8000f3c:	496d      	ldr	r1, [pc, #436]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f42:	4b6c      	ldr	r3, [pc, #432]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	021b      	lsls	r3, r3, #8
 8000f50:	4968      	ldr	r1, [pc, #416]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f52:	4313      	orrs	r3, r2
 8000f54:	604b      	str	r3, [r1, #4]
 8000f56:	e025      	b.n	8000fa4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f58:	4b66      	ldr	r3, [pc, #408]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a65      	ldr	r2, [pc, #404]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f5e:	f043 0308 	orr.w	r3, r3, #8
 8000f62:	6013      	str	r3, [r2, #0]
 8000f64:	4b63      	ldr	r3, [pc, #396]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6a1b      	ldr	r3, [r3, #32]
 8000f70:	4960      	ldr	r1, [pc, #384]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f72:	4313      	orrs	r3, r2
 8000f74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f76:	4b5f      	ldr	r3, [pc, #380]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	021b      	lsls	r3, r3, #8
 8000f84:	495b      	ldr	r1, [pc, #364]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f86:	4313      	orrs	r3, r2
 8000f88:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d109      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a1b      	ldr	r3, [r3, #32]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 fcdd 	bl	8001954 <RCC_SetFlashLatencyFromMSIRange>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e343      	b.n	800162c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000fa4:	f000 fc4a 	bl	800183c <HAL_RCC_GetSysClockFreq>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	4b52      	ldr	r3, [pc, #328]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	091b      	lsrs	r3, r3, #4
 8000fb0:	f003 030f 	and.w	r3, r3, #15
 8000fb4:	4950      	ldr	r1, [pc, #320]	@ (80010f8 <HAL_RCC_OscConfig+0x274>)
 8000fb6:	5ccb      	ldrb	r3, [r1, r3]
 8000fb8:	f003 031f 	and.w	r3, r3, #31
 8000fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc0:	4a4e      	ldr	r2, [pc, #312]	@ (80010fc <HAL_RCC_OscConfig+0x278>)
 8000fc2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000fc4:	4b4e      	ldr	r3, [pc, #312]	@ (8001100 <HAL_RCC_OscConfig+0x27c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fbe7 	bl	800079c <HAL_InitTick>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d052      	beq.n	800107e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	e327      	b.n	800162c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d032      	beq.n	800104a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000fe4:	4b43      	ldr	r3, [pc, #268]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a42      	ldr	r2, [pc, #264]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ff0:	f7ff fc24 	bl	800083c <HAL_GetTick>
 8000ff4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ff6:	e008      	b.n	800100a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ff8:	f7ff fc20 	bl	800083c <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b02      	cmp	r3, #2
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e310      	b.n	800162c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800100a:	4b3a      	ldr	r3, [pc, #232]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	2b00      	cmp	r3, #0
 8001014:	d0f0      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001016:	4b37      	ldr	r3, [pc, #220]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a36      	ldr	r2, [pc, #216]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 800101c:	f043 0308 	orr.w	r3, r3, #8
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	4b34      	ldr	r3, [pc, #208]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a1b      	ldr	r3, [r3, #32]
 800102e:	4931      	ldr	r1, [pc, #196]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8001030:	4313      	orrs	r3, r2
 8001032:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001034:	4b2f      	ldr	r3, [pc, #188]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	69db      	ldr	r3, [r3, #28]
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	492c      	ldr	r1, [pc, #176]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8001044:	4313      	orrs	r3, r2
 8001046:	604b      	str	r3, [r1, #4]
 8001048:	e01a      	b.n	8001080 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800104a:	4b2a      	ldr	r3, [pc, #168]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a29      	ldr	r2, [pc, #164]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8001050:	f023 0301 	bic.w	r3, r3, #1
 8001054:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001056:	f7ff fbf1 	bl	800083c <HAL_GetTick>
 800105a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800105c:	e008      	b.n	8001070 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800105e:	f7ff fbed 	bl	800083c <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d901      	bls.n	8001070 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e2dd      	b.n	800162c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001070:	4b20      	ldr	r3, [pc, #128]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1f0      	bne.n	800105e <HAL_RCC_OscConfig+0x1da>
 800107c:	e000      	b.n	8001080 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800107e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b00      	cmp	r3, #0
 800108a:	d074      	beq.n	8001176 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	2b08      	cmp	r3, #8
 8001090:	d005      	beq.n	800109e <HAL_RCC_OscConfig+0x21a>
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	2b0c      	cmp	r3, #12
 8001096:	d10e      	bne.n	80010b6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	2b03      	cmp	r3, #3
 800109c:	d10b      	bne.n	80010b6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800109e:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d064      	beq.n	8001174 <HAL_RCC_OscConfig+0x2f0>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d160      	bne.n	8001174 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e2ba      	b.n	800162c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010be:	d106      	bne.n	80010ce <HAL_RCC_OscConfig+0x24a>
 80010c0:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a0b      	ldr	r2, [pc, #44]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 80010c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	e026      	b.n	800111c <HAL_RCC_OscConfig+0x298>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010d6:	d115      	bne.n	8001104 <HAL_RCC_OscConfig+0x280>
 80010d8:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a05      	ldr	r2, [pc, #20]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 80010de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	4b03      	ldr	r3, [pc, #12]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a02      	ldr	r2, [pc, #8]	@ (80010f4 <HAL_RCC_OscConfig+0x270>)
 80010ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	e014      	b.n	800111c <HAL_RCC_OscConfig+0x298>
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000
 80010f8:	08002c28 	.word	0x08002c28
 80010fc:	20000004 	.word	0x20000004
 8001100:	20000008 	.word	0x20000008
 8001104:	4ba0      	ldr	r3, [pc, #640]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a9f      	ldr	r2, [pc, #636]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 800110a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	4b9d      	ldr	r3, [pc, #628]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a9c      	ldr	r2, [pc, #624]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 8001116:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800111a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d013      	beq.n	800114c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001124:	f7ff fb8a 	bl	800083c <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800112c:	f7ff fb86 	bl	800083c <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b64      	cmp	r3, #100	@ 0x64
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e276      	b.n	800162c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800113e:	4b92      	ldr	r3, [pc, #584]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d0f0      	beq.n	800112c <HAL_RCC_OscConfig+0x2a8>
 800114a:	e014      	b.n	8001176 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800114c:	f7ff fb76 	bl	800083c <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001154:	f7ff fb72 	bl	800083c <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b64      	cmp	r3, #100	@ 0x64
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e262      	b.n	800162c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001166:	4b88      	ldr	r3, [pc, #544]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1f0      	bne.n	8001154 <HAL_RCC_OscConfig+0x2d0>
 8001172:	e000      	b.n	8001176 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d060      	beq.n	8001244 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	2b04      	cmp	r3, #4
 8001186:	d005      	beq.n	8001194 <HAL_RCC_OscConfig+0x310>
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	2b0c      	cmp	r3, #12
 800118c:	d119      	bne.n	80011c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	2b02      	cmp	r3, #2
 8001192:	d116      	bne.n	80011c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001194:	4b7c      	ldr	r3, [pc, #496]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800119c:	2b00      	cmp	r3, #0
 800119e:	d005      	beq.n	80011ac <HAL_RCC_OscConfig+0x328>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d101      	bne.n	80011ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e23f      	b.n	800162c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ac:	4b76      	ldr	r3, [pc, #472]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	061b      	lsls	r3, r3, #24
 80011ba:	4973      	ldr	r1, [pc, #460]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 80011bc:	4313      	orrs	r3, r2
 80011be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011c0:	e040      	b.n	8001244 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d023      	beq.n	8001212 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011ca:	4b6f      	ldr	r3, [pc, #444]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a6e      	ldr	r2, [pc, #440]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 80011d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d6:	f7ff fb31 	bl	800083c <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011de:	f7ff fb2d 	bl	800083c <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e21d      	b.n	800162c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011f0:	4b65      	ldr	r3, [pc, #404]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d0f0      	beq.n	80011de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fc:	4b62      	ldr	r3, [pc, #392]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	691b      	ldr	r3, [r3, #16]
 8001208:	061b      	lsls	r3, r3, #24
 800120a:	495f      	ldr	r1, [pc, #380]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 800120c:	4313      	orrs	r3, r2
 800120e:	604b      	str	r3, [r1, #4]
 8001210:	e018      	b.n	8001244 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001212:	4b5d      	ldr	r3, [pc, #372]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a5c      	ldr	r2, [pc, #368]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 8001218:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800121c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800121e:	f7ff fb0d 	bl	800083c <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001226:	f7ff fb09 	bl	800083c <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e1f9      	b.n	800162c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001238:	4b53      	ldr	r3, [pc, #332]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1f0      	bne.n	8001226 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0308 	and.w	r3, r3, #8
 800124c:	2b00      	cmp	r3, #0
 800124e:	d03c      	beq.n	80012ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d01c      	beq.n	8001292 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001258:	4b4b      	ldr	r3, [pc, #300]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 800125a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800125e:	4a4a      	ldr	r2, [pc, #296]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001268:	f7ff fae8 	bl	800083c <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001270:	f7ff fae4 	bl	800083c <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e1d4      	b.n	800162c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001282:	4b41      	ldr	r3, [pc, #260]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 8001284:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d0ef      	beq.n	8001270 <HAL_RCC_OscConfig+0x3ec>
 8001290:	e01b      	b.n	80012ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001292:	4b3d      	ldr	r3, [pc, #244]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 8001294:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001298:	4a3b      	ldr	r2, [pc, #236]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 800129a:	f023 0301 	bic.w	r3, r3, #1
 800129e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a2:	f7ff facb 	bl	800083c <HAL_GetTick>
 80012a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012a8:	e008      	b.n	80012bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012aa:	f7ff fac7 	bl	800083c <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d901      	bls.n	80012bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e1b7      	b.n	800162c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012bc:	4b32      	ldr	r3, [pc, #200]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 80012be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1ef      	bne.n	80012aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0304 	and.w	r3, r3, #4
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f000 80a6 	beq.w	8001424 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012d8:	2300      	movs	r3, #0
 80012da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80012dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 80012de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d10d      	bne.n	8001304 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012e8:	4b27      	ldr	r3, [pc, #156]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 80012ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ec:	4a26      	ldr	r2, [pc, #152]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 80012ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80012f4:	4b24      	ldr	r3, [pc, #144]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 80012f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001300:	2301      	movs	r3, #1
 8001302:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001304:	4b21      	ldr	r3, [pc, #132]	@ (800138c <HAL_RCC_OscConfig+0x508>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800130c:	2b00      	cmp	r3, #0
 800130e:	d118      	bne.n	8001342 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001310:	4b1e      	ldr	r3, [pc, #120]	@ (800138c <HAL_RCC_OscConfig+0x508>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a1d      	ldr	r2, [pc, #116]	@ (800138c <HAL_RCC_OscConfig+0x508>)
 8001316:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800131a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800131c:	f7ff fa8e 	bl	800083c <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001324:	f7ff fa8a 	bl	800083c <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e17a      	b.n	800162c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001336:	4b15      	ldr	r3, [pc, #84]	@ (800138c <HAL_RCC_OscConfig+0x508>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0f0      	beq.n	8001324 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d108      	bne.n	800135c <HAL_RCC_OscConfig+0x4d8>
 800134a:	4b0f      	ldr	r3, [pc, #60]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 800134c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001350:	4a0d      	ldr	r2, [pc, #52]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800135a:	e029      	b.n	80013b0 <HAL_RCC_OscConfig+0x52c>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	2b05      	cmp	r3, #5
 8001362:	d115      	bne.n	8001390 <HAL_RCC_OscConfig+0x50c>
 8001364:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 8001366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800136a:	4a07      	ldr	r2, [pc, #28]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001374:	4b04      	ldr	r3, [pc, #16]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 8001376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800137a:	4a03      	ldr	r2, [pc, #12]	@ (8001388 <HAL_RCC_OscConfig+0x504>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001384:	e014      	b.n	80013b0 <HAL_RCC_OscConfig+0x52c>
 8001386:	bf00      	nop
 8001388:	40021000 	.word	0x40021000
 800138c:	40007000 	.word	0x40007000
 8001390:	4b9c      	ldr	r3, [pc, #624]	@ (8001604 <HAL_RCC_OscConfig+0x780>)
 8001392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001396:	4a9b      	ldr	r2, [pc, #620]	@ (8001604 <HAL_RCC_OscConfig+0x780>)
 8001398:	f023 0301 	bic.w	r3, r3, #1
 800139c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80013a0:	4b98      	ldr	r3, [pc, #608]	@ (8001604 <HAL_RCC_OscConfig+0x780>)
 80013a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013a6:	4a97      	ldr	r2, [pc, #604]	@ (8001604 <HAL_RCC_OscConfig+0x780>)
 80013a8:	f023 0304 	bic.w	r3, r3, #4
 80013ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d016      	beq.n	80013e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b8:	f7ff fa40 	bl	800083c <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013be:	e00a      	b.n	80013d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013c0:	f7ff fa3c 	bl	800083c <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e12a      	b.n	800162c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013d6:	4b8b      	ldr	r3, [pc, #556]	@ (8001604 <HAL_RCC_OscConfig+0x780>)
 80013d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0ed      	beq.n	80013c0 <HAL_RCC_OscConfig+0x53c>
 80013e4:	e015      	b.n	8001412 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e6:	f7ff fa29 	bl	800083c <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013ec:	e00a      	b.n	8001404 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ee:	f7ff fa25 	bl	800083c <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e113      	b.n	800162c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001404:	4b7f      	ldr	r3, [pc, #508]	@ (8001604 <HAL_RCC_OscConfig+0x780>)
 8001406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1ed      	bne.n	80013ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001412:	7ffb      	ldrb	r3, [r7, #31]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d105      	bne.n	8001424 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001418:	4b7a      	ldr	r3, [pc, #488]	@ (8001604 <HAL_RCC_OscConfig+0x780>)
 800141a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800141c:	4a79      	ldr	r2, [pc, #484]	@ (8001604 <HAL_RCC_OscConfig+0x780>)
 800141e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001422:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001428:	2b00      	cmp	r3, #0
 800142a:	f000 80fe 	beq.w	800162a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001432:	2b02      	cmp	r3, #2
 8001434:	f040 80d0 	bne.w	80015d8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001438:	4b72      	ldr	r3, [pc, #456]	@ (8001604 <HAL_RCC_OscConfig+0x780>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	f003 0203 	and.w	r2, r3, #3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001448:	429a      	cmp	r2, r3
 800144a:	d130      	bne.n	80014ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	3b01      	subs	r3, #1
 8001458:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800145a:	429a      	cmp	r2, r3
 800145c:	d127      	bne.n	80014ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001468:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800146a:	429a      	cmp	r2, r3
 800146c:	d11f      	bne.n	80014ae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001478:	2a07      	cmp	r2, #7
 800147a:	bf14      	ite	ne
 800147c:	2201      	movne	r2, #1
 800147e:	2200      	moveq	r2, #0
 8001480:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001482:	4293      	cmp	r3, r2
 8001484:	d113      	bne.n	80014ae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001490:	085b      	lsrs	r3, r3, #1
 8001492:	3b01      	subs	r3, #1
 8001494:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001496:	429a      	cmp	r2, r3
 8001498:	d109      	bne.n	80014ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a4:	085b      	lsrs	r3, r3, #1
 80014a6:	3b01      	subs	r3, #1
 80014a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d06e      	beq.n	800158c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	2b0c      	cmp	r3, #12
 80014b2:	d069      	beq.n	8001588 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80014b4:	4b53      	ldr	r3, [pc, #332]	@ (8001604 <HAL_RCC_OscConfig+0x780>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d105      	bne.n	80014cc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80014c0:	4b50      	ldr	r3, [pc, #320]	@ (8001604 <HAL_RCC_OscConfig+0x780>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e0ad      	b.n	800162c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80014d0:	4b4c      	ldr	r3, [pc, #304]	@ (8001604 <HAL_RCC_OscConfig+0x780>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a4b      	ldr	r2, [pc, #300]	@ (8001604 <HAL_RCC_OscConfig+0x780>)
 80014d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80014da:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014dc:	f7ff f9ae 	bl	800083c <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e4:	f7ff f9aa 	bl	800083c <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e09a      	b.n	800162c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014f6:	4b43      	ldr	r3, [pc, #268]	@ (8001604 <HAL_RCC_OscConfig+0x780>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f0      	bne.n	80014e4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001502:	4b40      	ldr	r3, [pc, #256]	@ (8001604 <HAL_RCC_OscConfig+0x780>)
 8001504:	68da      	ldr	r2, [r3, #12]
 8001506:	4b40      	ldr	r3, [pc, #256]	@ (8001608 <HAL_RCC_OscConfig+0x784>)
 8001508:	4013      	ands	r3, r2
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001512:	3a01      	subs	r2, #1
 8001514:	0112      	lsls	r2, r2, #4
 8001516:	4311      	orrs	r1, r2
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800151c:	0212      	lsls	r2, r2, #8
 800151e:	4311      	orrs	r1, r2
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001524:	0852      	lsrs	r2, r2, #1
 8001526:	3a01      	subs	r2, #1
 8001528:	0552      	lsls	r2, r2, #21
 800152a:	4311      	orrs	r1, r2
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001530:	0852      	lsrs	r2, r2, #1
 8001532:	3a01      	subs	r2, #1
 8001534:	0652      	lsls	r2, r2, #25
 8001536:	4311      	orrs	r1, r2
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800153c:	0912      	lsrs	r2, r2, #4
 800153e:	0452      	lsls	r2, r2, #17
 8001540:	430a      	orrs	r2, r1
 8001542:	4930      	ldr	r1, [pc, #192]	@ (8001604 <HAL_RCC_OscConfig+0x780>)
 8001544:	4313      	orrs	r3, r2
 8001546:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001548:	4b2e      	ldr	r3, [pc, #184]	@ (8001604 <HAL_RCC_OscConfig+0x780>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a2d      	ldr	r2, [pc, #180]	@ (8001604 <HAL_RCC_OscConfig+0x780>)
 800154e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001552:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001554:	4b2b      	ldr	r3, [pc, #172]	@ (8001604 <HAL_RCC_OscConfig+0x780>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	4a2a      	ldr	r2, [pc, #168]	@ (8001604 <HAL_RCC_OscConfig+0x780>)
 800155a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800155e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001560:	f7ff f96c 	bl	800083c <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001568:	f7ff f968 	bl	800083c <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e058      	b.n	800162c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800157a:	4b22      	ldr	r3, [pc, #136]	@ (8001604 <HAL_RCC_OscConfig+0x780>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f0      	beq.n	8001568 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001586:	e050      	b.n	800162a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e04f      	b.n	800162c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800158c:	4b1d      	ldr	r3, [pc, #116]	@ (8001604 <HAL_RCC_OscConfig+0x780>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d148      	bne.n	800162a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001598:	4b1a      	ldr	r3, [pc, #104]	@ (8001604 <HAL_RCC_OscConfig+0x780>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a19      	ldr	r2, [pc, #100]	@ (8001604 <HAL_RCC_OscConfig+0x780>)
 800159e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015a4:	4b17      	ldr	r3, [pc, #92]	@ (8001604 <HAL_RCC_OscConfig+0x780>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	4a16      	ldr	r2, [pc, #88]	@ (8001604 <HAL_RCC_OscConfig+0x780>)
 80015aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80015b0:	f7ff f944 	bl	800083c <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b8:	f7ff f940 	bl	800083c <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e030      	b.n	800162c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001604 <HAL_RCC_OscConfig+0x780>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0f0      	beq.n	80015b8 <HAL_RCC_OscConfig+0x734>
 80015d6:	e028      	b.n	800162a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	2b0c      	cmp	r3, #12
 80015dc:	d023      	beq.n	8001626 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015de:	4b09      	ldr	r3, [pc, #36]	@ (8001604 <HAL_RCC_OscConfig+0x780>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a08      	ldr	r2, [pc, #32]	@ (8001604 <HAL_RCC_OscConfig+0x780>)
 80015e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80015e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ea:	f7ff f927 	bl	800083c <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015f0:	e00c      	b.n	800160c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f2:	f7ff f923 	bl	800083c <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d905      	bls.n	800160c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e013      	b.n	800162c <HAL_RCC_OscConfig+0x7a8>
 8001604:	40021000 	.word	0x40021000
 8001608:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800160c:	4b09      	ldr	r3, [pc, #36]	@ (8001634 <HAL_RCC_OscConfig+0x7b0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1ec      	bne.n	80015f2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001618:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <HAL_RCC_OscConfig+0x7b0>)
 800161a:	68da      	ldr	r2, [r3, #12]
 800161c:	4905      	ldr	r1, [pc, #20]	@ (8001634 <HAL_RCC_OscConfig+0x7b0>)
 800161e:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <HAL_RCC_OscConfig+0x7b4>)
 8001620:	4013      	ands	r3, r2
 8001622:	60cb      	str	r3, [r1, #12]
 8001624:	e001      	b.n	800162a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e000      	b.n	800162c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3720      	adds	r7, #32
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40021000 	.word	0x40021000
 8001638:	feeefffc 	.word	0xfeeefffc

0800163c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e0e7      	b.n	8001820 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001650:	4b75      	ldr	r3, [pc, #468]	@ (8001828 <HAL_RCC_ClockConfig+0x1ec>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0307 	and.w	r3, r3, #7
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	d910      	bls.n	8001680 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165e:	4b72      	ldr	r3, [pc, #456]	@ (8001828 <HAL_RCC_ClockConfig+0x1ec>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f023 0207 	bic.w	r2, r3, #7
 8001666:	4970      	ldr	r1, [pc, #448]	@ (8001828 <HAL_RCC_ClockConfig+0x1ec>)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	4313      	orrs	r3, r2
 800166c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800166e:	4b6e      	ldr	r3, [pc, #440]	@ (8001828 <HAL_RCC_ClockConfig+0x1ec>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	429a      	cmp	r2, r3
 800167a:	d001      	beq.n	8001680 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e0cf      	b.n	8001820 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d010      	beq.n	80016ae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	4b66      	ldr	r3, [pc, #408]	@ (800182c <HAL_RCC_ClockConfig+0x1f0>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001698:	429a      	cmp	r2, r3
 800169a:	d908      	bls.n	80016ae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800169c:	4b63      	ldr	r3, [pc, #396]	@ (800182c <HAL_RCC_ClockConfig+0x1f0>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	4960      	ldr	r1, [pc, #384]	@ (800182c <HAL_RCC_ClockConfig+0x1f0>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d04c      	beq.n	8001754 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d107      	bne.n	80016d2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016c2:	4b5a      	ldr	r3, [pc, #360]	@ (800182c <HAL_RCC_ClockConfig+0x1f0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d121      	bne.n	8001712 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e0a6      	b.n	8001820 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d107      	bne.n	80016ea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016da:	4b54      	ldr	r3, [pc, #336]	@ (800182c <HAL_RCC_ClockConfig+0x1f0>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d115      	bne.n	8001712 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e09a      	b.n	8001820 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d107      	bne.n	8001702 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016f2:	4b4e      	ldr	r3, [pc, #312]	@ (800182c <HAL_RCC_ClockConfig+0x1f0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d109      	bne.n	8001712 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e08e      	b.n	8001820 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001702:	4b4a      	ldr	r3, [pc, #296]	@ (800182c <HAL_RCC_ClockConfig+0x1f0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e086      	b.n	8001820 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001712:	4b46      	ldr	r3, [pc, #280]	@ (800182c <HAL_RCC_ClockConfig+0x1f0>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f023 0203 	bic.w	r2, r3, #3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	4943      	ldr	r1, [pc, #268]	@ (800182c <HAL_RCC_ClockConfig+0x1f0>)
 8001720:	4313      	orrs	r3, r2
 8001722:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001724:	f7ff f88a 	bl	800083c <HAL_GetTick>
 8001728:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800172a:	e00a      	b.n	8001742 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800172c:	f7ff f886 	bl	800083c <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800173a:	4293      	cmp	r3, r2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e06e      	b.n	8001820 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001742:	4b3a      	ldr	r3, [pc, #232]	@ (800182c <HAL_RCC_ClockConfig+0x1f0>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 020c 	and.w	r2, r3, #12
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	429a      	cmp	r2, r3
 8001752:	d1eb      	bne.n	800172c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d010      	beq.n	8001782 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	4b31      	ldr	r3, [pc, #196]	@ (800182c <HAL_RCC_ClockConfig+0x1f0>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800176c:	429a      	cmp	r2, r3
 800176e:	d208      	bcs.n	8001782 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001770:	4b2e      	ldr	r3, [pc, #184]	@ (800182c <HAL_RCC_ClockConfig+0x1f0>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	492b      	ldr	r1, [pc, #172]	@ (800182c <HAL_RCC_ClockConfig+0x1f0>)
 800177e:	4313      	orrs	r3, r2
 8001780:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001782:	4b29      	ldr	r3, [pc, #164]	@ (8001828 <HAL_RCC_ClockConfig+0x1ec>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	429a      	cmp	r2, r3
 800178e:	d210      	bcs.n	80017b2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001790:	4b25      	ldr	r3, [pc, #148]	@ (8001828 <HAL_RCC_ClockConfig+0x1ec>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f023 0207 	bic.w	r2, r3, #7
 8001798:	4923      	ldr	r1, [pc, #140]	@ (8001828 <HAL_RCC_ClockConfig+0x1ec>)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	4313      	orrs	r3, r2
 800179e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a0:	4b21      	ldr	r3, [pc, #132]	@ (8001828 <HAL_RCC_ClockConfig+0x1ec>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d001      	beq.n	80017b2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e036      	b.n	8001820 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d008      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017be:	4b1b      	ldr	r3, [pc, #108]	@ (800182c <HAL_RCC_ClockConfig+0x1f0>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	4918      	ldr	r1, [pc, #96]	@ (800182c <HAL_RCC_ClockConfig+0x1f0>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0308 	and.w	r3, r3, #8
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d009      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017dc:	4b13      	ldr	r3, [pc, #76]	@ (800182c <HAL_RCC_ClockConfig+0x1f0>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	4910      	ldr	r1, [pc, #64]	@ (800182c <HAL_RCC_ClockConfig+0x1f0>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017f0:	f000 f824 	bl	800183c <HAL_RCC_GetSysClockFreq>
 80017f4:	4602      	mov	r2, r0
 80017f6:	4b0d      	ldr	r3, [pc, #52]	@ (800182c <HAL_RCC_ClockConfig+0x1f0>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	091b      	lsrs	r3, r3, #4
 80017fc:	f003 030f 	and.w	r3, r3, #15
 8001800:	490b      	ldr	r1, [pc, #44]	@ (8001830 <HAL_RCC_ClockConfig+0x1f4>)
 8001802:	5ccb      	ldrb	r3, [r1, r3]
 8001804:	f003 031f 	and.w	r3, r3, #31
 8001808:	fa22 f303 	lsr.w	r3, r2, r3
 800180c:	4a09      	ldr	r2, [pc, #36]	@ (8001834 <HAL_RCC_ClockConfig+0x1f8>)
 800180e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001810:	4b09      	ldr	r3, [pc, #36]	@ (8001838 <HAL_RCC_ClockConfig+0x1fc>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe ffc1 	bl	800079c <HAL_InitTick>
 800181a:	4603      	mov	r3, r0
 800181c:	72fb      	strb	r3, [r7, #11]

  return status;
 800181e:	7afb      	ldrb	r3, [r7, #11]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40022000 	.word	0x40022000
 800182c:	40021000 	.word	0x40021000
 8001830:	08002c28 	.word	0x08002c28
 8001834:	20000004 	.word	0x20000004
 8001838:	20000008 	.word	0x20000008

0800183c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800183c:	b480      	push	{r7}
 800183e:	b089      	sub	sp, #36	@ 0x24
 8001840:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
 8001846:	2300      	movs	r3, #0
 8001848:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800184a:	4b3e      	ldr	r3, [pc, #248]	@ (8001944 <HAL_RCC_GetSysClockFreq+0x108>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 030c 	and.w	r3, r3, #12
 8001852:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001854:	4b3b      	ldr	r3, [pc, #236]	@ (8001944 <HAL_RCC_GetSysClockFreq+0x108>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d005      	beq.n	8001870 <HAL_RCC_GetSysClockFreq+0x34>
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	2b0c      	cmp	r3, #12
 8001868:	d121      	bne.n	80018ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d11e      	bne.n	80018ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001870:	4b34      	ldr	r3, [pc, #208]	@ (8001944 <HAL_RCC_GetSysClockFreq+0x108>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0308 	and.w	r3, r3, #8
 8001878:	2b00      	cmp	r3, #0
 800187a:	d107      	bne.n	800188c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800187c:	4b31      	ldr	r3, [pc, #196]	@ (8001944 <HAL_RCC_GetSysClockFreq+0x108>)
 800187e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001882:	0a1b      	lsrs	r3, r3, #8
 8001884:	f003 030f 	and.w	r3, r3, #15
 8001888:	61fb      	str	r3, [r7, #28]
 800188a:	e005      	b.n	8001898 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800188c:	4b2d      	ldr	r3, [pc, #180]	@ (8001944 <HAL_RCC_GetSysClockFreq+0x108>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	091b      	lsrs	r3, r3, #4
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001898:	4a2b      	ldr	r2, [pc, #172]	@ (8001948 <HAL_RCC_GetSysClockFreq+0x10c>)
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d10d      	bne.n	80018c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018ac:	e00a      	b.n	80018c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d102      	bne.n	80018ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80018b4:	4b25      	ldr	r3, [pc, #148]	@ (800194c <HAL_RCC_GetSysClockFreq+0x110>)
 80018b6:	61bb      	str	r3, [r7, #24]
 80018b8:	e004      	b.n	80018c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	2b08      	cmp	r3, #8
 80018be:	d101      	bne.n	80018c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80018c0:	4b23      	ldr	r3, [pc, #140]	@ (8001950 <HAL_RCC_GetSysClockFreq+0x114>)
 80018c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	2b0c      	cmp	r3, #12
 80018c8:	d134      	bne.n	8001934 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001944 <HAL_RCC_GetSysClockFreq+0x108>)
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d003      	beq.n	80018e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	2b03      	cmp	r3, #3
 80018de:	d003      	beq.n	80018e8 <HAL_RCC_GetSysClockFreq+0xac>
 80018e0:	e005      	b.n	80018ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80018e2:	4b1a      	ldr	r3, [pc, #104]	@ (800194c <HAL_RCC_GetSysClockFreq+0x110>)
 80018e4:	617b      	str	r3, [r7, #20]
      break;
 80018e6:	e005      	b.n	80018f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80018e8:	4b19      	ldr	r3, [pc, #100]	@ (8001950 <HAL_RCC_GetSysClockFreq+0x114>)
 80018ea:	617b      	str	r3, [r7, #20]
      break;
 80018ec:	e002      	b.n	80018f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	617b      	str	r3, [r7, #20]
      break;
 80018f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018f4:	4b13      	ldr	r3, [pc, #76]	@ (8001944 <HAL_RCC_GetSysClockFreq+0x108>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	091b      	lsrs	r3, r3, #4
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	3301      	adds	r3, #1
 8001900:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001902:	4b10      	ldr	r3, [pc, #64]	@ (8001944 <HAL_RCC_GetSysClockFreq+0x108>)
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	0a1b      	lsrs	r3, r3, #8
 8001908:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	fb03 f202 	mul.w	r2, r3, r2
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	fbb2 f3f3 	udiv	r3, r2, r3
 8001918:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800191a:	4b0a      	ldr	r3, [pc, #40]	@ (8001944 <HAL_RCC_GetSysClockFreq+0x108>)
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	0e5b      	lsrs	r3, r3, #25
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	3301      	adds	r3, #1
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001932:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001934:	69bb      	ldr	r3, [r7, #24]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3724      	adds	r7, #36	@ 0x24
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	40021000 	.word	0x40021000
 8001948:	08002c38 	.word	0x08002c38
 800194c:	00f42400 	.word	0x00f42400
 8001950:	007a1200 	.word	0x007a1200

08001954 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800195c:	2300      	movs	r3, #0
 800195e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001960:	4b2a      	ldr	r3, [pc, #168]	@ (8001a0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001964:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800196c:	f7ff fa26 	bl	8000dbc <HAL_PWREx_GetVoltageRange>
 8001970:	6178      	str	r0, [r7, #20]
 8001972:	e014      	b.n	800199e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001974:	4b25      	ldr	r3, [pc, #148]	@ (8001a0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001978:	4a24      	ldr	r2, [pc, #144]	@ (8001a0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800197a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800197e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001980:	4b22      	ldr	r3, [pc, #136]	@ (8001a0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001984:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800198c:	f7ff fa16 	bl	8000dbc <HAL_PWREx_GetVoltageRange>
 8001990:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001992:	4b1e      	ldr	r3, [pc, #120]	@ (8001a0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001996:	4a1d      	ldr	r2, [pc, #116]	@ (8001a0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001998:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800199c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019a4:	d10b      	bne.n	80019be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b80      	cmp	r3, #128	@ 0x80
 80019aa:	d919      	bls.n	80019e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2ba0      	cmp	r3, #160	@ 0xa0
 80019b0:	d902      	bls.n	80019b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019b2:	2302      	movs	r3, #2
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	e013      	b.n	80019e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019b8:	2301      	movs	r3, #1
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	e010      	b.n	80019e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b80      	cmp	r3, #128	@ 0x80
 80019c2:	d902      	bls.n	80019ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80019c4:	2303      	movs	r3, #3
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	e00a      	b.n	80019e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b80      	cmp	r3, #128	@ 0x80
 80019ce:	d102      	bne.n	80019d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019d0:	2302      	movs	r3, #2
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	e004      	b.n	80019e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b70      	cmp	r3, #112	@ 0x70
 80019da:	d101      	bne.n	80019e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019dc:	2301      	movs	r3, #1
 80019de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80019e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f023 0207 	bic.w	r2, r3, #7
 80019e8:	4909      	ldr	r1, [pc, #36]	@ (8001a10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80019f0:	4b07      	ldr	r3, [pc, #28]	@ (8001a10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d001      	beq.n	8001a02 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e000      	b.n	8001a04 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40022000 	.word	0x40022000

08001a14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e049      	b.n	8001aba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d106      	bne.n	8001a40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7fe fd9e 	bl	800057c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2202      	movs	r2, #2
 8001a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3304      	adds	r3, #4
 8001a50:	4619      	mov	r1, r3
 8001a52:	4610      	mov	r0, r2
 8001a54:	f000 fb7a 	bl	800214c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e049      	b.n	8001b68 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d106      	bne.n	8001aee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 f841 	bl	8001b70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2202      	movs	r2, #2
 8001af2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3304      	adds	r3, #4
 8001afe:	4619      	mov	r1, r3
 8001b00:	4610      	mov	r0, r2
 8001b02:	f000 fb23 	bl	800214c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d109      	bne.n	8001ba8 <HAL_TIM_PWM_Start+0x24>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	bf14      	ite	ne
 8001ba0:	2301      	movne	r3, #1
 8001ba2:	2300      	moveq	r3, #0
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	e03c      	b.n	8001c22 <HAL_TIM_PWM_Start+0x9e>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d109      	bne.n	8001bc2 <HAL_TIM_PWM_Start+0x3e>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	bf14      	ite	ne
 8001bba:	2301      	movne	r3, #1
 8001bbc:	2300      	moveq	r3, #0
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	e02f      	b.n	8001c22 <HAL_TIM_PWM_Start+0x9e>
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d109      	bne.n	8001bdc <HAL_TIM_PWM_Start+0x58>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	bf14      	ite	ne
 8001bd4:	2301      	movne	r3, #1
 8001bd6:	2300      	moveq	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	e022      	b.n	8001c22 <HAL_TIM_PWM_Start+0x9e>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	2b0c      	cmp	r3, #12
 8001be0:	d109      	bne.n	8001bf6 <HAL_TIM_PWM_Start+0x72>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	bf14      	ite	ne
 8001bee:	2301      	movne	r3, #1
 8001bf0:	2300      	moveq	r3, #0
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	e015      	b.n	8001c22 <HAL_TIM_PWM_Start+0x9e>
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	2b10      	cmp	r3, #16
 8001bfa:	d109      	bne.n	8001c10 <HAL_TIM_PWM_Start+0x8c>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	bf14      	ite	ne
 8001c08:	2301      	movne	r3, #1
 8001c0a:	2300      	moveq	r3, #0
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	e008      	b.n	8001c22 <HAL_TIM_PWM_Start+0x9e>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	bf14      	ite	ne
 8001c1c:	2301      	movne	r3, #1
 8001c1e:	2300      	moveq	r3, #0
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e09c      	b.n	8001d64 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d104      	bne.n	8001c3a <HAL_TIM_PWM_Start+0xb6>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2202      	movs	r2, #2
 8001c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c38:	e023      	b.n	8001c82 <HAL_TIM_PWM_Start+0xfe>
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d104      	bne.n	8001c4a <HAL_TIM_PWM_Start+0xc6>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2202      	movs	r2, #2
 8001c44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c48:	e01b      	b.n	8001c82 <HAL_TIM_PWM_Start+0xfe>
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	2b08      	cmp	r3, #8
 8001c4e:	d104      	bne.n	8001c5a <HAL_TIM_PWM_Start+0xd6>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2202      	movs	r2, #2
 8001c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c58:	e013      	b.n	8001c82 <HAL_TIM_PWM_Start+0xfe>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	2b0c      	cmp	r3, #12
 8001c5e:	d104      	bne.n	8001c6a <HAL_TIM_PWM_Start+0xe6>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2202      	movs	r2, #2
 8001c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001c68:	e00b      	b.n	8001c82 <HAL_TIM_PWM_Start+0xfe>
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	2b10      	cmp	r3, #16
 8001c6e:	d104      	bne.n	8001c7a <HAL_TIM_PWM_Start+0xf6>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2202      	movs	r2, #2
 8001c74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c78:	e003      	b.n	8001c82 <HAL_TIM_PWM_Start+0xfe>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2201      	movs	r2, #1
 8001c88:	6839      	ldr	r1, [r7, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f000 fe68 	bl	8002960 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a35      	ldr	r2, [pc, #212]	@ (8001d6c <HAL_TIM_PWM_Start+0x1e8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d013      	beq.n	8001cc2 <HAL_TIM_PWM_Start+0x13e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a34      	ldr	r2, [pc, #208]	@ (8001d70 <HAL_TIM_PWM_Start+0x1ec>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d00e      	beq.n	8001cc2 <HAL_TIM_PWM_Start+0x13e>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a32      	ldr	r2, [pc, #200]	@ (8001d74 <HAL_TIM_PWM_Start+0x1f0>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d009      	beq.n	8001cc2 <HAL_TIM_PWM_Start+0x13e>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a31      	ldr	r2, [pc, #196]	@ (8001d78 <HAL_TIM_PWM_Start+0x1f4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d004      	beq.n	8001cc2 <HAL_TIM_PWM_Start+0x13e>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a2f      	ldr	r2, [pc, #188]	@ (8001d7c <HAL_TIM_PWM_Start+0x1f8>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d101      	bne.n	8001cc6 <HAL_TIM_PWM_Start+0x142>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <HAL_TIM_PWM_Start+0x144>
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d007      	beq.n	8001cdc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001cda:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a22      	ldr	r2, [pc, #136]	@ (8001d6c <HAL_TIM_PWM_Start+0x1e8>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d01d      	beq.n	8001d22 <HAL_TIM_PWM_Start+0x19e>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cee:	d018      	beq.n	8001d22 <HAL_TIM_PWM_Start+0x19e>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a22      	ldr	r2, [pc, #136]	@ (8001d80 <HAL_TIM_PWM_Start+0x1fc>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d013      	beq.n	8001d22 <HAL_TIM_PWM_Start+0x19e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a21      	ldr	r2, [pc, #132]	@ (8001d84 <HAL_TIM_PWM_Start+0x200>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d00e      	beq.n	8001d22 <HAL_TIM_PWM_Start+0x19e>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a1f      	ldr	r2, [pc, #124]	@ (8001d88 <HAL_TIM_PWM_Start+0x204>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d009      	beq.n	8001d22 <HAL_TIM_PWM_Start+0x19e>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a17      	ldr	r2, [pc, #92]	@ (8001d70 <HAL_TIM_PWM_Start+0x1ec>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d004      	beq.n	8001d22 <HAL_TIM_PWM_Start+0x19e>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a15      	ldr	r2, [pc, #84]	@ (8001d74 <HAL_TIM_PWM_Start+0x1f0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d115      	bne.n	8001d4e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	4b18      	ldr	r3, [pc, #96]	@ (8001d8c <HAL_TIM_PWM_Start+0x208>)
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2b06      	cmp	r3, #6
 8001d32:	d015      	beq.n	8001d60 <HAL_TIM_PWM_Start+0x1dc>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d3a:	d011      	beq.n	8001d60 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0201 	orr.w	r2, r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d4c:	e008      	b.n	8001d60 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f042 0201 	orr.w	r2, r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	e000      	b.n	8001d62 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40012c00 	.word	0x40012c00
 8001d70:	40013400 	.word	0x40013400
 8001d74:	40014000 	.word	0x40014000
 8001d78:	40014400 	.word	0x40014400
 8001d7c:	40014800 	.word	0x40014800
 8001d80:	40000400 	.word	0x40000400
 8001d84:	40000800 	.word	0x40000800
 8001d88:	40000c00 	.word	0x40000c00
 8001d8c:	00010007 	.word	0x00010007

08001d90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d101      	bne.n	8001dae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001daa:	2302      	movs	r3, #2
 8001dac:	e0ff      	b.n	8001fae <HAL_TIM_PWM_ConfigChannel+0x21e>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b14      	cmp	r3, #20
 8001dba:	f200 80f0 	bhi.w	8001f9e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8001dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8001dc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc4:	08001e19 	.word	0x08001e19
 8001dc8:	08001f9f 	.word	0x08001f9f
 8001dcc:	08001f9f 	.word	0x08001f9f
 8001dd0:	08001f9f 	.word	0x08001f9f
 8001dd4:	08001e59 	.word	0x08001e59
 8001dd8:	08001f9f 	.word	0x08001f9f
 8001ddc:	08001f9f 	.word	0x08001f9f
 8001de0:	08001f9f 	.word	0x08001f9f
 8001de4:	08001e9b 	.word	0x08001e9b
 8001de8:	08001f9f 	.word	0x08001f9f
 8001dec:	08001f9f 	.word	0x08001f9f
 8001df0:	08001f9f 	.word	0x08001f9f
 8001df4:	08001edb 	.word	0x08001edb
 8001df8:	08001f9f 	.word	0x08001f9f
 8001dfc:	08001f9f 	.word	0x08001f9f
 8001e00:	08001f9f 	.word	0x08001f9f
 8001e04:	08001f1d 	.word	0x08001f1d
 8001e08:	08001f9f 	.word	0x08001f9f
 8001e0c:	08001f9f 	.word	0x08001f9f
 8001e10:	08001f9f 	.word	0x08001f9f
 8001e14:	08001f5d 	.word	0x08001f5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68b9      	ldr	r1, [r7, #8]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f000 fa2e 	bl	8002280 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	699a      	ldr	r2, [r3, #24]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0208 	orr.w	r2, r2, #8
 8001e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	699a      	ldr	r2, [r3, #24]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0204 	bic.w	r2, r2, #4
 8001e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6999      	ldr	r1, [r3, #24]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	691a      	ldr	r2, [r3, #16]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	619a      	str	r2, [r3, #24]
      break;
 8001e56:	e0a5      	b.n	8001fa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68b9      	ldr	r1, [r7, #8]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 fa9e 	bl	80023a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	699a      	ldr	r2, [r3, #24]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	699a      	ldr	r2, [r3, #24]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6999      	ldr	r1, [r3, #24]
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	021a      	lsls	r2, r3, #8
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	619a      	str	r2, [r3, #24]
      break;
 8001e98:	e084      	b.n	8001fa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68b9      	ldr	r1, [r7, #8]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f000 fb07 	bl	80024b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	69da      	ldr	r2, [r3, #28]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f042 0208 	orr.w	r2, r2, #8
 8001eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	69da      	ldr	r2, [r3, #28]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 0204 	bic.w	r2, r2, #4
 8001ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	69d9      	ldr	r1, [r3, #28]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	691a      	ldr	r2, [r3, #16]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	61da      	str	r2, [r3, #28]
      break;
 8001ed8:	e064      	b.n	8001fa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68b9      	ldr	r1, [r7, #8]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f000 fb6f 	bl	80025c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	69da      	ldr	r2, [r3, #28]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ef4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	69da      	ldr	r2, [r3, #28]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	69d9      	ldr	r1, [r3, #28]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	021a      	lsls	r2, r3, #8
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	61da      	str	r2, [r3, #28]
      break;
 8001f1a:	e043      	b.n	8001fa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68b9      	ldr	r1, [r7, #8]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 fbb8 	bl	8002698 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0208 	orr.w	r2, r2, #8
 8001f36:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0204 	bic.w	r2, r2, #4
 8001f46:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	691a      	ldr	r2, [r3, #16]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8001f5a:	e023      	b.n	8001fa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68b9      	ldr	r1, [r7, #8]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 fbfc 	bl	8002760 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f76:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f86:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	021a      	lsls	r2, r3, #8
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8001f9c:	e002      	b.n	8001fa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	75fb      	strb	r3, [r7, #23]
      break;
 8001fa2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop

08001fb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d101      	bne.n	8001fd4 <HAL_TIM_ConfigClockSource+0x1c>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	e0b6      	b.n	8002142 <HAL_TIM_ConfigClockSource+0x18a>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ff2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001ff6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001ffe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002010:	d03e      	beq.n	8002090 <HAL_TIM_ConfigClockSource+0xd8>
 8002012:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002016:	f200 8087 	bhi.w	8002128 <HAL_TIM_ConfigClockSource+0x170>
 800201a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800201e:	f000 8086 	beq.w	800212e <HAL_TIM_ConfigClockSource+0x176>
 8002022:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002026:	d87f      	bhi.n	8002128 <HAL_TIM_ConfigClockSource+0x170>
 8002028:	2b70      	cmp	r3, #112	@ 0x70
 800202a:	d01a      	beq.n	8002062 <HAL_TIM_ConfigClockSource+0xaa>
 800202c:	2b70      	cmp	r3, #112	@ 0x70
 800202e:	d87b      	bhi.n	8002128 <HAL_TIM_ConfigClockSource+0x170>
 8002030:	2b60      	cmp	r3, #96	@ 0x60
 8002032:	d050      	beq.n	80020d6 <HAL_TIM_ConfigClockSource+0x11e>
 8002034:	2b60      	cmp	r3, #96	@ 0x60
 8002036:	d877      	bhi.n	8002128 <HAL_TIM_ConfigClockSource+0x170>
 8002038:	2b50      	cmp	r3, #80	@ 0x50
 800203a:	d03c      	beq.n	80020b6 <HAL_TIM_ConfigClockSource+0xfe>
 800203c:	2b50      	cmp	r3, #80	@ 0x50
 800203e:	d873      	bhi.n	8002128 <HAL_TIM_ConfigClockSource+0x170>
 8002040:	2b40      	cmp	r3, #64	@ 0x40
 8002042:	d058      	beq.n	80020f6 <HAL_TIM_ConfigClockSource+0x13e>
 8002044:	2b40      	cmp	r3, #64	@ 0x40
 8002046:	d86f      	bhi.n	8002128 <HAL_TIM_ConfigClockSource+0x170>
 8002048:	2b30      	cmp	r3, #48	@ 0x30
 800204a:	d064      	beq.n	8002116 <HAL_TIM_ConfigClockSource+0x15e>
 800204c:	2b30      	cmp	r3, #48	@ 0x30
 800204e:	d86b      	bhi.n	8002128 <HAL_TIM_ConfigClockSource+0x170>
 8002050:	2b20      	cmp	r3, #32
 8002052:	d060      	beq.n	8002116 <HAL_TIM_ConfigClockSource+0x15e>
 8002054:	2b20      	cmp	r3, #32
 8002056:	d867      	bhi.n	8002128 <HAL_TIM_ConfigClockSource+0x170>
 8002058:	2b00      	cmp	r3, #0
 800205a:	d05c      	beq.n	8002116 <HAL_TIM_ConfigClockSource+0x15e>
 800205c:	2b10      	cmp	r3, #16
 800205e:	d05a      	beq.n	8002116 <HAL_TIM_ConfigClockSource+0x15e>
 8002060:	e062      	b.n	8002128 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002072:	f000 fc55 	bl	8002920 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002084:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	609a      	str	r2, [r3, #8]
      break;
 800208e:	e04f      	b.n	8002130 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020a0:	f000 fc3e 	bl	8002920 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020b2:	609a      	str	r2, [r3, #8]
      break;
 80020b4:	e03c      	b.n	8002130 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020c2:	461a      	mov	r2, r3
 80020c4:	f000 fbb2 	bl	800282c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2150      	movs	r1, #80	@ 0x50
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 fc0b 	bl	80028ea <TIM_ITRx_SetConfig>
      break;
 80020d4:	e02c      	b.n	8002130 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020e2:	461a      	mov	r2, r3
 80020e4:	f000 fbd1 	bl	800288a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2160      	movs	r1, #96	@ 0x60
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 fbfb 	bl	80028ea <TIM_ITRx_SetConfig>
      break;
 80020f4:	e01c      	b.n	8002130 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002102:	461a      	mov	r2, r3
 8002104:	f000 fb92 	bl	800282c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2140      	movs	r1, #64	@ 0x40
 800210e:	4618      	mov	r0, r3
 8002110:	f000 fbeb 	bl	80028ea <TIM_ITRx_SetConfig>
      break;
 8002114:	e00c      	b.n	8002130 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4619      	mov	r1, r3
 8002120:	4610      	mov	r0, r2
 8002122:	f000 fbe2 	bl	80028ea <TIM_ITRx_SetConfig>
      break;
 8002126:	e003      	b.n	8002130 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	73fb      	strb	r3, [r7, #15]
      break;
 800212c:	e000      	b.n	8002130 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800212e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002140:	7bfb      	ldrb	r3, [r7, #15]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a40      	ldr	r2, [pc, #256]	@ (8002260 <TIM_Base_SetConfig+0x114>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d013      	beq.n	800218c <TIM_Base_SetConfig+0x40>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800216a:	d00f      	beq.n	800218c <TIM_Base_SetConfig+0x40>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a3d      	ldr	r2, [pc, #244]	@ (8002264 <TIM_Base_SetConfig+0x118>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d00b      	beq.n	800218c <TIM_Base_SetConfig+0x40>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a3c      	ldr	r2, [pc, #240]	@ (8002268 <TIM_Base_SetConfig+0x11c>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d007      	beq.n	800218c <TIM_Base_SetConfig+0x40>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a3b      	ldr	r2, [pc, #236]	@ (800226c <TIM_Base_SetConfig+0x120>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d003      	beq.n	800218c <TIM_Base_SetConfig+0x40>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a3a      	ldr	r2, [pc, #232]	@ (8002270 <TIM_Base_SetConfig+0x124>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d108      	bne.n	800219e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002192:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	4313      	orrs	r3, r2
 800219c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a2f      	ldr	r2, [pc, #188]	@ (8002260 <TIM_Base_SetConfig+0x114>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d01f      	beq.n	80021e6 <TIM_Base_SetConfig+0x9a>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021ac:	d01b      	beq.n	80021e6 <TIM_Base_SetConfig+0x9a>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a2c      	ldr	r2, [pc, #176]	@ (8002264 <TIM_Base_SetConfig+0x118>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d017      	beq.n	80021e6 <TIM_Base_SetConfig+0x9a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a2b      	ldr	r2, [pc, #172]	@ (8002268 <TIM_Base_SetConfig+0x11c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d013      	beq.n	80021e6 <TIM_Base_SetConfig+0x9a>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a2a      	ldr	r2, [pc, #168]	@ (800226c <TIM_Base_SetConfig+0x120>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00f      	beq.n	80021e6 <TIM_Base_SetConfig+0x9a>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a29      	ldr	r2, [pc, #164]	@ (8002270 <TIM_Base_SetConfig+0x124>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d00b      	beq.n	80021e6 <TIM_Base_SetConfig+0x9a>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a28      	ldr	r2, [pc, #160]	@ (8002274 <TIM_Base_SetConfig+0x128>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d007      	beq.n	80021e6 <TIM_Base_SetConfig+0x9a>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a27      	ldr	r2, [pc, #156]	@ (8002278 <TIM_Base_SetConfig+0x12c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d003      	beq.n	80021e6 <TIM_Base_SetConfig+0x9a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a26      	ldr	r2, [pc, #152]	@ (800227c <TIM_Base_SetConfig+0x130>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d108      	bne.n	80021f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	4313      	orrs	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a10      	ldr	r2, [pc, #64]	@ (8002260 <TIM_Base_SetConfig+0x114>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d00f      	beq.n	8002244 <TIM_Base_SetConfig+0xf8>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a12      	ldr	r2, [pc, #72]	@ (8002270 <TIM_Base_SetConfig+0x124>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d00b      	beq.n	8002244 <TIM_Base_SetConfig+0xf8>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a11      	ldr	r2, [pc, #68]	@ (8002274 <TIM_Base_SetConfig+0x128>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d007      	beq.n	8002244 <TIM_Base_SetConfig+0xf8>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a10      	ldr	r2, [pc, #64]	@ (8002278 <TIM_Base_SetConfig+0x12c>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d003      	beq.n	8002244 <TIM_Base_SetConfig+0xf8>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a0f      	ldr	r2, [pc, #60]	@ (800227c <TIM_Base_SetConfig+0x130>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d103      	bne.n	800224c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	615a      	str	r2, [r3, #20]
}
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40012c00 	.word	0x40012c00
 8002264:	40000400 	.word	0x40000400
 8002268:	40000800 	.word	0x40000800
 800226c:	40000c00 	.word	0x40000c00
 8002270:	40013400 	.word	0x40013400
 8002274:	40014000 	.word	0x40014000
 8002278:	40014400 	.word	0x40014400
 800227c:	40014800 	.word	0x40014800

08002280 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002280:	b480      	push	{r7}
 8002282:	b087      	sub	sp, #28
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	f023 0201 	bic.w	r2, r3, #1
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f023 0303 	bic.w	r3, r3, #3
 80022ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f023 0302 	bic.w	r3, r3, #2
 80022cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a2c      	ldr	r2, [pc, #176]	@ (800238c <TIM_OC1_SetConfig+0x10c>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d00f      	beq.n	8002300 <TIM_OC1_SetConfig+0x80>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a2b      	ldr	r2, [pc, #172]	@ (8002390 <TIM_OC1_SetConfig+0x110>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d00b      	beq.n	8002300 <TIM_OC1_SetConfig+0x80>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a2a      	ldr	r2, [pc, #168]	@ (8002394 <TIM_OC1_SetConfig+0x114>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d007      	beq.n	8002300 <TIM_OC1_SetConfig+0x80>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a29      	ldr	r2, [pc, #164]	@ (8002398 <TIM_OC1_SetConfig+0x118>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d003      	beq.n	8002300 <TIM_OC1_SetConfig+0x80>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a28      	ldr	r2, [pc, #160]	@ (800239c <TIM_OC1_SetConfig+0x11c>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d10c      	bne.n	800231a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f023 0308 	bic.w	r3, r3, #8
 8002306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	4313      	orrs	r3, r2
 8002310:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f023 0304 	bic.w	r3, r3, #4
 8002318:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a1b      	ldr	r2, [pc, #108]	@ (800238c <TIM_OC1_SetConfig+0x10c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d00f      	beq.n	8002342 <TIM_OC1_SetConfig+0xc2>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a1a      	ldr	r2, [pc, #104]	@ (8002390 <TIM_OC1_SetConfig+0x110>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d00b      	beq.n	8002342 <TIM_OC1_SetConfig+0xc2>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a19      	ldr	r2, [pc, #100]	@ (8002394 <TIM_OC1_SetConfig+0x114>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d007      	beq.n	8002342 <TIM_OC1_SetConfig+0xc2>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a18      	ldr	r2, [pc, #96]	@ (8002398 <TIM_OC1_SetConfig+0x118>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d003      	beq.n	8002342 <TIM_OC1_SetConfig+0xc2>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a17      	ldr	r2, [pc, #92]	@ (800239c <TIM_OC1_SetConfig+0x11c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d111      	bne.n	8002366 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	621a      	str	r2, [r3, #32]
}
 8002380:	bf00      	nop
 8002382:	371c      	adds	r7, #28
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	40012c00 	.word	0x40012c00
 8002390:	40013400 	.word	0x40013400
 8002394:	40014000 	.word	0x40014000
 8002398:	40014400 	.word	0x40014400
 800239c:	40014800 	.word	0x40014800

080023a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b087      	sub	sp, #28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	f023 0210 	bic.w	r2, r3, #16
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	021b      	lsls	r3, r3, #8
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f023 0320 	bic.w	r3, r3, #32
 80023ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	011b      	lsls	r3, r3, #4
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a28      	ldr	r2, [pc, #160]	@ (80024a0 <TIM_OC2_SetConfig+0x100>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d003      	beq.n	800240c <TIM_OC2_SetConfig+0x6c>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a27      	ldr	r2, [pc, #156]	@ (80024a4 <TIM_OC2_SetConfig+0x104>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d10d      	bne.n	8002428 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	4313      	orrs	r3, r2
 800241e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002426:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a1d      	ldr	r2, [pc, #116]	@ (80024a0 <TIM_OC2_SetConfig+0x100>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d00f      	beq.n	8002450 <TIM_OC2_SetConfig+0xb0>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a1c      	ldr	r2, [pc, #112]	@ (80024a4 <TIM_OC2_SetConfig+0x104>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d00b      	beq.n	8002450 <TIM_OC2_SetConfig+0xb0>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a1b      	ldr	r2, [pc, #108]	@ (80024a8 <TIM_OC2_SetConfig+0x108>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d007      	beq.n	8002450 <TIM_OC2_SetConfig+0xb0>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a1a      	ldr	r2, [pc, #104]	@ (80024ac <TIM_OC2_SetConfig+0x10c>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d003      	beq.n	8002450 <TIM_OC2_SetConfig+0xb0>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a19      	ldr	r2, [pc, #100]	@ (80024b0 <TIM_OC2_SetConfig+0x110>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d113      	bne.n	8002478 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002456:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800245e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	4313      	orrs	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	621a      	str	r2, [r3, #32]
}
 8002492:	bf00      	nop
 8002494:	371c      	adds	r7, #28
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40012c00 	.word	0x40012c00
 80024a4:	40013400 	.word	0x40013400
 80024a8:	40014000 	.word	0x40014000
 80024ac:	40014400 	.word	0x40014400
 80024b0:	40014800 	.word	0x40014800

080024b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b087      	sub	sp, #28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f023 0303 	bic.w	r3, r3, #3
 80024ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002500:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	021b      	lsls	r3, r3, #8
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	4313      	orrs	r3, r2
 800250c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a27      	ldr	r2, [pc, #156]	@ (80025b0 <TIM_OC3_SetConfig+0xfc>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d003      	beq.n	800251e <TIM_OC3_SetConfig+0x6a>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a26      	ldr	r2, [pc, #152]	@ (80025b4 <TIM_OC3_SetConfig+0x100>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d10d      	bne.n	800253a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002524:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	021b      	lsls	r3, r3, #8
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	4313      	orrs	r3, r2
 8002530:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002538:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a1c      	ldr	r2, [pc, #112]	@ (80025b0 <TIM_OC3_SetConfig+0xfc>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00f      	beq.n	8002562 <TIM_OC3_SetConfig+0xae>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a1b      	ldr	r2, [pc, #108]	@ (80025b4 <TIM_OC3_SetConfig+0x100>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d00b      	beq.n	8002562 <TIM_OC3_SetConfig+0xae>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a1a      	ldr	r2, [pc, #104]	@ (80025b8 <TIM_OC3_SetConfig+0x104>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d007      	beq.n	8002562 <TIM_OC3_SetConfig+0xae>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a19      	ldr	r2, [pc, #100]	@ (80025bc <TIM_OC3_SetConfig+0x108>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d003      	beq.n	8002562 <TIM_OC3_SetConfig+0xae>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a18      	ldr	r2, [pc, #96]	@ (80025c0 <TIM_OC3_SetConfig+0x10c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d113      	bne.n	800258a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002568:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002570:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	4313      	orrs	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	621a      	str	r2, [r3, #32]
}
 80025a4:	bf00      	nop
 80025a6:	371c      	adds	r7, #28
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	40012c00 	.word	0x40012c00
 80025b4:	40013400 	.word	0x40013400
 80025b8:	40014000 	.word	0x40014000
 80025bc:	40014400 	.word	0x40014400
 80025c0:	40014800 	.word	0x40014800

080025c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b087      	sub	sp, #28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	021b      	lsls	r3, r3, #8
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4313      	orrs	r3, r2
 800260a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002612:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	031b      	lsls	r3, r3, #12
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	4313      	orrs	r3, r2
 800261e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a18      	ldr	r2, [pc, #96]	@ (8002684 <TIM_OC4_SetConfig+0xc0>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d00f      	beq.n	8002648 <TIM_OC4_SetConfig+0x84>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a17      	ldr	r2, [pc, #92]	@ (8002688 <TIM_OC4_SetConfig+0xc4>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d00b      	beq.n	8002648 <TIM_OC4_SetConfig+0x84>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a16      	ldr	r2, [pc, #88]	@ (800268c <TIM_OC4_SetConfig+0xc8>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d007      	beq.n	8002648 <TIM_OC4_SetConfig+0x84>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a15      	ldr	r2, [pc, #84]	@ (8002690 <TIM_OC4_SetConfig+0xcc>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d003      	beq.n	8002648 <TIM_OC4_SetConfig+0x84>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a14      	ldr	r2, [pc, #80]	@ (8002694 <TIM_OC4_SetConfig+0xd0>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d109      	bne.n	800265c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800264e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	019b      	lsls	r3, r3, #6
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	4313      	orrs	r3, r2
 800265a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	621a      	str	r2, [r3, #32]
}
 8002676:	bf00      	nop
 8002678:	371c      	adds	r7, #28
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40012c00 	.word	0x40012c00
 8002688:	40013400 	.word	0x40013400
 800268c:	40014000 	.word	0x40014000
 8002690:	40014400 	.word	0x40014400
 8002694:	40014800 	.word	0x40014800

08002698 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002698:	b480      	push	{r7}
 800269a:	b087      	sub	sp, #28
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80026dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	041b      	lsls	r3, r3, #16
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a17      	ldr	r2, [pc, #92]	@ (800274c <TIM_OC5_SetConfig+0xb4>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d00f      	beq.n	8002712 <TIM_OC5_SetConfig+0x7a>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a16      	ldr	r2, [pc, #88]	@ (8002750 <TIM_OC5_SetConfig+0xb8>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d00b      	beq.n	8002712 <TIM_OC5_SetConfig+0x7a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a15      	ldr	r2, [pc, #84]	@ (8002754 <TIM_OC5_SetConfig+0xbc>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d007      	beq.n	8002712 <TIM_OC5_SetConfig+0x7a>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a14      	ldr	r2, [pc, #80]	@ (8002758 <TIM_OC5_SetConfig+0xc0>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d003      	beq.n	8002712 <TIM_OC5_SetConfig+0x7a>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a13      	ldr	r2, [pc, #76]	@ (800275c <TIM_OC5_SetConfig+0xc4>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d109      	bne.n	8002726 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002718:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	021b      	lsls	r3, r3, #8
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	4313      	orrs	r3, r2
 8002724:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	621a      	str	r2, [r3, #32]
}
 8002740:	bf00      	nop
 8002742:	371c      	adds	r7, #28
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	40012c00 	.word	0x40012c00
 8002750:	40013400 	.word	0x40013400
 8002754:	40014000 	.word	0x40014000
 8002758:	40014400 	.word	0x40014400
 800275c:	40014800 	.word	0x40014800

08002760 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800278e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	021b      	lsls	r3, r3, #8
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	4313      	orrs	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80027a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	051b      	lsls	r3, r3, #20
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a18      	ldr	r2, [pc, #96]	@ (8002818 <TIM_OC6_SetConfig+0xb8>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d00f      	beq.n	80027dc <TIM_OC6_SetConfig+0x7c>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a17      	ldr	r2, [pc, #92]	@ (800281c <TIM_OC6_SetConfig+0xbc>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d00b      	beq.n	80027dc <TIM_OC6_SetConfig+0x7c>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a16      	ldr	r2, [pc, #88]	@ (8002820 <TIM_OC6_SetConfig+0xc0>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d007      	beq.n	80027dc <TIM_OC6_SetConfig+0x7c>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a15      	ldr	r2, [pc, #84]	@ (8002824 <TIM_OC6_SetConfig+0xc4>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d003      	beq.n	80027dc <TIM_OC6_SetConfig+0x7c>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a14      	ldr	r2, [pc, #80]	@ (8002828 <TIM_OC6_SetConfig+0xc8>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d109      	bne.n	80027f0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	029b      	lsls	r3, r3, #10
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	621a      	str	r2, [r3, #32]
}
 800280a:	bf00      	nop
 800280c:	371c      	adds	r7, #28
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	40012c00 	.word	0x40012c00
 800281c:	40013400 	.word	0x40013400
 8002820:	40014000 	.word	0x40014000
 8002824:	40014400 	.word	0x40014400
 8002828:	40014800 	.word	0x40014800

0800282c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800282c:	b480      	push	{r7}
 800282e:	b087      	sub	sp, #28
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	f023 0201 	bic.w	r2, r3, #1
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002856:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	4313      	orrs	r3, r2
 8002860:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f023 030a 	bic.w	r3, r3, #10
 8002868:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	4313      	orrs	r3, r2
 8002870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	621a      	str	r2, [r3, #32]
}
 800287e:	bf00      	nop
 8002880:	371c      	adds	r7, #28
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800288a:	b480      	push	{r7}
 800288c:	b087      	sub	sp, #28
 800288e:	af00      	add	r7, sp, #0
 8002890:	60f8      	str	r0, [r7, #12]
 8002892:	60b9      	str	r1, [r7, #8]
 8002894:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	f023 0210 	bic.w	r2, r3, #16
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80028b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	031b      	lsls	r3, r3, #12
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	4313      	orrs	r3, r2
 80028be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80028c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	621a      	str	r2, [r3, #32]
}
 80028de:	bf00      	nop
 80028e0:	371c      	adds	r7, #28
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b085      	sub	sp, #20
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
 80028f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002900:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4313      	orrs	r3, r2
 8002908:	f043 0307 	orr.w	r3, r3, #7
 800290c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	609a      	str	r2, [r3, #8]
}
 8002914:	bf00      	nop
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002920:	b480      	push	{r7}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
 800292c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800293a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	021a      	lsls	r2, r3, #8
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	431a      	orrs	r2, r3
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	4313      	orrs	r3, r2
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	4313      	orrs	r3, r2
 800294c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	609a      	str	r2, [r3, #8]
}
 8002954:	bf00      	nop
 8002956:	371c      	adds	r7, #28
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002960:	b480      	push	{r7}
 8002962:	b087      	sub	sp, #28
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	f003 031f 	and.w	r3, r3, #31
 8002972:	2201      	movs	r2, #1
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6a1a      	ldr	r2, [r3, #32]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	43db      	mvns	r3, r3
 8002982:	401a      	ands	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a1a      	ldr	r2, [r3, #32]
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f003 031f 	and.w	r3, r3, #31
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	fa01 f303 	lsl.w	r3, r1, r3
 8002998:	431a      	orrs	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	621a      	str	r2, [r3, #32]
}
 800299e:	bf00      	nop
 80029a0:	371c      	adds	r7, #28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
	...

080029ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029c0:	2302      	movs	r3, #2
 80029c2:	e068      	b.n	8002a96 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2202      	movs	r2, #2
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a2e      	ldr	r2, [pc, #184]	@ (8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d004      	beq.n	80029f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a2d      	ldr	r2, [pc, #180]	@ (8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d108      	bne.n	8002a0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80029fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a1e      	ldr	r2, [pc, #120]	@ (8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d01d      	beq.n	8002a6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a36:	d018      	beq.n	8002a6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8002aac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d013      	beq.n	8002a6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a1a      	ldr	r2, [pc, #104]	@ (8002ab0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d00e      	beq.n	8002a6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a18      	ldr	r2, [pc, #96]	@ (8002ab4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d009      	beq.n	8002a6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a13      	ldr	r2, [pc, #76]	@ (8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d004      	beq.n	8002a6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a14      	ldr	r2, [pc, #80]	@ (8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d10c      	bne.n	8002a84 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40012c00 	.word	0x40012c00
 8002aa8:	40013400 	.word	0x40013400
 8002aac:	40000400 	.word	0x40000400
 8002ab0:	40000800 	.word	0x40000800
 8002ab4:	40000c00 	.word	0x40000c00
 8002ab8:	40014000 	.word	0x40014000

08002abc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e065      	b.n	8002ba4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	041b      	lsls	r3, r3, #16
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a16      	ldr	r2, [pc, #88]	@ (8002bb0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d004      	beq.n	8002b66 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a14      	ldr	r2, [pc, #80]	@ (8002bb4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d115      	bne.n	8002b92 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b70:	051b      	lsls	r3, r3, #20
 8002b72:	4313      	orrs	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	40012c00 	.word	0x40012c00
 8002bb4:	40013400 	.word	0x40013400

08002bb8 <memset>:
 8002bb8:	4402      	add	r2, r0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d100      	bne.n	8002bc2 <memset+0xa>
 8002bc0:	4770      	bx	lr
 8002bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8002bc6:	e7f9      	b.n	8002bbc <memset+0x4>

08002bc8 <__libc_init_array>:
 8002bc8:	b570      	push	{r4, r5, r6, lr}
 8002bca:	4d0d      	ldr	r5, [pc, #52]	@ (8002c00 <__libc_init_array+0x38>)
 8002bcc:	4c0d      	ldr	r4, [pc, #52]	@ (8002c04 <__libc_init_array+0x3c>)
 8002bce:	1b64      	subs	r4, r4, r5
 8002bd0:	10a4      	asrs	r4, r4, #2
 8002bd2:	2600      	movs	r6, #0
 8002bd4:	42a6      	cmp	r6, r4
 8002bd6:	d109      	bne.n	8002bec <__libc_init_array+0x24>
 8002bd8:	4d0b      	ldr	r5, [pc, #44]	@ (8002c08 <__libc_init_array+0x40>)
 8002bda:	4c0c      	ldr	r4, [pc, #48]	@ (8002c0c <__libc_init_array+0x44>)
 8002bdc:	f000 f818 	bl	8002c10 <_init>
 8002be0:	1b64      	subs	r4, r4, r5
 8002be2:	10a4      	asrs	r4, r4, #2
 8002be4:	2600      	movs	r6, #0
 8002be6:	42a6      	cmp	r6, r4
 8002be8:	d105      	bne.n	8002bf6 <__libc_init_array+0x2e>
 8002bea:	bd70      	pop	{r4, r5, r6, pc}
 8002bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf0:	4798      	blx	r3
 8002bf2:	3601      	adds	r6, #1
 8002bf4:	e7ee      	b.n	8002bd4 <__libc_init_array+0xc>
 8002bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bfa:	4798      	blx	r3
 8002bfc:	3601      	adds	r6, #1
 8002bfe:	e7f2      	b.n	8002be6 <__libc_init_array+0x1e>
 8002c00:	08002c68 	.word	0x08002c68
 8002c04:	08002c68 	.word	0x08002c68
 8002c08:	08002c68 	.word	0x08002c68
 8002c0c:	08002c6c 	.word	0x08002c6c

08002c10 <_init>:
 8002c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c12:	bf00      	nop
 8002c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c16:	bc08      	pop	{r3}
 8002c18:	469e      	mov	lr, r3
 8002c1a:	4770      	bx	lr

08002c1c <_fini>:
 8002c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c1e:	bf00      	nop
 8002c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c22:	bc08      	pop	{r3}
 8002c24:	469e      	mov	lr, r3
 8002c26:	4770      	bx	lr
