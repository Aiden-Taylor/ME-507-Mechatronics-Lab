
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c88  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003e28  08003e28  00004e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ea4  08003ea4  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003ea4  08003ea4  00004ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003eac  08003eac  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eac  08003eac  00004eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003eb0  08003eb0  00004eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003eb4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000068  08003f1c  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08003f1c  00005280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009bc0  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ac9  00000000  00000000  0000ec58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  00010728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007fd  00000000  00000000  00011198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f95  00000000  00000000  00011995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b992  00000000  00000000  0002892a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d5f8  00000000  00000000  000342bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c18b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003260  00000000  00000000  000c18f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000c4b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003e10 	.word	0x08003e10

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003e10 	.word	0x08003e10

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fc9b 	bl	8000eb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f84f 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f9bb 	bl	80008f8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000582:	f000 f8b3 	bl	80006ec <MX_TIM1_Init>
  MX_TIM2_Init();
 8000586:	f000 f959 	bl	800083c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800058a:	2100      	movs	r1, #0
 800058c:	481d      	ldr	r0, [pc, #116]	@ (8000604 <main+0x94>)
 800058e:	f001 fc0b 	bl	8001da8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000592:	2104      	movs	r1, #4
 8000594:	481b      	ldr	r0, [pc, #108]	@ (8000604 <main+0x94>)
 8000596:	f001 fc07 	bl	8001da8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800059a:	2108      	movs	r1, #8
 800059c:	4819      	ldr	r0, [pc, #100]	@ (8000604 <main+0x94>)
 800059e:	f001 fc03 	bl	8001da8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80005a2:	210c      	movs	r1, #12
 80005a4:	4817      	ldr	r0, [pc, #92]	@ (8000604 <main+0x94>)
 80005a6:	f001 fbff 	bl	8001da8 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80005aa:	2100      	movs	r1, #0
 80005ac:	4816      	ldr	r0, [pc, #88]	@ (8000608 <main+0x98>)
 80005ae:	f001 fcfb 	bl	8001fa8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80005b2:	2104      	movs	r1, #4
 80005b4:	4814      	ldr	r0, [pc, #80]	@ (8000608 <main+0x98>)
 80005b6:	f001 fcf7 	bl	8001fa8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 80005ba:	2108      	movs	r1, #8
 80005bc:	4812      	ldr	r0, [pc, #72]	@ (8000608 <main+0x98>)
 80005be:	f001 fcf3 	bl	8001fa8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 80005c2:	210c      	movs	r1, #12
 80005c4:	4810      	ldr	r0, [pc, #64]	@ (8000608 <main+0x98>)
 80005c6:	f001 fcef 	bl	8001fa8 <HAL_TIM_IC_Start_IT>

  motor_t mot1 = {.duty    = 0,
 80005ca:	4a10      	ldr	r2, [pc, #64]	@ (800060c <main+0x9c>)
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80005d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  				  .channel = 1,
				  .timer = TIM1};
  motor_t mot2 = {.duty    = 0,
 80005d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000610 <main+0xa0>)
 80005d8:	463b      	mov	r3, r7
 80005da:	ca07      	ldmia	r2, {r0, r1, r2}
 80005dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  dc = (usWidth - 1500)/2;
 80005e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <main+0xa4>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80005e8:	085b      	lsrs	r3, r3, #1
 80005ea:	461a      	mov	r2, r3
 80005ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <main+0xa8>)
 80005ee:	601a      	str	r2, [r3, #0]

	  set_duty(&mot1,dc);
 80005f0:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <main+0xa8>)
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	4611      	mov	r1, r2
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fa26 	bl	8000a4c <set_duty>
	  dc = (usWidth - 1500)/2;
 8000600:	bf00      	nop
 8000602:	e7ed      	b.n	80005e0 <main+0x70>
 8000604:	2000009c 	.word	0x2000009c
 8000608:	200000e4 	.word	0x200000e4
 800060c:	08003e28 	.word	0x08003e28
 8000610:	08003e34 	.word	0x08003e34
 8000614:	20000098 	.word	0x20000098
 8000618:	20000084 	.word	0x20000084

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	@ 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	@ 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f002 fdd7 	bl	80031de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b27      	ldr	r3, [pc, #156]	@ (80006e4 <SystemClock_Config+0xc8>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000648:	4a26      	ldr	r2, [pc, #152]	@ (80006e4 <SystemClock_Config+0xc8>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000650:	4b24      	ldr	r3, [pc, #144]	@ (80006e4 <SystemClock_Config+0xc8>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b21      	ldr	r3, [pc, #132]	@ (80006e8 <SystemClock_Config+0xcc>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a20      	ldr	r2, [pc, #128]	@ (80006e8 <SystemClock_Config+0xcc>)
 8000666:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b1e      	ldr	r3, [pc, #120]	@ (80006e8 <SystemClock_Config+0xcc>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000678:	2301      	movs	r3, #1
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800067c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000680:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000686:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800068a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800068c:	2319      	movs	r3, #25
 800068e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000690:	23c0      	movs	r3, #192	@ 0xc0
 8000692:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000698:	2304      	movs	r3, #4
 800069a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 ff0d 	bl	80014c0 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ac:	f000 f9c8 	bl	8000a40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	2103      	movs	r1, #3
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 f96f 	bl	80019b0 <HAL_RCC_ClockConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006d8:	f000 f9b2 	bl	8000a40 <Error_Handler>
  }
}
 80006dc:	bf00      	nop
 80006de:	3750      	adds	r7, #80	@ 0x50
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b092      	sub	sp, #72	@ 0x48
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
 800070c:	615a      	str	r2, [r3, #20]
 800070e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2220      	movs	r2, #32
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f002 fd61 	bl	80031de <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800071c:	4b45      	ldr	r3, [pc, #276]	@ (8000834 <MX_TIM1_Init+0x148>)
 800071e:	4a46      	ldr	r2, [pc, #280]	@ (8000838 <MX_TIM1_Init+0x14c>)
 8000720:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8;
 8000722:	4b44      	ldr	r3, [pc, #272]	@ (8000834 <MX_TIM1_Init+0x148>)
 8000724:	2208      	movs	r2, #8
 8000726:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000728:	4b42      	ldr	r3, [pc, #264]	@ (8000834 <MX_TIM1_Init+0x148>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 265;
 800072e:	4b41      	ldr	r3, [pc, #260]	@ (8000834 <MX_TIM1_Init+0x148>)
 8000730:	f240 1209 	movw	r2, #265	@ 0x109
 8000734:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000736:	4b3f      	ldr	r3, [pc, #252]	@ (8000834 <MX_TIM1_Init+0x148>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800073c:	4b3d      	ldr	r3, [pc, #244]	@ (8000834 <MX_TIM1_Init+0x148>)
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000742:	4b3c      	ldr	r3, [pc, #240]	@ (8000834 <MX_TIM1_Init+0x148>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000748:	483a      	ldr	r0, [pc, #232]	@ (8000834 <MX_TIM1_Init+0x148>)
 800074a:	f001 fadd 	bl	8001d08 <HAL_TIM_PWM_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000754:	f000 f974 	bl	8000a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000758:	2300      	movs	r3, #0
 800075a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000760:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000764:	4619      	mov	r1, r3
 8000766:	4833      	ldr	r0, [pc, #204]	@ (8000834 <MX_TIM1_Init+0x148>)
 8000768:	f002 fb4e 	bl	8002e08 <HAL_TIMEx_MasterConfigSynchronization>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000772:	f000 f965 	bl	8000a40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000776:	2360      	movs	r3, #96	@ 0x60
 8000778:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800077e:	2300      	movs	r3, #0
 8000780:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000782:	2300      	movs	r3, #0
 8000784:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000786:	2300      	movs	r3, #0
 8000788:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800078a:	2300      	movs	r3, #0
 800078c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800078e:	2300      	movs	r3, #0
 8000790:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000792:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000796:	2200      	movs	r2, #0
 8000798:	4619      	mov	r1, r3
 800079a:	4826      	ldr	r0, [pc, #152]	@ (8000834 <MX_TIM1_Init+0x148>)
 800079c:	f001 feaa 	bl	80024f4 <HAL_TIM_PWM_ConfigChannel>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80007a6:	f000 f94b 	bl	8000a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ae:	2204      	movs	r2, #4
 80007b0:	4619      	mov	r1, r3
 80007b2:	4820      	ldr	r0, [pc, #128]	@ (8000834 <MX_TIM1_Init+0x148>)
 80007b4:	f001 fe9e 	bl	80024f4 <HAL_TIM_PWM_ConfigChannel>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80007be:	f000 f93f 	bl	8000a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007c6:	2208      	movs	r2, #8
 80007c8:	4619      	mov	r1, r3
 80007ca:	481a      	ldr	r0, [pc, #104]	@ (8000834 <MX_TIM1_Init+0x148>)
 80007cc:	f001 fe92 	bl	80024f4 <HAL_TIM_PWM_ConfigChannel>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80007d6:	f000 f933 	bl	8000a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007de:	220c      	movs	r2, #12
 80007e0:	4619      	mov	r1, r3
 80007e2:	4814      	ldr	r0, [pc, #80]	@ (8000834 <MX_TIM1_Init+0x148>)
 80007e4:	f001 fe86 	bl	80024f4 <HAL_TIM_PWM_ConfigChannel>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80007ee:	f000 f927 	bl	8000a40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000806:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800080a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	4619      	mov	r1, r3
 8000814:	4807      	ldr	r0, [pc, #28]	@ (8000834 <MX_TIM1_Init+0x148>)
 8000816:	f002 fb65 	bl	8002ee4 <HAL_TIMEx_ConfigBreakDeadTime>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000820:	f000 f90e 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000824:	4803      	ldr	r0, [pc, #12]	@ (8000834 <MX_TIM1_Init+0x148>)
 8000826:	f000 f9ef 	bl	8000c08 <HAL_TIM_MspPostInit>

}
 800082a:	bf00      	nop
 800082c:	3748      	adds	r7, #72	@ 0x48
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	2000009c 	.word	0x2000009c
 8000838:	40010000 	.word	0x40010000

0800083c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000842:	f107 0310 	add.w	r3, r7, #16
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800084c:	463b      	mov	r3, r7
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000858:	4b26      	ldr	r3, [pc, #152]	@ (80008f4 <MX_TIM2_Init+0xb8>)
 800085a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800085e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000860:	4b24      	ldr	r3, [pc, #144]	@ (80008f4 <MX_TIM2_Init+0xb8>)
 8000862:	2200      	movs	r2, #0
 8000864:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000866:	4b23      	ldr	r3, [pc, #140]	@ (80008f4 <MX_TIM2_Init+0xb8>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800086c:	4b21      	ldr	r3, [pc, #132]	@ (80008f4 <MX_TIM2_Init+0xb8>)
 800086e:	f04f 32ff 	mov.w	r2, #4294967295
 8000872:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000874:	4b1f      	ldr	r3, [pc, #124]	@ (80008f4 <MX_TIM2_Init+0xb8>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087a:	4b1e      	ldr	r3, [pc, #120]	@ (80008f4 <MX_TIM2_Init+0xb8>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000880:	481c      	ldr	r0, [pc, #112]	@ (80008f4 <MX_TIM2_Init+0xb8>)
 8000882:	f001 fb41 	bl	8001f08 <HAL_TIM_IC_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800088c:	f000 f8d8 	bl	8000a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000890:	2300      	movs	r3, #0
 8000892:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000898:	f107 0310 	add.w	r3, r7, #16
 800089c:	4619      	mov	r1, r3
 800089e:	4815      	ldr	r0, [pc, #84]	@ (80008f4 <MX_TIM2_Init+0xb8>)
 80008a0:	f002 fab2 	bl	8002e08 <HAL_TIMEx_MasterConfigSynchronization>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80008aa:	f000 f8c9 	bl	8000a40 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80008ae:	230a      	movs	r3, #10
 80008b0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80008b2:	2301      	movs	r3, #1
 80008b4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80008be:	463b      	mov	r3, r7
 80008c0:	2200      	movs	r2, #0
 80008c2:	4619      	mov	r1, r3
 80008c4:	480b      	ldr	r0, [pc, #44]	@ (80008f4 <MX_TIM2_Init+0xb8>)
 80008c6:	f001 fd79 	bl	80023bc <HAL_TIM_IC_ConfigChannel>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80008d0:	f000 f8b6 	bl	8000a40 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80008d4:	463b      	mov	r3, r7
 80008d6:	2204      	movs	r2, #4
 80008d8:	4619      	mov	r1, r3
 80008da:	4806      	ldr	r0, [pc, #24]	@ (80008f4 <MX_TIM2_Init+0xb8>)
 80008dc:	f001 fd6e 	bl	80023bc <HAL_TIM_IC_ConfigChannel>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 80008e6:	f000 f8ab 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200000e4 	.word	0x200000e4

080008f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b17      	ldr	r3, [pc, #92]	@ (8000960 <MX_GPIO_Init+0x68>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a16      	ldr	r2, [pc, #88]	@ (8000960 <MX_GPIO_Init+0x68>)
 8000908:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <MX_GPIO_Init+0x68>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	4b10      	ldr	r3, [pc, #64]	@ (8000960 <MX_GPIO_Init+0x68>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a0f      	ldr	r2, [pc, #60]	@ (8000960 <MX_GPIO_Init+0x68>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b0d      	ldr	r3, [pc, #52]	@ (8000960 <MX_GPIO_Init+0x68>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <MX_GPIO_Init+0x68>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a08      	ldr	r2, [pc, #32]	@ (8000960 <MX_GPIO_Init+0x68>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <MX_GPIO_Init+0x68>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000952:	bf00      	nop
 8000954:	3714      	adds	r7, #20
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800

08000964 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel1
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	7f1b      	ldrb	r3, [r3, #28]
 8000970:	2b02      	cmp	r3, #2
 8000972:	d152      	bne.n	8000a1a <HAL_TIM_IC_CaptureCallback+0xb6>
		{
			if (Is_First_Captured==0) // if the first value is not captured
 8000974:	4b2b      	ldr	r3, [pc, #172]	@ (8000a24 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d10a      	bne.n	8000992 <HAL_TIM_IC_CaptureCallback+0x2e>
			{
				IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 800097c:	2104      	movs	r1, #4
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f001 fe7a 	bl	8002678 <HAL_TIM_ReadCapturedValue>
 8000984:	4603      	mov	r3, r0
 8000986:	4a28      	ldr	r2, [pc, #160]	@ (8000a28 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000988:	6013      	str	r3, [r2, #0]
				Is_First_Captured = 1;  // set the first captured as true
 800098a:	4b26      	ldr	r3, [pc, #152]	@ (8000a24 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800098c:	2201      	movs	r2, #1
 800098e:	601a      	str	r2, [r3, #0]

				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
				Is_First_Captured = 0; // set it back to false
			}
		}
}
 8000990:	e043      	b.n	8000a1a <HAL_TIM_IC_CaptureCallback+0xb6>
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 8000992:	2104      	movs	r1, #4
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f001 fe6f 	bl	8002678 <HAL_TIM_ReadCapturedValue>
 800099a:	4603      	mov	r3, r0
 800099c:	4a23      	ldr	r2, [pc, #140]	@ (8000a2c <HAL_TIM_IC_CaptureCallback+0xc8>)
 800099e:	6013      	str	r3, [r2, #0]
				if (IC_Val2 > IC_Val1)
 80009a0:	4b22      	ldr	r3, [pc, #136]	@ (8000a2c <HAL_TIM_IC_CaptureCallback+0xc8>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	4b20      	ldr	r3, [pc, #128]	@ (8000a28 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d907      	bls.n	80009bc <HAL_TIM_IC_CaptureCallback+0x58>
					Difference = IC_Val2-IC_Val1;
 80009ac:	4b1f      	ldr	r3, [pc, #124]	@ (8000a2c <HAL_TIM_IC_CaptureCallback+0xc8>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	4a1e      	ldr	r2, [pc, #120]	@ (8000a30 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80009b8:	6013      	str	r3, [r2, #0]
 80009ba:	e00d      	b.n	80009d8 <HAL_TIM_IC_CaptureCallback+0x74>
				else if (IC_Val1 > IC_Val2)
 80009bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a2c <HAL_TIM_IC_CaptureCallback+0xc8>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d907      	bls.n	80009d8 <HAL_TIM_IC_CaptureCallback+0x74>
					Difference = (0xffffffff - IC_Val1) + IC_Val2;
 80009c8:	4b18      	ldr	r3, [pc, #96]	@ (8000a2c <HAL_TIM_IC_CaptureCallback+0xc8>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	4b16      	ldr	r3, [pc, #88]	@ (8000a28 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	3b01      	subs	r3, #1
 80009d4:	4a16      	ldr	r2, [pc, #88]	@ (8000a30 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80009d6:	6013      	str	r3, [r2, #0]
				float refClock = TIMCLOCK;
 80009d8:	4b16      	ldr	r3, [pc, #88]	@ (8000a34 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80009da:	60fb      	str	r3, [r7, #12]
				float mFactor = 1000000/refClock;
 80009dc:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8000a38 <HAL_TIM_IC_CaptureCallback+0xd4>
 80009e0:	ed97 7a03 	vldr	s14, [r7, #12]
 80009e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009e8:	edc7 7a02 	vstr	s15, [r7, #8]
				usWidth = Difference*mFactor;
 80009ec:	4b10      	ldr	r3, [pc, #64]	@ (8000a30 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	ee07 3a90 	vmov	s15, r3
 80009f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80009fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a04:	ee17 2a90 	vmov	r2, s15
 8000a08:	4b0c      	ldr	r3, [pc, #48]	@ (8000a3c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000a0a:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2200      	movs	r2, #0
 8000a12:	625a      	str	r2, [r3, #36]	@ 0x24
				Is_First_Captured = 0; // set it back to false
 8000a14:	4b03      	ldr	r3, [pc, #12]	@ (8000a24 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
}
 8000a1a:	bf00      	nop
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000094 	.word	0x20000094
 8000a28:	20000088 	.word	0x20000088
 8000a2c:	2000008c 	.word	0x2000008c
 8000a30:	20000090 	.word	0x20000090
 8000a34:	4cb71b00 	.word	0x4cb71b00
 8000a38:	49742400 	.word	0x49742400
 8000a3c:	20000098 	.word	0x20000098

08000a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a44:	b672      	cpsid	i
}
 8000a46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <Error_Handler+0x8>

08000a4c <set_duty>:


#include "motor_driver.h"

// The implementation of the motor object method should go in the .c file
void set_duty(motor_t* p_mot, int32_t duty){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
    // Print to the console so we can see what's happening
    printf("Setting Motor Duty Cycle to %d", duty);
 8000a56:	6839      	ldr	r1, [r7, #0]
 8000a58:	481e      	ldr	r0, [pc, #120]	@ (8000ad4 <set_duty+0x88>)
 8000a5a:	f002 fb6b 	bl	8003134 <iprintf>
    p_mot->duty = duty;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	683a      	ldr	r2, [r7, #0]
 8000a62:	601a      	str	r2, [r3, #0]
    // Assign the duty cycle to a field in the structure
    if (p_mot->channel == 1){
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d117      	bne.n	8000a9c <set_duty+0x50>

			if (duty>=0){
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	db08      	blt.n	8000a84 <set_duty+0x38>

				p_mot->timer->CCR1 = duty;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	683a      	ldr	r2, [r7, #0]
 8000a78:	635a      	str	r2, [r3, #52]	@ 0x34
				p_mot->timer->CCR2 = 0;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	689b      	ldr	r3, [r3, #8]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	639a      	str	r2, [r3, #56]	@ 0x38
				duty = -1*duty;
				p_mot->timer->CCR3 = 0;
				p_mot->timer->CCR4 = duty;
			}
    }
}
 8000a82:	e022      	b.n	8000aca <set_duty+0x7e>
				duty = -1*duty;
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	425b      	negs	r3, r3
 8000a88:	603b      	str	r3, [r7, #0]
				p_mot->timer->CCR1 = 0;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	635a      	str	r2, [r3, #52]	@ 0x34
				p_mot->timer->CCR2 = duty;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	683a      	ldr	r2, [r7, #0]
 8000a98:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000a9a:	e016      	b.n	8000aca <set_duty+0x7e>
    		if (duty>=0){
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	db08      	blt.n	8000ab4 <set_duty+0x68>
				p_mot->timer->CCR3 = duty;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	683a      	ldr	r2, [r7, #0]
 8000aa8:	63da      	str	r2, [r3, #60]	@ 0x3c
				p_mot->timer->CCR4 = 0;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000ab2:	e00a      	b.n	8000aca <set_duty+0x7e>
				duty = -1*duty;
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	425b      	negs	r3, r3
 8000ab8:	603b      	str	r3, [r7, #0]
				p_mot->timer->CCR3 = 0;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	63da      	str	r2, [r3, #60]	@ 0x3c
				p_mot->timer->CCR4 = duty;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	683a      	ldr	r2, [r7, #0]
 8000ac8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	08003e40 	.word	0x08003e40

08000ad8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	4b10      	ldr	r3, [pc, #64]	@ (8000b24 <HAL_MspInit+0x4c>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae6:	4a0f      	ldr	r2, [pc, #60]	@ (8000b24 <HAL_MspInit+0x4c>)
 8000ae8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aee:	4b0d      	ldr	r3, [pc, #52]	@ (8000b24 <HAL_MspInit+0x4c>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	603b      	str	r3, [r7, #0]
 8000afe:	4b09      	ldr	r3, [pc, #36]	@ (8000b24 <HAL_MspInit+0x4c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b02:	4a08      	ldr	r2, [pc, #32]	@ (8000b24 <HAL_MspInit+0x4c>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b0a:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <HAL_MspInit+0x4c>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800

08000b28 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0b      	ldr	r2, [pc, #44]	@ (8000b64 <HAL_TIM_PWM_MspInit+0x3c>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d10d      	bne.n	8000b56 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b68 <HAL_TIM_PWM_MspInit+0x40>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b42:	4a09      	ldr	r2, [pc, #36]	@ (8000b68 <HAL_TIM_PWM_MspInit+0x40>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b4a:	4b07      	ldr	r3, [pc, #28]	@ (8000b68 <HAL_TIM_PWM_MspInit+0x40>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b56:	bf00      	nop
 8000b58:	3714      	adds	r7, #20
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	40010000 	.word	0x40010000
 8000b68:	40023800 	.word	0x40023800

08000b6c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	@ 0x28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b8c:	d133      	bne.n	8000bf6 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	4b1b      	ldr	r3, [pc, #108]	@ (8000c00 <HAL_TIM_IC_MspInit+0x94>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b96:	4a1a      	ldr	r2, [pc, #104]	@ (8000c00 <HAL_TIM_IC_MspInit+0x94>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b9e:	4b18      	ldr	r3, [pc, #96]	@ (8000c00 <HAL_TIM_IC_MspInit+0x94>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	4b14      	ldr	r3, [pc, #80]	@ (8000c00 <HAL_TIM_IC_MspInit+0x94>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	4a13      	ldr	r2, [pc, #76]	@ (8000c00 <HAL_TIM_IC_MspInit+0x94>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bba:	4b11      	ldr	r3, [pc, #68]	@ (8000c00 <HAL_TIM_IC_MspInit+0x94>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	4808      	ldr	r0, [pc, #32]	@ (8000c04 <HAL_TIM_IC_MspInit+0x98>)
 8000be2:	f000 fae9 	bl	80011b8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2100      	movs	r1, #0
 8000bea:	201c      	movs	r0, #28
 8000bec:	f000 faad 	bl	800114a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bf0:	201c      	movs	r0, #28
 8000bf2:	f000 fac6 	bl	8001182 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bf6:	bf00      	nop
 8000bf8:	3728      	adds	r7, #40	@ 0x28
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40020000 	.word	0x40020000

08000c08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 030c 	add.w	r3, r7, #12
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a12      	ldr	r2, [pc, #72]	@ (8000c70 <HAL_TIM_MspPostInit+0x68>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d11e      	bne.n	8000c68 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	4b11      	ldr	r3, [pc, #68]	@ (8000c74 <HAL_TIM_MspPostInit+0x6c>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	4a10      	ldr	r2, [pc, #64]	@ (8000c74 <HAL_TIM_MspPostInit+0x6c>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c74 <HAL_TIM_MspPostInit+0x6c>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000c46:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000c4a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	4619      	mov	r1, r3
 8000c62:	4805      	ldr	r0, [pc, #20]	@ (8000c78 <HAL_TIM_MspPostInit+0x70>)
 8000c64:	f000 faa8 	bl	80011b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c68:	bf00      	nop
 8000c6a:	3720      	adds	r7, #32
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40010000 	.word	0x40010000
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020000 	.word	0x40020000

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <NMI_Handler+0x4>

08000c84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <HardFault_Handler+0x4>

08000c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <MemManage_Handler+0x4>

08000c94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <BusFault_Handler+0x4>

08000c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <UsageFault_Handler+0x4>

08000ca4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd2:	f000 f93f 	bl	8000f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ce0:	4802      	ldr	r0, [pc, #8]	@ (8000cec <TIM2_IRQHandler+0x10>)
 8000ce2:	f001 fa7b 	bl	80021dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200000e4 	.word	0x200000e4

08000cf0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	e00a      	b.n	8000d18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d02:	f3af 8000 	nop.w
 8000d06:	4601      	mov	r1, r0
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	1c5a      	adds	r2, r3, #1
 8000d0c:	60ba      	str	r2, [r7, #8]
 8000d0e:	b2ca      	uxtb	r2, r1
 8000d10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	3301      	adds	r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	697a      	ldr	r2, [r7, #20]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	dbf0      	blt.n	8000d02 <_read+0x12>
  }

  return len;
 8000d20:	687b      	ldr	r3, [r7, #4]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b086      	sub	sp, #24
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	60f8      	str	r0, [r7, #12]
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
 8000d3a:	e009      	b.n	8000d50 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	1c5a      	adds	r2, r3, #1
 8000d40:	60ba      	str	r2, [r7, #8]
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	697a      	ldr	r2, [r7, #20]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	dbf1      	blt.n	8000d3c <_write+0x12>
  }
  return len;
 8000d58:	687b      	ldr	r3, [r7, #4]
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3718      	adds	r7, #24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <_close>:

int _close(int file)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
 8000d82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d8a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <_isatty>:

int _isatty(int file)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	b083      	sub	sp, #12
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3714      	adds	r7, #20
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd4:	4a14      	ldr	r2, [pc, #80]	@ (8000e28 <_sbrk+0x5c>)
 8000dd6:	4b15      	ldr	r3, [pc, #84]	@ (8000e2c <_sbrk+0x60>)
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de0:	4b13      	ldr	r3, [pc, #76]	@ (8000e30 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d102      	bne.n	8000dee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de8:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <_sbrk+0x64>)
 8000dea:	4a12      	ldr	r2, [pc, #72]	@ (8000e34 <_sbrk+0x68>)
 8000dec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dee:	4b10      	ldr	r3, [pc, #64]	@ (8000e30 <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d207      	bcs.n	8000e0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dfc:	f002 fa3e 	bl	800327c <__errno>
 8000e00:	4603      	mov	r3, r0
 8000e02:	220c      	movs	r2, #12
 8000e04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	e009      	b.n	8000e20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e0c:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <_sbrk+0x64>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e12:	4b07      	ldr	r3, [pc, #28]	@ (8000e30 <_sbrk+0x64>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	4a05      	ldr	r2, [pc, #20]	@ (8000e30 <_sbrk+0x64>)
 8000e1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20020000 	.word	0x20020000
 8000e2c:	00000400 	.word	0x00000400
 8000e30:	2000012c 	.word	0x2000012c
 8000e34:	20000280 	.word	0x20000280

08000e38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e3c:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <SystemInit+0x20>)
 8000e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e42:	4a05      	ldr	r2, [pc, #20]	@ (8000e58 <SystemInit+0x20>)
 8000e44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e94 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e60:	f7ff ffea 	bl	8000e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e64:	480c      	ldr	r0, [pc, #48]	@ (8000e98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e66:	490d      	ldr	r1, [pc, #52]	@ (8000e9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e68:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e6c:	e002      	b.n	8000e74 <LoopCopyDataInit>

08000e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e72:	3304      	adds	r3, #4

08000e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e78:	d3f9      	bcc.n	8000e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ea8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e80:	e001      	b.n	8000e86 <LoopFillZerobss>

08000e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e84:	3204      	adds	r2, #4

08000e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e88:	d3fb      	bcc.n	8000e82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e8a:	f002 f9fd 	bl	8003288 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e8e:	f7ff fb6f 	bl	8000570 <main>
  bx  lr    
 8000e92:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e9c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ea0:	08003eb4 	.word	0x08003eb4
  ldr r2, =_sbss
 8000ea4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ea8:	20000280 	.word	0x20000280

08000eac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eac:	e7fe      	b.n	8000eac <ADC_IRQHandler>
	...

08000eb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef0 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef0 <HAL_Init+0x40>)
 8000eba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef0 <HAL_Init+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef0 <HAL_Init+0x40>)
 8000ec6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000eca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ecc:	4b08      	ldr	r3, [pc, #32]	@ (8000ef0 <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a07      	ldr	r2, [pc, #28]	@ (8000ef0 <HAL_Init+0x40>)
 8000ed2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed8:	2003      	movs	r0, #3
 8000eda:	f000 f92b 	bl	8001134 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ede:	200f      	movs	r0, #15
 8000ee0:	f000 f808 	bl	8000ef4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee4:	f7ff fdf8 	bl	8000ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40023c00 	.word	0x40023c00

08000ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000efc:	4b12      	ldr	r3, [pc, #72]	@ (8000f48 <HAL_InitTick+0x54>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4b12      	ldr	r3, [pc, #72]	@ (8000f4c <HAL_InitTick+0x58>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	4619      	mov	r1, r3
 8000f06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f943 	bl	800119e <HAL_SYSTICK_Config>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00e      	b.n	8000f40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b0f      	cmp	r3, #15
 8000f26:	d80a      	bhi.n	8000f3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	6879      	ldr	r1, [r7, #4]
 8000f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f30:	f000 f90b 	bl	800114a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f34:	4a06      	ldr	r2, [pc, #24]	@ (8000f50 <HAL_InitTick+0x5c>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	e000      	b.n	8000f40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	20000004 	.word	0x20000004

08000f54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f58:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <HAL_IncTick+0x20>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <HAL_IncTick+0x24>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4413      	add	r3, r2
 8000f64:	4a04      	ldr	r2, [pc, #16]	@ (8000f78 <HAL_IncTick+0x24>)
 8000f66:	6013      	str	r3, [r2, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000008 	.word	0x20000008
 8000f78:	20000130 	.word	0x20000130

08000f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f80:	4b03      	ldr	r3, [pc, #12]	@ (8000f90 <HAL_GetTick+0x14>)
 8000f82:	681b      	ldr	r3, [r3, #0]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000130 	.word	0x20000130

08000f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc6:	4a04      	ldr	r2, [pc, #16]	@ (8000fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	60d3      	str	r3, [r2, #12]
}
 8000fcc:	bf00      	nop
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe0:	4b04      	ldr	r3, [pc, #16]	@ (8000ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	0a1b      	lsrs	r3, r3, #8
 8000fe6:	f003 0307 	and.w	r3, r3, #7
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	2b00      	cmp	r3, #0
 8001008:	db0b      	blt.n	8001022 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	f003 021f 	and.w	r2, r3, #31
 8001010:	4907      	ldr	r1, [pc, #28]	@ (8001030 <__NVIC_EnableIRQ+0x38>)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	095b      	lsrs	r3, r3, #5
 8001018:	2001      	movs	r0, #1
 800101a:	fa00 f202 	lsl.w	r2, r0, r2
 800101e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e000e100 	.word	0xe000e100

08001034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	6039      	str	r1, [r7, #0]
 800103e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001044:	2b00      	cmp	r3, #0
 8001046:	db0a      	blt.n	800105e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	b2da      	uxtb	r2, r3
 800104c:	490c      	ldr	r1, [pc, #48]	@ (8001080 <__NVIC_SetPriority+0x4c>)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	0112      	lsls	r2, r2, #4
 8001054:	b2d2      	uxtb	r2, r2
 8001056:	440b      	add	r3, r1
 8001058:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800105c:	e00a      	b.n	8001074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4908      	ldr	r1, [pc, #32]	@ (8001084 <__NVIC_SetPriority+0x50>)
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	f003 030f 	and.w	r3, r3, #15
 800106a:	3b04      	subs	r3, #4
 800106c:	0112      	lsls	r2, r2, #4
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	440b      	add	r3, r1
 8001072:	761a      	strb	r2, [r3, #24]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000e100 	.word	0xe000e100
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001088:	b480      	push	{r7}
 800108a:	b089      	sub	sp, #36	@ 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f1c3 0307 	rsb	r3, r3, #7
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	bf28      	it	cs
 80010a6:	2304      	movcs	r3, #4
 80010a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3304      	adds	r3, #4
 80010ae:	2b06      	cmp	r3, #6
 80010b0:	d902      	bls.n	80010b8 <NVIC_EncodePriority+0x30>
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3b03      	subs	r3, #3
 80010b6:	e000      	b.n	80010ba <NVIC_EncodePriority+0x32>
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	f04f 32ff 	mov.w	r2, #4294967295
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43da      	mvns	r2, r3
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	401a      	ands	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d0:	f04f 31ff 	mov.w	r1, #4294967295
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	fa01 f303 	lsl.w	r3, r1, r3
 80010da:	43d9      	mvns	r1, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	4313      	orrs	r3, r2
         );
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3724      	adds	r7, #36	@ 0x24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
	...

080010f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001100:	d301      	bcc.n	8001106 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001102:	2301      	movs	r3, #1
 8001104:	e00f      	b.n	8001126 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001106:	4a0a      	ldr	r2, [pc, #40]	@ (8001130 <SysTick_Config+0x40>)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3b01      	subs	r3, #1
 800110c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800110e:	210f      	movs	r1, #15
 8001110:	f04f 30ff 	mov.w	r0, #4294967295
 8001114:	f7ff ff8e 	bl	8001034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001118:	4b05      	ldr	r3, [pc, #20]	@ (8001130 <SysTick_Config+0x40>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111e:	4b04      	ldr	r3, [pc, #16]	@ (8001130 <SysTick_Config+0x40>)
 8001120:	2207      	movs	r2, #7
 8001122:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	e000e010 	.word	0xe000e010

08001134 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff ff29 	bl	8000f94 <__NVIC_SetPriorityGrouping>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800114a:	b580      	push	{r7, lr}
 800114c:	b086      	sub	sp, #24
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	607a      	str	r2, [r7, #4]
 8001156:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800115c:	f7ff ff3e 	bl	8000fdc <__NVIC_GetPriorityGrouping>
 8001160:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	68b9      	ldr	r1, [r7, #8]
 8001166:	6978      	ldr	r0, [r7, #20]
 8001168:	f7ff ff8e 	bl	8001088 <NVIC_EncodePriority>
 800116c:	4602      	mov	r2, r0
 800116e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001172:	4611      	mov	r1, r2
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff ff5d 	bl	8001034 <__NVIC_SetPriority>
}
 800117a:	bf00      	nop
 800117c:	3718      	adds	r7, #24
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800118c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff31 	bl	8000ff8 <__NVIC_EnableIRQ>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff ffa2 	bl	80010f0 <SysTick_Config>
 80011ac:	4603      	mov	r3, r0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b089      	sub	sp, #36	@ 0x24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
 80011d2:	e159      	b.n	8001488 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011d4:	2201      	movs	r2, #1
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	f040 8148 	bne.w	8001482 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d005      	beq.n	800120a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001206:	2b02      	cmp	r3, #2
 8001208:	d130      	bne.n	800126c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	2203      	movs	r2, #3
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	68da      	ldr	r2, [r3, #12]
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001240:	2201      	movs	r2, #1
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	091b      	lsrs	r3, r3, #4
 8001256:	f003 0201 	and.w	r2, r3, #1
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0303 	and.w	r3, r3, #3
 8001274:	2b03      	cmp	r3, #3
 8001276:	d017      	beq.n	80012a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	2203      	movs	r2, #3
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d123      	bne.n	80012fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	08da      	lsrs	r2, r3, #3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3208      	adds	r2, #8
 80012bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	f003 0307 	and.w	r3, r3, #7
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	220f      	movs	r2, #15
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	691a      	ldr	r2, [r3, #16]
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	08da      	lsrs	r2, r3, #3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3208      	adds	r2, #8
 80012f6:	69b9      	ldr	r1, [r7, #24]
 80012f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	2203      	movs	r2, #3
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 0203 	and.w	r2, r3, #3
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001338:	2b00      	cmp	r3, #0
 800133a:	f000 80a2 	beq.w	8001482 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	4b57      	ldr	r3, [pc, #348]	@ (80014a0 <HAL_GPIO_Init+0x2e8>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001346:	4a56      	ldr	r2, [pc, #344]	@ (80014a0 <HAL_GPIO_Init+0x2e8>)
 8001348:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800134c:	6453      	str	r3, [r2, #68]	@ 0x44
 800134e:	4b54      	ldr	r3, [pc, #336]	@ (80014a0 <HAL_GPIO_Init+0x2e8>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001352:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800135a:	4a52      	ldr	r2, [pc, #328]	@ (80014a4 <HAL_GPIO_Init+0x2ec>)
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	089b      	lsrs	r3, r3, #2
 8001360:	3302      	adds	r3, #2
 8001362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	220f      	movs	r2, #15
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a49      	ldr	r2, [pc, #292]	@ (80014a8 <HAL_GPIO_Init+0x2f0>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d019      	beq.n	80013ba <HAL_GPIO_Init+0x202>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a48      	ldr	r2, [pc, #288]	@ (80014ac <HAL_GPIO_Init+0x2f4>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d013      	beq.n	80013b6 <HAL_GPIO_Init+0x1fe>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a47      	ldr	r2, [pc, #284]	@ (80014b0 <HAL_GPIO_Init+0x2f8>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d00d      	beq.n	80013b2 <HAL_GPIO_Init+0x1fa>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a46      	ldr	r2, [pc, #280]	@ (80014b4 <HAL_GPIO_Init+0x2fc>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d007      	beq.n	80013ae <HAL_GPIO_Init+0x1f6>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a45      	ldr	r2, [pc, #276]	@ (80014b8 <HAL_GPIO_Init+0x300>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d101      	bne.n	80013aa <HAL_GPIO_Init+0x1f2>
 80013a6:	2304      	movs	r3, #4
 80013a8:	e008      	b.n	80013bc <HAL_GPIO_Init+0x204>
 80013aa:	2307      	movs	r3, #7
 80013ac:	e006      	b.n	80013bc <HAL_GPIO_Init+0x204>
 80013ae:	2303      	movs	r3, #3
 80013b0:	e004      	b.n	80013bc <HAL_GPIO_Init+0x204>
 80013b2:	2302      	movs	r3, #2
 80013b4:	e002      	b.n	80013bc <HAL_GPIO_Init+0x204>
 80013b6:	2301      	movs	r3, #1
 80013b8:	e000      	b.n	80013bc <HAL_GPIO_Init+0x204>
 80013ba:	2300      	movs	r3, #0
 80013bc:	69fa      	ldr	r2, [r7, #28]
 80013be:	f002 0203 	and.w	r2, r2, #3
 80013c2:	0092      	lsls	r2, r2, #2
 80013c4:	4093      	lsls	r3, r2
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013cc:	4935      	ldr	r1, [pc, #212]	@ (80014a4 <HAL_GPIO_Init+0x2ec>)
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	089b      	lsrs	r3, r3, #2
 80013d2:	3302      	adds	r3, #2
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013da:	4b38      	ldr	r3, [pc, #224]	@ (80014bc <HAL_GPIO_Init+0x304>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013fe:	4a2f      	ldr	r2, [pc, #188]	@ (80014bc <HAL_GPIO_Init+0x304>)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001404:	4b2d      	ldr	r3, [pc, #180]	@ (80014bc <HAL_GPIO_Init+0x304>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001428:	4a24      	ldr	r2, [pc, #144]	@ (80014bc <HAL_GPIO_Init+0x304>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800142e:	4b23      	ldr	r3, [pc, #140]	@ (80014bc <HAL_GPIO_Init+0x304>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001452:	4a1a      	ldr	r2, [pc, #104]	@ (80014bc <HAL_GPIO_Init+0x304>)
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001458:	4b18      	ldr	r3, [pc, #96]	@ (80014bc <HAL_GPIO_Init+0x304>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800147c:	4a0f      	ldr	r2, [pc, #60]	@ (80014bc <HAL_GPIO_Init+0x304>)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3301      	adds	r3, #1
 8001486:	61fb      	str	r3, [r7, #28]
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	2b0f      	cmp	r3, #15
 800148c:	f67f aea2 	bls.w	80011d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	3724      	adds	r7, #36	@ 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40013800 	.word	0x40013800
 80014a8:	40020000 	.word	0x40020000
 80014ac:	40020400 	.word	0x40020400
 80014b0:	40020800 	.word	0x40020800
 80014b4:	40020c00 	.word	0x40020c00
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40013c00 	.word	0x40013c00

080014c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e267      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d075      	beq.n	80015ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014de:	4b88      	ldr	r3, [pc, #544]	@ (8001700 <HAL_RCC_OscConfig+0x240>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 030c 	and.w	r3, r3, #12
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d00c      	beq.n	8001504 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ea:	4b85      	ldr	r3, [pc, #532]	@ (8001700 <HAL_RCC_OscConfig+0x240>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014f2:	2b08      	cmp	r3, #8
 80014f4:	d112      	bne.n	800151c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014f6:	4b82      	ldr	r3, [pc, #520]	@ (8001700 <HAL_RCC_OscConfig+0x240>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001502:	d10b      	bne.n	800151c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001504:	4b7e      	ldr	r3, [pc, #504]	@ (8001700 <HAL_RCC_OscConfig+0x240>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d05b      	beq.n	80015c8 <HAL_RCC_OscConfig+0x108>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d157      	bne.n	80015c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e242      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001524:	d106      	bne.n	8001534 <HAL_RCC_OscConfig+0x74>
 8001526:	4b76      	ldr	r3, [pc, #472]	@ (8001700 <HAL_RCC_OscConfig+0x240>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a75      	ldr	r2, [pc, #468]	@ (8001700 <HAL_RCC_OscConfig+0x240>)
 800152c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	e01d      	b.n	8001570 <HAL_RCC_OscConfig+0xb0>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800153c:	d10c      	bne.n	8001558 <HAL_RCC_OscConfig+0x98>
 800153e:	4b70      	ldr	r3, [pc, #448]	@ (8001700 <HAL_RCC_OscConfig+0x240>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a6f      	ldr	r2, [pc, #444]	@ (8001700 <HAL_RCC_OscConfig+0x240>)
 8001544:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	4b6d      	ldr	r3, [pc, #436]	@ (8001700 <HAL_RCC_OscConfig+0x240>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a6c      	ldr	r2, [pc, #432]	@ (8001700 <HAL_RCC_OscConfig+0x240>)
 8001550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	e00b      	b.n	8001570 <HAL_RCC_OscConfig+0xb0>
 8001558:	4b69      	ldr	r3, [pc, #420]	@ (8001700 <HAL_RCC_OscConfig+0x240>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a68      	ldr	r2, [pc, #416]	@ (8001700 <HAL_RCC_OscConfig+0x240>)
 800155e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	4b66      	ldr	r3, [pc, #408]	@ (8001700 <HAL_RCC_OscConfig+0x240>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a65      	ldr	r2, [pc, #404]	@ (8001700 <HAL_RCC_OscConfig+0x240>)
 800156a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800156e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d013      	beq.n	80015a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001578:	f7ff fd00 	bl	8000f7c <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001580:	f7ff fcfc 	bl	8000f7c <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b64      	cmp	r3, #100	@ 0x64
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e207      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001592:	4b5b      	ldr	r3, [pc, #364]	@ (8001700 <HAL_RCC_OscConfig+0x240>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f0      	beq.n	8001580 <HAL_RCC_OscConfig+0xc0>
 800159e:	e014      	b.n	80015ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a0:	f7ff fcec 	bl	8000f7c <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015a8:	f7ff fce8 	bl	8000f7c <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b64      	cmp	r3, #100	@ 0x64
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e1f3      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ba:	4b51      	ldr	r3, [pc, #324]	@ (8001700 <HAL_RCC_OscConfig+0x240>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f0      	bne.n	80015a8 <HAL_RCC_OscConfig+0xe8>
 80015c6:	e000      	b.n	80015ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d063      	beq.n	800169e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015d6:	4b4a      	ldr	r3, [pc, #296]	@ (8001700 <HAL_RCC_OscConfig+0x240>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 030c 	and.w	r3, r3, #12
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00b      	beq.n	80015fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015e2:	4b47      	ldr	r3, [pc, #284]	@ (8001700 <HAL_RCC_OscConfig+0x240>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d11c      	bne.n	8001628 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ee:	4b44      	ldr	r3, [pc, #272]	@ (8001700 <HAL_RCC_OscConfig+0x240>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d116      	bne.n	8001628 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015fa:	4b41      	ldr	r3, [pc, #260]	@ (8001700 <HAL_RCC_OscConfig+0x240>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d005      	beq.n	8001612 <HAL_RCC_OscConfig+0x152>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d001      	beq.n	8001612 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e1c7      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001612:	4b3b      	ldr	r3, [pc, #236]	@ (8001700 <HAL_RCC_OscConfig+0x240>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	4937      	ldr	r1, [pc, #220]	@ (8001700 <HAL_RCC_OscConfig+0x240>)
 8001622:	4313      	orrs	r3, r2
 8001624:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001626:	e03a      	b.n	800169e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d020      	beq.n	8001672 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001630:	4b34      	ldr	r3, [pc, #208]	@ (8001704 <HAL_RCC_OscConfig+0x244>)
 8001632:	2201      	movs	r2, #1
 8001634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001636:	f7ff fca1 	bl	8000f7c <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800163e:	f7ff fc9d 	bl	8000f7c <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e1a8      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001650:	4b2b      	ldr	r3, [pc, #172]	@ (8001700 <HAL_RCC_OscConfig+0x240>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165c:	4b28      	ldr	r3, [pc, #160]	@ (8001700 <HAL_RCC_OscConfig+0x240>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	4925      	ldr	r1, [pc, #148]	@ (8001700 <HAL_RCC_OscConfig+0x240>)
 800166c:	4313      	orrs	r3, r2
 800166e:	600b      	str	r3, [r1, #0]
 8001670:	e015      	b.n	800169e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001672:	4b24      	ldr	r3, [pc, #144]	@ (8001704 <HAL_RCC_OscConfig+0x244>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001678:	f7ff fc80 	bl	8000f7c <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001680:	f7ff fc7c 	bl	8000f7c <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e187      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001692:	4b1b      	ldr	r3, [pc, #108]	@ (8001700 <HAL_RCC_OscConfig+0x240>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d036      	beq.n	8001718 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d016      	beq.n	80016e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016b2:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <HAL_RCC_OscConfig+0x248>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b8:	f7ff fc60 	bl	8000f7c <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016c0:	f7ff fc5c 	bl	8000f7c <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e167      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001700 <HAL_RCC_OscConfig+0x240>)
 80016d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0x200>
 80016de:	e01b      	b.n	8001718 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016e0:	4b09      	ldr	r3, [pc, #36]	@ (8001708 <HAL_RCC_OscConfig+0x248>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e6:	f7ff fc49 	bl	8000f7c <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ec:	e00e      	b.n	800170c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ee:	f7ff fc45 	bl	8000f7c <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d907      	bls.n	800170c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e150      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e2>
 8001700:	40023800 	.word	0x40023800
 8001704:	42470000 	.word	0x42470000
 8001708:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800170c:	4b88      	ldr	r3, [pc, #544]	@ (8001930 <HAL_RCC_OscConfig+0x470>)
 800170e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1ea      	bne.n	80016ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 8097 	beq.w	8001854 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001726:	2300      	movs	r3, #0
 8001728:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800172a:	4b81      	ldr	r3, [pc, #516]	@ (8001930 <HAL_RCC_OscConfig+0x470>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10f      	bne.n	8001756 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	4b7d      	ldr	r3, [pc, #500]	@ (8001930 <HAL_RCC_OscConfig+0x470>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173e:	4a7c      	ldr	r2, [pc, #496]	@ (8001930 <HAL_RCC_OscConfig+0x470>)
 8001740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001744:	6413      	str	r3, [r2, #64]	@ 0x40
 8001746:	4b7a      	ldr	r3, [pc, #488]	@ (8001930 <HAL_RCC_OscConfig+0x470>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001752:	2301      	movs	r3, #1
 8001754:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001756:	4b77      	ldr	r3, [pc, #476]	@ (8001934 <HAL_RCC_OscConfig+0x474>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800175e:	2b00      	cmp	r3, #0
 8001760:	d118      	bne.n	8001794 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001762:	4b74      	ldr	r3, [pc, #464]	@ (8001934 <HAL_RCC_OscConfig+0x474>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a73      	ldr	r2, [pc, #460]	@ (8001934 <HAL_RCC_OscConfig+0x474>)
 8001768:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800176c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800176e:	f7ff fc05 	bl	8000f7c <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001774:	e008      	b.n	8001788 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001776:	f7ff fc01 	bl	8000f7c <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e10c      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001788:	4b6a      	ldr	r3, [pc, #424]	@ (8001934 <HAL_RCC_OscConfig+0x474>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0f0      	beq.n	8001776 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d106      	bne.n	80017aa <HAL_RCC_OscConfig+0x2ea>
 800179c:	4b64      	ldr	r3, [pc, #400]	@ (8001930 <HAL_RCC_OscConfig+0x470>)
 800179e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017a0:	4a63      	ldr	r2, [pc, #396]	@ (8001930 <HAL_RCC_OscConfig+0x470>)
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80017a8:	e01c      	b.n	80017e4 <HAL_RCC_OscConfig+0x324>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2b05      	cmp	r3, #5
 80017b0:	d10c      	bne.n	80017cc <HAL_RCC_OscConfig+0x30c>
 80017b2:	4b5f      	ldr	r3, [pc, #380]	@ (8001930 <HAL_RCC_OscConfig+0x470>)
 80017b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017b6:	4a5e      	ldr	r2, [pc, #376]	@ (8001930 <HAL_RCC_OscConfig+0x470>)
 80017b8:	f043 0304 	orr.w	r3, r3, #4
 80017bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80017be:	4b5c      	ldr	r3, [pc, #368]	@ (8001930 <HAL_RCC_OscConfig+0x470>)
 80017c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017c2:	4a5b      	ldr	r2, [pc, #364]	@ (8001930 <HAL_RCC_OscConfig+0x470>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80017ca:	e00b      	b.n	80017e4 <HAL_RCC_OscConfig+0x324>
 80017cc:	4b58      	ldr	r3, [pc, #352]	@ (8001930 <HAL_RCC_OscConfig+0x470>)
 80017ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017d0:	4a57      	ldr	r2, [pc, #348]	@ (8001930 <HAL_RCC_OscConfig+0x470>)
 80017d2:	f023 0301 	bic.w	r3, r3, #1
 80017d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80017d8:	4b55      	ldr	r3, [pc, #340]	@ (8001930 <HAL_RCC_OscConfig+0x470>)
 80017da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017dc:	4a54      	ldr	r2, [pc, #336]	@ (8001930 <HAL_RCC_OscConfig+0x470>)
 80017de:	f023 0304 	bic.w	r3, r3, #4
 80017e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d015      	beq.n	8001818 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ec:	f7ff fbc6 	bl	8000f7c <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f2:	e00a      	b.n	800180a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017f4:	f7ff fbc2 	bl	8000f7c <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001802:	4293      	cmp	r3, r2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e0cb      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800180a:	4b49      	ldr	r3, [pc, #292]	@ (8001930 <HAL_RCC_OscConfig+0x470>)
 800180c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0ee      	beq.n	80017f4 <HAL_RCC_OscConfig+0x334>
 8001816:	e014      	b.n	8001842 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001818:	f7ff fbb0 	bl	8000f7c <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800181e:	e00a      	b.n	8001836 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001820:	f7ff fbac 	bl	8000f7c <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800182e:	4293      	cmp	r3, r2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e0b5      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001836:	4b3e      	ldr	r3, [pc, #248]	@ (8001930 <HAL_RCC_OscConfig+0x470>)
 8001838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1ee      	bne.n	8001820 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001842:	7dfb      	ldrb	r3, [r7, #23]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d105      	bne.n	8001854 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001848:	4b39      	ldr	r3, [pc, #228]	@ (8001930 <HAL_RCC_OscConfig+0x470>)
 800184a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184c:	4a38      	ldr	r2, [pc, #224]	@ (8001930 <HAL_RCC_OscConfig+0x470>)
 800184e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001852:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 80a1 	beq.w	80019a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800185e:	4b34      	ldr	r3, [pc, #208]	@ (8001930 <HAL_RCC_OscConfig+0x470>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 030c 	and.w	r3, r3, #12
 8001866:	2b08      	cmp	r3, #8
 8001868:	d05c      	beq.n	8001924 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d141      	bne.n	80018f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001872:	4b31      	ldr	r3, [pc, #196]	@ (8001938 <HAL_RCC_OscConfig+0x478>)
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001878:	f7ff fb80 	bl	8000f7c <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001880:	f7ff fb7c 	bl	8000f7c <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e087      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001892:	4b27      	ldr	r3, [pc, #156]	@ (8001930 <HAL_RCC_OscConfig+0x470>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69da      	ldr	r2, [r3, #28]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	431a      	orrs	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ac:	019b      	lsls	r3, r3, #6
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b4:	085b      	lsrs	r3, r3, #1
 80018b6:	3b01      	subs	r3, #1
 80018b8:	041b      	lsls	r3, r3, #16
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c0:	061b      	lsls	r3, r3, #24
 80018c2:	491b      	ldr	r1, [pc, #108]	@ (8001930 <HAL_RCC_OscConfig+0x470>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001938 <HAL_RCC_OscConfig+0x478>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ce:	f7ff fb55 	bl	8000f7c <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d6:	f7ff fb51 	bl	8000f7c <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e05c      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e8:	4b11      	ldr	r3, [pc, #68]	@ (8001930 <HAL_RCC_OscConfig+0x470>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0f0      	beq.n	80018d6 <HAL_RCC_OscConfig+0x416>
 80018f4:	e054      	b.n	80019a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f6:	4b10      	ldr	r3, [pc, #64]	@ (8001938 <HAL_RCC_OscConfig+0x478>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fc:	f7ff fb3e 	bl	8000f7c <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001904:	f7ff fb3a 	bl	8000f7c <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e045      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001916:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <HAL_RCC_OscConfig+0x470>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x444>
 8001922:	e03d      	b.n	80019a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d107      	bne.n	800193c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e038      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e2>
 8001930:	40023800 	.word	0x40023800
 8001934:	40007000 	.word	0x40007000
 8001938:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800193c:	4b1b      	ldr	r3, [pc, #108]	@ (80019ac <HAL_RCC_OscConfig+0x4ec>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d028      	beq.n	800199c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001954:	429a      	cmp	r2, r3
 8001956:	d121      	bne.n	800199c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001962:	429a      	cmp	r2, r3
 8001964:	d11a      	bne.n	800199c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800196c:	4013      	ands	r3, r2
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001972:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001974:	4293      	cmp	r3, r2
 8001976:	d111      	bne.n	800199c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001982:	085b      	lsrs	r3, r3, #1
 8001984:	3b01      	subs	r3, #1
 8001986:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001988:	429a      	cmp	r2, r3
 800198a:	d107      	bne.n	800199c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001996:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001998:	429a      	cmp	r2, r3
 800199a:	d001      	beq.n	80019a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e000      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800

080019b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0cc      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019c4:	4b68      	ldr	r3, [pc, #416]	@ (8001b68 <HAL_RCC_ClockConfig+0x1b8>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d90c      	bls.n	80019ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d2:	4b65      	ldr	r3, [pc, #404]	@ (8001b68 <HAL_RCC_ClockConfig+0x1b8>)
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019da:	4b63      	ldr	r3, [pc, #396]	@ (8001b68 <HAL_RCC_ClockConfig+0x1b8>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0b8      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d020      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d005      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a04:	4b59      	ldr	r3, [pc, #356]	@ (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	4a58      	ldr	r2, [pc, #352]	@ (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a1c:	4b53      	ldr	r3, [pc, #332]	@ (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	4a52      	ldr	r2, [pc, #328]	@ (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a28:	4b50      	ldr	r3, [pc, #320]	@ (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	494d      	ldr	r1, [pc, #308]	@ (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d044      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d107      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4e:	4b47      	ldr	r3, [pc, #284]	@ (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d119      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e07f      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d003      	beq.n	8001a6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d107      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d109      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e06f      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e067      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a8e:	4b37      	ldr	r3, [pc, #220]	@ (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f023 0203 	bic.w	r2, r3, #3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	4934      	ldr	r1, [pc, #208]	@ (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aa0:	f7ff fa6c 	bl	8000f7c <HAL_GetTick>
 8001aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa6:	e00a      	b.n	8001abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa8:	f7ff fa68 	bl	8000f7c <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e04f      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001abe:	4b2b      	ldr	r3, [pc, #172]	@ (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 020c 	and.w	r2, r3, #12
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d1eb      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad0:	4b25      	ldr	r3, [pc, #148]	@ (8001b68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d20c      	bcs.n	8001af8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ade:	4b22      	ldr	r3, [pc, #136]	@ (8001b68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae6:	4b20      	ldr	r3, [pc, #128]	@ (8001b68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d001      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e032      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d008      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b04:	4b19      	ldr	r3, [pc, #100]	@ (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	4916      	ldr	r1, [pc, #88]	@ (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d009      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b22:	4b12      	ldr	r3, [pc, #72]	@ (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	490e      	ldr	r1, [pc, #56]	@ (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b36:	f000 f821 	bl	8001b7c <HAL_RCC_GetSysClockFreq>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	490a      	ldr	r1, [pc, #40]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 8001b48:	5ccb      	ldrb	r3, [r1, r3]
 8001b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b4e:	4a09      	ldr	r2, [pc, #36]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b52:	4b09      	ldr	r3, [pc, #36]	@ (8001b78 <HAL_RCC_ClockConfig+0x1c8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff f9cc 	bl	8000ef4 <HAL_InitTick>

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40023c00 	.word	0x40023c00
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	08003e60 	.word	0x08003e60
 8001b74:	20000000 	.word	0x20000000
 8001b78:	20000004 	.word	0x20000004

08001b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b80:	b090      	sub	sp, #64	@ 0x40
 8001b82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b88:	2300      	movs	r3, #0
 8001b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b94:	4b59      	ldr	r3, [pc, #356]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 030c 	and.w	r3, r3, #12
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	d00d      	beq.n	8001bbc <HAL_RCC_GetSysClockFreq+0x40>
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	f200 80a1 	bhi.w	8001ce8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d002      	beq.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x34>
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d003      	beq.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bae:	e09b      	b.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bb0:	4b53      	ldr	r3, [pc, #332]	@ (8001d00 <HAL_RCC_GetSysClockFreq+0x184>)
 8001bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8001bb4:	e09b      	b.n	8001cee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bb6:	4b53      	ldr	r3, [pc, #332]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001bba:	e098      	b.n	8001cee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bbc:	4b4f      	ldr	r3, [pc, #316]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bc4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bc6:	4b4d      	ldr	r3, [pc, #308]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d028      	beq.n	8001c24 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bd2:	4b4a      	ldr	r3, [pc, #296]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	099b      	lsrs	r3, r3, #6
 8001bd8:	2200      	movs	r2, #0
 8001bda:	623b      	str	r3, [r7, #32]
 8001bdc:	627a      	str	r2, [r7, #36]	@ 0x24
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001be4:	2100      	movs	r1, #0
 8001be6:	4b47      	ldr	r3, [pc, #284]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x188>)
 8001be8:	fb03 f201 	mul.w	r2, r3, r1
 8001bec:	2300      	movs	r3, #0
 8001bee:	fb00 f303 	mul.w	r3, r0, r3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	4a43      	ldr	r2, [pc, #268]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bf6:	fba0 1202 	umull	r1, r2, r0, r2
 8001bfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bfc:	460a      	mov	r2, r1
 8001bfe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001c00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c02:	4413      	add	r3, r2
 8001c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c08:	2200      	movs	r2, #0
 8001c0a:	61bb      	str	r3, [r7, #24]
 8001c0c:	61fa      	str	r2, [r7, #28]
 8001c0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001c16:	f7fe fb33 	bl	8000280 <__aeabi_uldivmod>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4613      	mov	r3, r2
 8001c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c22:	e053      	b.n	8001ccc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c24:	4b35      	ldr	r3, [pc, #212]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	099b      	lsrs	r3, r3, #6
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	617a      	str	r2, [r7, #20]
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c36:	f04f 0b00 	mov.w	fp, #0
 8001c3a:	4652      	mov	r2, sl
 8001c3c:	465b      	mov	r3, fp
 8001c3e:	f04f 0000 	mov.w	r0, #0
 8001c42:	f04f 0100 	mov.w	r1, #0
 8001c46:	0159      	lsls	r1, r3, #5
 8001c48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c4c:	0150      	lsls	r0, r2, #5
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	ebb2 080a 	subs.w	r8, r2, sl
 8001c56:	eb63 090b 	sbc.w	r9, r3, fp
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	f04f 0300 	mov.w	r3, #0
 8001c62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c6e:	ebb2 0408 	subs.w	r4, r2, r8
 8001c72:	eb63 0509 	sbc.w	r5, r3, r9
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	f04f 0300 	mov.w	r3, #0
 8001c7e:	00eb      	lsls	r3, r5, #3
 8001c80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c84:	00e2      	lsls	r2, r4, #3
 8001c86:	4614      	mov	r4, r2
 8001c88:	461d      	mov	r5, r3
 8001c8a:	eb14 030a 	adds.w	r3, r4, sl
 8001c8e:	603b      	str	r3, [r7, #0]
 8001c90:	eb45 030b 	adc.w	r3, r5, fp
 8001c94:	607b      	str	r3, [r7, #4]
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ca2:	4629      	mov	r1, r5
 8001ca4:	028b      	lsls	r3, r1, #10
 8001ca6:	4621      	mov	r1, r4
 8001ca8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cac:	4621      	mov	r1, r4
 8001cae:	028a      	lsls	r2, r1, #10
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	60fa      	str	r2, [r7, #12]
 8001cbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cc0:	f7fe fade 	bl	8000280 <__aeabi_uldivmod>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4613      	mov	r3, r2
 8001cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	0c1b      	lsrs	r3, r3, #16
 8001cd2:	f003 0303 	and.w	r3, r3, #3
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8001cdc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ce6:	e002      	b.n	8001cee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ce8:	4b05      	ldr	r3, [pc, #20]	@ (8001d00 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001cec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3740      	adds	r7, #64	@ 0x40
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	00f42400 	.word	0x00f42400
 8001d04:	017d7840 	.word	0x017d7840

08001d08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e041      	b.n	8001d9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d106      	bne.n	8001d34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7fe fefa 	bl	8000b28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2202      	movs	r2, #2
 8001d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3304      	adds	r3, #4
 8001d44:	4619      	mov	r1, r3
 8001d46:	4610      	mov	r0, r2
 8001d48:	f000 fd02 	bl	8002750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d109      	bne.n	8001dcc <HAL_TIM_PWM_Start+0x24>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	bf14      	ite	ne
 8001dc4:	2301      	movne	r3, #1
 8001dc6:	2300      	moveq	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	e022      	b.n	8001e12 <HAL_TIM_PWM_Start+0x6a>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d109      	bne.n	8001de6 <HAL_TIM_PWM_Start+0x3e>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	bf14      	ite	ne
 8001dde:	2301      	movne	r3, #1
 8001de0:	2300      	moveq	r3, #0
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	e015      	b.n	8001e12 <HAL_TIM_PWM_Start+0x6a>
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d109      	bne.n	8001e00 <HAL_TIM_PWM_Start+0x58>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	bf14      	ite	ne
 8001df8:	2301      	movne	r3, #1
 8001dfa:	2300      	moveq	r3, #0
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	e008      	b.n	8001e12 <HAL_TIM_PWM_Start+0x6a>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	bf14      	ite	ne
 8001e0c:	2301      	movne	r3, #1
 8001e0e:	2300      	moveq	r3, #0
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e068      	b.n	8001eec <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d104      	bne.n	8001e2a <HAL_TIM_PWM_Start+0x82>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2202      	movs	r2, #2
 8001e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e28:	e013      	b.n	8001e52 <HAL_TIM_PWM_Start+0xaa>
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d104      	bne.n	8001e3a <HAL_TIM_PWM_Start+0x92>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2202      	movs	r2, #2
 8001e34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e38:	e00b      	b.n	8001e52 <HAL_TIM_PWM_Start+0xaa>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d104      	bne.n	8001e4a <HAL_TIM_PWM_Start+0xa2>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2202      	movs	r2, #2
 8001e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e48:	e003      	b.n	8001e52 <HAL_TIM_PWM_Start+0xaa>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2201      	movs	r2, #1
 8001e58:	6839      	ldr	r1, [r7, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 ffae 	bl	8002dbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a23      	ldr	r2, [pc, #140]	@ (8001ef4 <HAL_TIM_PWM_Start+0x14c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d107      	bne.n	8001e7a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e78:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ef4 <HAL_TIM_PWM_Start+0x14c>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d018      	beq.n	8001eb6 <HAL_TIM_PWM_Start+0x10e>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e8c:	d013      	beq.n	8001eb6 <HAL_TIM_PWM_Start+0x10e>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a19      	ldr	r2, [pc, #100]	@ (8001ef8 <HAL_TIM_PWM_Start+0x150>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d00e      	beq.n	8001eb6 <HAL_TIM_PWM_Start+0x10e>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a17      	ldr	r2, [pc, #92]	@ (8001efc <HAL_TIM_PWM_Start+0x154>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d009      	beq.n	8001eb6 <HAL_TIM_PWM_Start+0x10e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a16      	ldr	r2, [pc, #88]	@ (8001f00 <HAL_TIM_PWM_Start+0x158>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d004      	beq.n	8001eb6 <HAL_TIM_PWM_Start+0x10e>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a14      	ldr	r2, [pc, #80]	@ (8001f04 <HAL_TIM_PWM_Start+0x15c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d111      	bne.n	8001eda <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2b06      	cmp	r3, #6
 8001ec6:	d010      	beq.n	8001eea <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0201 	orr.w	r2, r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ed8:	e007      	b.n	8001eea <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f042 0201 	orr.w	r2, r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40010000 	.word	0x40010000
 8001ef8:	40000400 	.word	0x40000400
 8001efc:	40000800 	.word	0x40000800
 8001f00:	40000c00 	.word	0x40000c00
 8001f04:	40014000 	.word	0x40014000

08001f08 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e041      	b.n	8001f9e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d106      	bne.n	8001f34 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7fe fe1c 	bl	8000b6c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2202      	movs	r2, #2
 8001f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3304      	adds	r3, #4
 8001f44:	4619      	mov	r1, r3
 8001f46:	4610      	mov	r0, r2
 8001f48:	f000 fc02 	bl	8002750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d104      	bne.n	8001fc6 <HAL_TIM_IC_Start_IT+0x1e>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	e013      	b.n	8001fee <HAL_TIM_IC_Start_IT+0x46>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	d104      	bne.n	8001fd6 <HAL_TIM_IC_Start_IT+0x2e>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	e00b      	b.n	8001fee <HAL_TIM_IC_Start_IT+0x46>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d104      	bne.n	8001fe6 <HAL_TIM_IC_Start_IT+0x3e>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	e003      	b.n	8001fee <HAL_TIM_IC_Start_IT+0x46>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d104      	bne.n	8002000 <HAL_TIM_IC_Start_IT+0x58>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	e013      	b.n	8002028 <HAL_TIM_IC_Start_IT+0x80>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	2b04      	cmp	r3, #4
 8002004:	d104      	bne.n	8002010 <HAL_TIM_IC_Start_IT+0x68>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800200c:	b2db      	uxtb	r3, r3
 800200e:	e00b      	b.n	8002028 <HAL_TIM_IC_Start_IT+0x80>
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	2b08      	cmp	r3, #8
 8002014:	d104      	bne.n	8002020 <HAL_TIM_IC_Start_IT+0x78>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800201c:	b2db      	uxtb	r3, r3
 800201e:	e003      	b.n	8002028 <HAL_TIM_IC_Start_IT+0x80>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002026:	b2db      	uxtb	r3, r3
 8002028:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800202a:	7bbb      	ldrb	r3, [r7, #14]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d102      	bne.n	8002036 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002030:	7b7b      	ldrb	r3, [r7, #13]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d001      	beq.n	800203a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e0c2      	b.n	80021c0 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d104      	bne.n	800204a <HAL_TIM_IC_Start_IT+0xa2>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2202      	movs	r2, #2
 8002044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002048:	e013      	b.n	8002072 <HAL_TIM_IC_Start_IT+0xca>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	2b04      	cmp	r3, #4
 800204e:	d104      	bne.n	800205a <HAL_TIM_IC_Start_IT+0xb2>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2202      	movs	r2, #2
 8002054:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002058:	e00b      	b.n	8002072 <HAL_TIM_IC_Start_IT+0xca>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	2b08      	cmp	r3, #8
 800205e:	d104      	bne.n	800206a <HAL_TIM_IC_Start_IT+0xc2>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2202      	movs	r2, #2
 8002064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002068:	e003      	b.n	8002072 <HAL_TIM_IC_Start_IT+0xca>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2202      	movs	r2, #2
 800206e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d104      	bne.n	8002082 <HAL_TIM_IC_Start_IT+0xda>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2202      	movs	r2, #2
 800207c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002080:	e013      	b.n	80020aa <HAL_TIM_IC_Start_IT+0x102>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	2b04      	cmp	r3, #4
 8002086:	d104      	bne.n	8002092 <HAL_TIM_IC_Start_IT+0xea>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2202      	movs	r2, #2
 800208c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002090:	e00b      	b.n	80020aa <HAL_TIM_IC_Start_IT+0x102>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	2b08      	cmp	r3, #8
 8002096:	d104      	bne.n	80020a2 <HAL_TIM_IC_Start_IT+0xfa>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2202      	movs	r2, #2
 800209c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020a0:	e003      	b.n	80020aa <HAL_TIM_IC_Start_IT+0x102>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2202      	movs	r2, #2
 80020a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	2b0c      	cmp	r3, #12
 80020ae:	d841      	bhi.n	8002134 <HAL_TIM_IC_Start_IT+0x18c>
 80020b0:	a201      	add	r2, pc, #4	@ (adr r2, 80020b8 <HAL_TIM_IC_Start_IT+0x110>)
 80020b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b6:	bf00      	nop
 80020b8:	080020ed 	.word	0x080020ed
 80020bc:	08002135 	.word	0x08002135
 80020c0:	08002135 	.word	0x08002135
 80020c4:	08002135 	.word	0x08002135
 80020c8:	080020ff 	.word	0x080020ff
 80020cc:	08002135 	.word	0x08002135
 80020d0:	08002135 	.word	0x08002135
 80020d4:	08002135 	.word	0x08002135
 80020d8:	08002111 	.word	0x08002111
 80020dc:	08002135 	.word	0x08002135
 80020e0:	08002135 	.word	0x08002135
 80020e4:	08002135 	.word	0x08002135
 80020e8:	08002123 	.word	0x08002123
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f042 0202 	orr.w	r2, r2, #2
 80020fa:	60da      	str	r2, [r3, #12]
      break;
 80020fc:	e01d      	b.n	800213a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f042 0204 	orr.w	r2, r2, #4
 800210c:	60da      	str	r2, [r3, #12]
      break;
 800210e:	e014      	b.n	800213a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0208 	orr.w	r2, r2, #8
 800211e:	60da      	str	r2, [r3, #12]
      break;
 8002120:	e00b      	b.n	800213a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f042 0210 	orr.w	r2, r2, #16
 8002130:	60da      	str	r2, [r3, #12]
      break;
 8002132:	e002      	b.n	800213a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	73fb      	strb	r3, [r7, #15]
      break;
 8002138:	bf00      	nop
  }

  if (status == HAL_OK)
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d13e      	bne.n	80021be <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2201      	movs	r2, #1
 8002146:	6839      	ldr	r1, [r7, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f000 fe37 	bl	8002dbc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a1d      	ldr	r2, [pc, #116]	@ (80021c8 <HAL_TIM_IC_Start_IT+0x220>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d018      	beq.n	800218a <HAL_TIM_IC_Start_IT+0x1e2>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002160:	d013      	beq.n	800218a <HAL_TIM_IC_Start_IT+0x1e2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a19      	ldr	r2, [pc, #100]	@ (80021cc <HAL_TIM_IC_Start_IT+0x224>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d00e      	beq.n	800218a <HAL_TIM_IC_Start_IT+0x1e2>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a17      	ldr	r2, [pc, #92]	@ (80021d0 <HAL_TIM_IC_Start_IT+0x228>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d009      	beq.n	800218a <HAL_TIM_IC_Start_IT+0x1e2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a16      	ldr	r2, [pc, #88]	@ (80021d4 <HAL_TIM_IC_Start_IT+0x22c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d004      	beq.n	800218a <HAL_TIM_IC_Start_IT+0x1e2>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a14      	ldr	r2, [pc, #80]	@ (80021d8 <HAL_TIM_IC_Start_IT+0x230>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d111      	bne.n	80021ae <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	2b06      	cmp	r3, #6
 800219a:	d010      	beq.n	80021be <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 0201 	orr.w	r2, r2, #1
 80021aa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ac:	e007      	b.n	80021be <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f042 0201 	orr.w	r2, r2, #1
 80021bc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80021be:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40010000 	.word	0x40010000
 80021cc:	40000400 	.word	0x40000400
 80021d0:	40000800 	.word	0x40000800
 80021d4:	40000c00 	.word	0x40000c00
 80021d8:	40014000 	.word	0x40014000

080021dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d020      	beq.n	8002240 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d01b      	beq.n	8002240 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f06f 0202 	mvn.w	r2, #2
 8002210:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7fe fb9c 	bl	8000964 <HAL_TIM_IC_CaptureCallback>
 800222c:	e005      	b.n	800223a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 fa70 	bl	8002714 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 fa77 	bl	8002728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	2b00      	cmp	r3, #0
 8002248:	d020      	beq.n	800228c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	d01b      	beq.n	800228c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f06f 0204 	mvn.w	r2, #4
 800225c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2202      	movs	r2, #2
 8002262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7fe fb76 	bl	8000964 <HAL_TIM_IC_CaptureCallback>
 8002278:	e005      	b.n	8002286 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 fa4a 	bl	8002714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 fa51 	bl	8002728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f003 0308 	and.w	r3, r3, #8
 8002292:	2b00      	cmp	r3, #0
 8002294:	d020      	beq.n	80022d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f003 0308 	and.w	r3, r3, #8
 800229c:	2b00      	cmp	r3, #0
 800229e:	d01b      	beq.n	80022d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f06f 0208 	mvn.w	r2, #8
 80022a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2204      	movs	r2, #4
 80022ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7fe fb50 	bl	8000964 <HAL_TIM_IC_CaptureCallback>
 80022c4:	e005      	b.n	80022d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 fa24 	bl	8002714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 fa2b 	bl	8002728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	f003 0310 	and.w	r3, r3, #16
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d020      	beq.n	8002324 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f003 0310 	and.w	r3, r3, #16
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d01b      	beq.n	8002324 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f06f 0210 	mvn.w	r2, #16
 80022f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2208      	movs	r2, #8
 80022fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7fe fb2a 	bl	8000964 <HAL_TIM_IC_CaptureCallback>
 8002310:	e005      	b.n	800231e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f9fe 	bl	8002714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 fa05 	bl	8002728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00c      	beq.n	8002348 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b00      	cmp	r3, #0
 8002336:	d007      	beq.n	8002348 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f06f 0201 	mvn.w	r2, #1
 8002340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f9dc 	bl	8002700 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00c      	beq.n	800236c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002358:	2b00      	cmp	r3, #0
 800235a:	d007      	beq.n	800236c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 fe18 	bl	8002f9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00c      	beq.n	8002390 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800237c:	2b00      	cmp	r3, #0
 800237e:	d007      	beq.n	8002390 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f9d6 	bl	800273c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	f003 0320 	and.w	r3, r3, #32
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00c      	beq.n	80023b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f003 0320 	and.w	r3, r3, #32
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d007      	beq.n	80023b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f06f 0220 	mvn.w	r2, #32
 80023ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 fdea 	bl	8002f88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023b4:	bf00      	nop
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023c8:	2300      	movs	r3, #0
 80023ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d101      	bne.n	80023da <HAL_TIM_IC_ConfigChannel+0x1e>
 80023d6:	2302      	movs	r3, #2
 80023d8:	e088      	b.n	80024ec <HAL_TIM_IC_ConfigChannel+0x130>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d11b      	bne.n	8002420 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80023f8:	f000 fbc2 	bl	8002b80 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	699a      	ldr	r2, [r3, #24]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 020c 	bic.w	r2, r2, #12
 800240a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6999      	ldr	r1, [r3, #24]
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	619a      	str	r2, [r3, #24]
 800241e:	e060      	b.n	80024e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b04      	cmp	r3, #4
 8002424:	d11c      	bne.n	8002460 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002436:	f000 fc0b 	bl	8002c50 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	699a      	ldr	r2, [r3, #24]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002448:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6999      	ldr	r1, [r3, #24]
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	021a      	lsls	r2, r3, #8
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	619a      	str	r2, [r3, #24]
 800245e:	e040      	b.n	80024e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b08      	cmp	r3, #8
 8002464:	d11b      	bne.n	800249e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002476:	f000 fc28 	bl	8002cca <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	69da      	ldr	r2, [r3, #28]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 020c 	bic.w	r2, r2, #12
 8002488:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	69d9      	ldr	r1, [r3, #28]
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	61da      	str	r2, [r3, #28]
 800249c:	e021      	b.n	80024e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b0c      	cmp	r3, #12
 80024a2:	d11c      	bne.n	80024de <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80024b4:	f000 fc45 	bl	8002d42 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	69da      	ldr	r2, [r3, #28]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80024c6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	69d9      	ldr	r1, [r3, #28]
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	021a      	lsls	r2, r3, #8
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	61da      	str	r2, [r3, #28]
 80024dc:	e001      	b.n	80024e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80024ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002500:	2300      	movs	r3, #0
 8002502:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800250a:	2b01      	cmp	r3, #1
 800250c:	d101      	bne.n	8002512 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800250e:	2302      	movs	r3, #2
 8002510:	e0ae      	b.n	8002670 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b0c      	cmp	r3, #12
 800251e:	f200 809f 	bhi.w	8002660 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002522:	a201      	add	r2, pc, #4	@ (adr r2, 8002528 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002528:	0800255d 	.word	0x0800255d
 800252c:	08002661 	.word	0x08002661
 8002530:	08002661 	.word	0x08002661
 8002534:	08002661 	.word	0x08002661
 8002538:	0800259d 	.word	0x0800259d
 800253c:	08002661 	.word	0x08002661
 8002540:	08002661 	.word	0x08002661
 8002544:	08002661 	.word	0x08002661
 8002548:	080025df 	.word	0x080025df
 800254c:	08002661 	.word	0x08002661
 8002550:	08002661 	.word	0x08002661
 8002554:	08002661 	.word	0x08002661
 8002558:	0800261f 	.word	0x0800261f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68b9      	ldr	r1, [r7, #8]
 8002562:	4618      	mov	r0, r3
 8002564:	f000 f980 	bl	8002868 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	699a      	ldr	r2, [r3, #24]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0208 	orr.w	r2, r2, #8
 8002576:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	699a      	ldr	r2, [r3, #24]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0204 	bic.w	r2, r2, #4
 8002586:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6999      	ldr	r1, [r3, #24]
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	691a      	ldr	r2, [r3, #16]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	430a      	orrs	r2, r1
 8002598:	619a      	str	r2, [r3, #24]
      break;
 800259a:	e064      	b.n	8002666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68b9      	ldr	r1, [r7, #8]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 f9c6 	bl	8002934 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	699a      	ldr	r2, [r3, #24]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	699a      	ldr	r2, [r3, #24]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6999      	ldr	r1, [r3, #24]
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	021a      	lsls	r2, r3, #8
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	619a      	str	r2, [r3, #24]
      break;
 80025dc:	e043      	b.n	8002666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68b9      	ldr	r1, [r7, #8]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f000 fa11 	bl	8002a0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	69da      	ldr	r2, [r3, #28]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f042 0208 	orr.w	r2, r2, #8
 80025f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	69da      	ldr	r2, [r3, #28]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0204 	bic.w	r2, r2, #4
 8002608:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	69d9      	ldr	r1, [r3, #28]
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	61da      	str	r2, [r3, #28]
      break;
 800261c:	e023      	b.n	8002666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68b9      	ldr	r1, [r7, #8]
 8002624:	4618      	mov	r0, r3
 8002626:	f000 fa5b 	bl	8002ae0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	69da      	ldr	r2, [r3, #28]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002638:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	69da      	ldr	r2, [r3, #28]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002648:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	69d9      	ldr	r1, [r3, #28]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	021a      	lsls	r2, r3, #8
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	430a      	orrs	r2, r1
 800265c:	61da      	str	r2, [r3, #28]
      break;
 800265e:	e002      	b.n	8002666 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	75fb      	strb	r3, [r7, #23]
      break;
 8002664:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800266e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2b0c      	cmp	r3, #12
 800268a:	d831      	bhi.n	80026f0 <HAL_TIM_ReadCapturedValue+0x78>
 800268c:	a201      	add	r2, pc, #4	@ (adr r2, 8002694 <HAL_TIM_ReadCapturedValue+0x1c>)
 800268e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002692:	bf00      	nop
 8002694:	080026c9 	.word	0x080026c9
 8002698:	080026f1 	.word	0x080026f1
 800269c:	080026f1 	.word	0x080026f1
 80026a0:	080026f1 	.word	0x080026f1
 80026a4:	080026d3 	.word	0x080026d3
 80026a8:	080026f1 	.word	0x080026f1
 80026ac:	080026f1 	.word	0x080026f1
 80026b0:	080026f1 	.word	0x080026f1
 80026b4:	080026dd 	.word	0x080026dd
 80026b8:	080026f1 	.word	0x080026f1
 80026bc:	080026f1 	.word	0x080026f1
 80026c0:	080026f1 	.word	0x080026f1
 80026c4:	080026e7 	.word	0x080026e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026ce:	60fb      	str	r3, [r7, #12]

      break;
 80026d0:	e00f      	b.n	80026f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d8:	60fb      	str	r3, [r7, #12]

      break;
 80026da:	e00a      	b.n	80026f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e2:	60fb      	str	r3, [r7, #12]

      break;
 80026e4:	e005      	b.n	80026f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ec:	60fb      	str	r3, [r7, #12]

      break;
 80026ee:	e000      	b.n	80026f2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80026f0:	bf00      	nop
  }

  return tmpreg;
 80026f2:	68fb      	ldr	r3, [r7, #12]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a3a      	ldr	r2, [pc, #232]	@ (800284c <TIM_Base_SetConfig+0xfc>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d00f      	beq.n	8002788 <TIM_Base_SetConfig+0x38>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800276e:	d00b      	beq.n	8002788 <TIM_Base_SetConfig+0x38>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a37      	ldr	r2, [pc, #220]	@ (8002850 <TIM_Base_SetConfig+0x100>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d007      	beq.n	8002788 <TIM_Base_SetConfig+0x38>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a36      	ldr	r2, [pc, #216]	@ (8002854 <TIM_Base_SetConfig+0x104>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d003      	beq.n	8002788 <TIM_Base_SetConfig+0x38>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a35      	ldr	r2, [pc, #212]	@ (8002858 <TIM_Base_SetConfig+0x108>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d108      	bne.n	800279a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800278e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	4313      	orrs	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a2b      	ldr	r2, [pc, #172]	@ (800284c <TIM_Base_SetConfig+0xfc>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d01b      	beq.n	80027da <TIM_Base_SetConfig+0x8a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027a8:	d017      	beq.n	80027da <TIM_Base_SetConfig+0x8a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a28      	ldr	r2, [pc, #160]	@ (8002850 <TIM_Base_SetConfig+0x100>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d013      	beq.n	80027da <TIM_Base_SetConfig+0x8a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a27      	ldr	r2, [pc, #156]	@ (8002854 <TIM_Base_SetConfig+0x104>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d00f      	beq.n	80027da <TIM_Base_SetConfig+0x8a>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a26      	ldr	r2, [pc, #152]	@ (8002858 <TIM_Base_SetConfig+0x108>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d00b      	beq.n	80027da <TIM_Base_SetConfig+0x8a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a25      	ldr	r2, [pc, #148]	@ (800285c <TIM_Base_SetConfig+0x10c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d007      	beq.n	80027da <TIM_Base_SetConfig+0x8a>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a24      	ldr	r2, [pc, #144]	@ (8002860 <TIM_Base_SetConfig+0x110>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d003      	beq.n	80027da <TIM_Base_SetConfig+0x8a>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a23      	ldr	r2, [pc, #140]	@ (8002864 <TIM_Base_SetConfig+0x114>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d108      	bne.n	80027ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a0e      	ldr	r2, [pc, #56]	@ (800284c <TIM_Base_SetConfig+0xfc>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d103      	bne.n	8002820 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b01      	cmp	r3, #1
 8002830:	d105      	bne.n	800283e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f023 0201 	bic.w	r2, r3, #1
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	611a      	str	r2, [r3, #16]
  }
}
 800283e:	bf00      	nop
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40010000 	.word	0x40010000
 8002850:	40000400 	.word	0x40000400
 8002854:	40000800 	.word	0x40000800
 8002858:	40000c00 	.word	0x40000c00
 800285c:	40014000 	.word	0x40014000
 8002860:	40014400 	.word	0x40014400
 8002864:	40014800 	.word	0x40014800

08002868 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002868:	b480      	push	{r7}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	f023 0201 	bic.w	r2, r3, #1
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f023 0303 	bic.w	r3, r3, #3
 800289e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f023 0302 	bic.w	r3, r3, #2
 80028b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a1c      	ldr	r2, [pc, #112]	@ (8002930 <TIM_OC1_SetConfig+0xc8>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d10c      	bne.n	80028de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	f023 0308 	bic.w	r3, r3, #8
 80028ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f023 0304 	bic.w	r3, r3, #4
 80028dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a13      	ldr	r2, [pc, #76]	@ (8002930 <TIM_OC1_SetConfig+0xc8>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d111      	bne.n	800290a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80028f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	4313      	orrs	r3, r2
 8002908:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	621a      	str	r2, [r3, #32]
}
 8002924:	bf00      	nop
 8002926:	371c      	adds	r7, #28
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	40010000 	.word	0x40010000

08002934 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	f023 0210 	bic.w	r2, r3, #16
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800296a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	021b      	lsls	r3, r3, #8
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	4313      	orrs	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	f023 0320 	bic.w	r3, r3, #32
 800297e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	4313      	orrs	r3, r2
 800298a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a1e      	ldr	r2, [pc, #120]	@ (8002a08 <TIM_OC2_SetConfig+0xd4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d10d      	bne.n	80029b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800299a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	011b      	lsls	r3, r3, #4
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a15      	ldr	r2, [pc, #84]	@ (8002a08 <TIM_OC2_SetConfig+0xd4>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d113      	bne.n	80029e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80029be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80029c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	621a      	str	r2, [r3, #32]
}
 80029fa:	bf00      	nop
 80029fc:	371c      	adds	r7, #28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	40010000 	.word	0x40010000

08002a0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b087      	sub	sp, #28
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f023 0303 	bic.w	r3, r3, #3
 8002a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	021b      	lsls	r3, r3, #8
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a1d      	ldr	r2, [pc, #116]	@ (8002adc <TIM_OC3_SetConfig+0xd0>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d10d      	bne.n	8002a86 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002a70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	021b      	lsls	r3, r3, #8
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002a84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a14      	ldr	r2, [pc, #80]	@ (8002adc <TIM_OC3_SetConfig+0xd0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d113      	bne.n	8002ab6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	621a      	str	r2, [r3, #32]
}
 8002ad0:	bf00      	nop
 8002ad2:	371c      	adds	r7, #28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	40010000 	.word	0x40010000

08002ae0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b087      	sub	sp, #28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	021b      	lsls	r3, r3, #8
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002b2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	031b      	lsls	r3, r3, #12
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a10      	ldr	r2, [pc, #64]	@ (8002b7c <TIM_OC4_SetConfig+0x9c>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d109      	bne.n	8002b54 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	019b      	lsls	r3, r3, #6
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	621a      	str	r2, [r3, #32]
}
 8002b6e:	bf00      	nop
 8002b70:	371c      	adds	r7, #28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40010000 	.word	0x40010000

08002b80 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
 8002b8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	f023 0201 	bic.w	r2, r3, #1
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4a24      	ldr	r2, [pc, #144]	@ (8002c3c <TIM_TI1_SetConfig+0xbc>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d013      	beq.n	8002bd6 <TIM_TI1_SetConfig+0x56>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bb4:	d00f      	beq.n	8002bd6 <TIM_TI1_SetConfig+0x56>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4a21      	ldr	r2, [pc, #132]	@ (8002c40 <TIM_TI1_SetConfig+0xc0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00b      	beq.n	8002bd6 <TIM_TI1_SetConfig+0x56>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	4a20      	ldr	r2, [pc, #128]	@ (8002c44 <TIM_TI1_SetConfig+0xc4>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d007      	beq.n	8002bd6 <TIM_TI1_SetConfig+0x56>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4a1f      	ldr	r2, [pc, #124]	@ (8002c48 <TIM_TI1_SetConfig+0xc8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d003      	beq.n	8002bd6 <TIM_TI1_SetConfig+0x56>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	4a1e      	ldr	r2, [pc, #120]	@ (8002c4c <TIM_TI1_SetConfig+0xcc>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d101      	bne.n	8002bda <TIM_TI1_SetConfig+0x5a>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <TIM_TI1_SetConfig+0x5c>
 8002bda:	2300      	movs	r3, #0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d008      	beq.n	8002bf2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f023 0303 	bic.w	r3, r3, #3
 8002be6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]
 8002bf0:	e003      	b.n	8002bfa <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	f023 030a 	bic.w	r3, r3, #10
 8002c14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	f003 030a 	and.w	r3, r3, #10
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	621a      	str	r2, [r3, #32]
}
 8002c2e:	bf00      	nop
 8002c30:	371c      	adds	r7, #28
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	40010000 	.word	0x40010000
 8002c40:	40000400 	.word	0x40000400
 8002c44:	40000800 	.word	0x40000800
 8002c48:	40000c00 	.word	0x40000c00
 8002c4c:	40014000 	.word	0x40014000

08002c50 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b087      	sub	sp, #28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
 8002c5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	f023 0210 	bic.w	r2, r3, #16
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	021b      	lsls	r3, r3, #8
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	031b      	lsls	r3, r3, #12
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002ca2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	621a      	str	r2, [r3, #32]
}
 8002cbe:	bf00      	nop
 8002cc0:	371c      	adds	r7, #28
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b087      	sub	sp, #28
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	607a      	str	r2, [r7, #4]
 8002cd6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	f023 0303 	bic.w	r3, r3, #3
 8002cf6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d06:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	011b      	lsls	r3, r3, #4
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8002d1a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	021b      	lsls	r3, r3, #8
 8002d20:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	621a      	str	r2, [r3, #32]
}
 8002d36:	bf00      	nop
 8002d38:	371c      	adds	r7, #28
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b087      	sub	sp, #28
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	60f8      	str	r0, [r7, #12]
 8002d4a:	60b9      	str	r1, [r7, #8]
 8002d4c:	607a      	str	r2, [r7, #4]
 8002d4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d6e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	021b      	lsls	r3, r3, #8
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d80:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	031b      	lsls	r3, r3, #12
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8002d94:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	031b      	lsls	r3, r3, #12
 8002d9a:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	621a      	str	r2, [r3, #32]
}
 8002db0:	bf00      	nop
 8002db2:	371c      	adds	r7, #28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f003 031f 	and.w	r3, r3, #31
 8002dce:	2201      	movs	r2, #1
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6a1a      	ldr	r2, [r3, #32]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	401a      	ands	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a1a      	ldr	r2, [r3, #32]
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f003 031f 	and.w	r3, r3, #31
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	fa01 f303 	lsl.w	r3, r1, r3
 8002df4:	431a      	orrs	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	621a      	str	r2, [r3, #32]
}
 8002dfa:	bf00      	nop
 8002dfc:	371c      	adds	r7, #28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
	...

08002e08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d101      	bne.n	8002e20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	e050      	b.n	8002ec2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d018      	beq.n	8002e96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e6c:	d013      	beq.n	8002e96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a18      	ldr	r2, [pc, #96]	@ (8002ed4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d00e      	beq.n	8002e96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a16      	ldr	r2, [pc, #88]	@ (8002ed8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d009      	beq.n	8002e96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a15      	ldr	r2, [pc, #84]	@ (8002edc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d004      	beq.n	8002e96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a13      	ldr	r2, [pc, #76]	@ (8002ee0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d10c      	bne.n	8002eb0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	40010000 	.word	0x40010000
 8002ed4:	40000400 	.word	0x40000400
 8002ed8:	40000800 	.word	0x40000800
 8002edc:	40000c00 	.word	0x40000c00
 8002ee0:	40014000 	.word	0x40014000

08002ee4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e03d      	b.n	8002f7c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <std>:
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	b510      	push	{r4, lr}
 8002fb4:	4604      	mov	r4, r0
 8002fb6:	e9c0 3300 	strd	r3, r3, [r0]
 8002fba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002fbe:	6083      	str	r3, [r0, #8]
 8002fc0:	8181      	strh	r1, [r0, #12]
 8002fc2:	6643      	str	r3, [r0, #100]	@ 0x64
 8002fc4:	81c2      	strh	r2, [r0, #14]
 8002fc6:	6183      	str	r3, [r0, #24]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	2208      	movs	r2, #8
 8002fcc:	305c      	adds	r0, #92	@ 0x5c
 8002fce:	f000 f906 	bl	80031de <memset>
 8002fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8003008 <std+0x58>)
 8002fd4:	6263      	str	r3, [r4, #36]	@ 0x24
 8002fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800300c <std+0x5c>)
 8002fd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002fda:	4b0d      	ldr	r3, [pc, #52]	@ (8003010 <std+0x60>)
 8002fdc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002fde:	4b0d      	ldr	r3, [pc, #52]	@ (8003014 <std+0x64>)
 8002fe0:	6323      	str	r3, [r4, #48]	@ 0x30
 8002fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8003018 <std+0x68>)
 8002fe4:	6224      	str	r4, [r4, #32]
 8002fe6:	429c      	cmp	r4, r3
 8002fe8:	d006      	beq.n	8002ff8 <std+0x48>
 8002fea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002fee:	4294      	cmp	r4, r2
 8002ff0:	d002      	beq.n	8002ff8 <std+0x48>
 8002ff2:	33d0      	adds	r3, #208	@ 0xd0
 8002ff4:	429c      	cmp	r4, r3
 8002ff6:	d105      	bne.n	8003004 <std+0x54>
 8002ff8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003000:	f000 b966 	b.w	80032d0 <__retarget_lock_init_recursive>
 8003004:	bd10      	pop	{r4, pc}
 8003006:	bf00      	nop
 8003008:	08003159 	.word	0x08003159
 800300c:	0800317b 	.word	0x0800317b
 8003010:	080031b3 	.word	0x080031b3
 8003014:	080031d7 	.word	0x080031d7
 8003018:	20000134 	.word	0x20000134

0800301c <stdio_exit_handler>:
 800301c:	4a02      	ldr	r2, [pc, #8]	@ (8003028 <stdio_exit_handler+0xc>)
 800301e:	4903      	ldr	r1, [pc, #12]	@ (800302c <stdio_exit_handler+0x10>)
 8003020:	4803      	ldr	r0, [pc, #12]	@ (8003030 <stdio_exit_handler+0x14>)
 8003022:	f000 b869 	b.w	80030f8 <_fwalk_sglue>
 8003026:	bf00      	nop
 8003028:	2000000c 	.word	0x2000000c
 800302c:	08003b71 	.word	0x08003b71
 8003030:	2000001c 	.word	0x2000001c

08003034 <cleanup_stdio>:
 8003034:	6841      	ldr	r1, [r0, #4]
 8003036:	4b0c      	ldr	r3, [pc, #48]	@ (8003068 <cleanup_stdio+0x34>)
 8003038:	4299      	cmp	r1, r3
 800303a:	b510      	push	{r4, lr}
 800303c:	4604      	mov	r4, r0
 800303e:	d001      	beq.n	8003044 <cleanup_stdio+0x10>
 8003040:	f000 fd96 	bl	8003b70 <_fflush_r>
 8003044:	68a1      	ldr	r1, [r4, #8]
 8003046:	4b09      	ldr	r3, [pc, #36]	@ (800306c <cleanup_stdio+0x38>)
 8003048:	4299      	cmp	r1, r3
 800304a:	d002      	beq.n	8003052 <cleanup_stdio+0x1e>
 800304c:	4620      	mov	r0, r4
 800304e:	f000 fd8f 	bl	8003b70 <_fflush_r>
 8003052:	68e1      	ldr	r1, [r4, #12]
 8003054:	4b06      	ldr	r3, [pc, #24]	@ (8003070 <cleanup_stdio+0x3c>)
 8003056:	4299      	cmp	r1, r3
 8003058:	d004      	beq.n	8003064 <cleanup_stdio+0x30>
 800305a:	4620      	mov	r0, r4
 800305c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003060:	f000 bd86 	b.w	8003b70 <_fflush_r>
 8003064:	bd10      	pop	{r4, pc}
 8003066:	bf00      	nop
 8003068:	20000134 	.word	0x20000134
 800306c:	2000019c 	.word	0x2000019c
 8003070:	20000204 	.word	0x20000204

08003074 <global_stdio_init.part.0>:
 8003074:	b510      	push	{r4, lr}
 8003076:	4b0b      	ldr	r3, [pc, #44]	@ (80030a4 <global_stdio_init.part.0+0x30>)
 8003078:	4c0b      	ldr	r4, [pc, #44]	@ (80030a8 <global_stdio_init.part.0+0x34>)
 800307a:	4a0c      	ldr	r2, [pc, #48]	@ (80030ac <global_stdio_init.part.0+0x38>)
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	4620      	mov	r0, r4
 8003080:	2200      	movs	r2, #0
 8003082:	2104      	movs	r1, #4
 8003084:	f7ff ff94 	bl	8002fb0 <std>
 8003088:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800308c:	2201      	movs	r2, #1
 800308e:	2109      	movs	r1, #9
 8003090:	f7ff ff8e 	bl	8002fb0 <std>
 8003094:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003098:	2202      	movs	r2, #2
 800309a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800309e:	2112      	movs	r1, #18
 80030a0:	f7ff bf86 	b.w	8002fb0 <std>
 80030a4:	2000026c 	.word	0x2000026c
 80030a8:	20000134 	.word	0x20000134
 80030ac:	0800301d 	.word	0x0800301d

080030b0 <__sfp_lock_acquire>:
 80030b0:	4801      	ldr	r0, [pc, #4]	@ (80030b8 <__sfp_lock_acquire+0x8>)
 80030b2:	f000 b90e 	b.w	80032d2 <__retarget_lock_acquire_recursive>
 80030b6:	bf00      	nop
 80030b8:	20000275 	.word	0x20000275

080030bc <__sfp_lock_release>:
 80030bc:	4801      	ldr	r0, [pc, #4]	@ (80030c4 <__sfp_lock_release+0x8>)
 80030be:	f000 b909 	b.w	80032d4 <__retarget_lock_release_recursive>
 80030c2:	bf00      	nop
 80030c4:	20000275 	.word	0x20000275

080030c8 <__sinit>:
 80030c8:	b510      	push	{r4, lr}
 80030ca:	4604      	mov	r4, r0
 80030cc:	f7ff fff0 	bl	80030b0 <__sfp_lock_acquire>
 80030d0:	6a23      	ldr	r3, [r4, #32]
 80030d2:	b11b      	cbz	r3, 80030dc <__sinit+0x14>
 80030d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030d8:	f7ff bff0 	b.w	80030bc <__sfp_lock_release>
 80030dc:	4b04      	ldr	r3, [pc, #16]	@ (80030f0 <__sinit+0x28>)
 80030de:	6223      	str	r3, [r4, #32]
 80030e0:	4b04      	ldr	r3, [pc, #16]	@ (80030f4 <__sinit+0x2c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1f5      	bne.n	80030d4 <__sinit+0xc>
 80030e8:	f7ff ffc4 	bl	8003074 <global_stdio_init.part.0>
 80030ec:	e7f2      	b.n	80030d4 <__sinit+0xc>
 80030ee:	bf00      	nop
 80030f0:	08003035 	.word	0x08003035
 80030f4:	2000026c 	.word	0x2000026c

080030f8 <_fwalk_sglue>:
 80030f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030fc:	4607      	mov	r7, r0
 80030fe:	4688      	mov	r8, r1
 8003100:	4614      	mov	r4, r2
 8003102:	2600      	movs	r6, #0
 8003104:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003108:	f1b9 0901 	subs.w	r9, r9, #1
 800310c:	d505      	bpl.n	800311a <_fwalk_sglue+0x22>
 800310e:	6824      	ldr	r4, [r4, #0]
 8003110:	2c00      	cmp	r4, #0
 8003112:	d1f7      	bne.n	8003104 <_fwalk_sglue+0xc>
 8003114:	4630      	mov	r0, r6
 8003116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800311a:	89ab      	ldrh	r3, [r5, #12]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d907      	bls.n	8003130 <_fwalk_sglue+0x38>
 8003120:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003124:	3301      	adds	r3, #1
 8003126:	d003      	beq.n	8003130 <_fwalk_sglue+0x38>
 8003128:	4629      	mov	r1, r5
 800312a:	4638      	mov	r0, r7
 800312c:	47c0      	blx	r8
 800312e:	4306      	orrs	r6, r0
 8003130:	3568      	adds	r5, #104	@ 0x68
 8003132:	e7e9      	b.n	8003108 <_fwalk_sglue+0x10>

08003134 <iprintf>:
 8003134:	b40f      	push	{r0, r1, r2, r3}
 8003136:	b507      	push	{r0, r1, r2, lr}
 8003138:	4906      	ldr	r1, [pc, #24]	@ (8003154 <iprintf+0x20>)
 800313a:	ab04      	add	r3, sp, #16
 800313c:	6808      	ldr	r0, [r1, #0]
 800313e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003142:	6881      	ldr	r1, [r0, #8]
 8003144:	9301      	str	r3, [sp, #4]
 8003146:	f000 f9e9 	bl	800351c <_vfiprintf_r>
 800314a:	b003      	add	sp, #12
 800314c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003150:	b004      	add	sp, #16
 8003152:	4770      	bx	lr
 8003154:	20000018 	.word	0x20000018

08003158 <__sread>:
 8003158:	b510      	push	{r4, lr}
 800315a:	460c      	mov	r4, r1
 800315c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003160:	f000 f868 	bl	8003234 <_read_r>
 8003164:	2800      	cmp	r0, #0
 8003166:	bfab      	itete	ge
 8003168:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800316a:	89a3      	ldrhlt	r3, [r4, #12]
 800316c:	181b      	addge	r3, r3, r0
 800316e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003172:	bfac      	ite	ge
 8003174:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003176:	81a3      	strhlt	r3, [r4, #12]
 8003178:	bd10      	pop	{r4, pc}

0800317a <__swrite>:
 800317a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800317e:	461f      	mov	r7, r3
 8003180:	898b      	ldrh	r3, [r1, #12]
 8003182:	05db      	lsls	r3, r3, #23
 8003184:	4605      	mov	r5, r0
 8003186:	460c      	mov	r4, r1
 8003188:	4616      	mov	r6, r2
 800318a:	d505      	bpl.n	8003198 <__swrite+0x1e>
 800318c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003190:	2302      	movs	r3, #2
 8003192:	2200      	movs	r2, #0
 8003194:	f000 f83c 	bl	8003210 <_lseek_r>
 8003198:	89a3      	ldrh	r3, [r4, #12]
 800319a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800319e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80031a2:	81a3      	strh	r3, [r4, #12]
 80031a4:	4632      	mov	r2, r6
 80031a6:	463b      	mov	r3, r7
 80031a8:	4628      	mov	r0, r5
 80031aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031ae:	f000 b853 	b.w	8003258 <_write_r>

080031b2 <__sseek>:
 80031b2:	b510      	push	{r4, lr}
 80031b4:	460c      	mov	r4, r1
 80031b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031ba:	f000 f829 	bl	8003210 <_lseek_r>
 80031be:	1c43      	adds	r3, r0, #1
 80031c0:	89a3      	ldrh	r3, [r4, #12]
 80031c2:	bf15      	itete	ne
 80031c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80031c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80031ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80031ce:	81a3      	strheq	r3, [r4, #12]
 80031d0:	bf18      	it	ne
 80031d2:	81a3      	strhne	r3, [r4, #12]
 80031d4:	bd10      	pop	{r4, pc}

080031d6 <__sclose>:
 80031d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031da:	f000 b809 	b.w	80031f0 <_close_r>

080031de <memset>:
 80031de:	4402      	add	r2, r0
 80031e0:	4603      	mov	r3, r0
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d100      	bne.n	80031e8 <memset+0xa>
 80031e6:	4770      	bx	lr
 80031e8:	f803 1b01 	strb.w	r1, [r3], #1
 80031ec:	e7f9      	b.n	80031e2 <memset+0x4>
	...

080031f0 <_close_r>:
 80031f0:	b538      	push	{r3, r4, r5, lr}
 80031f2:	4d06      	ldr	r5, [pc, #24]	@ (800320c <_close_r+0x1c>)
 80031f4:	2300      	movs	r3, #0
 80031f6:	4604      	mov	r4, r0
 80031f8:	4608      	mov	r0, r1
 80031fa:	602b      	str	r3, [r5, #0]
 80031fc:	f7fd fdb1 	bl	8000d62 <_close>
 8003200:	1c43      	adds	r3, r0, #1
 8003202:	d102      	bne.n	800320a <_close_r+0x1a>
 8003204:	682b      	ldr	r3, [r5, #0]
 8003206:	b103      	cbz	r3, 800320a <_close_r+0x1a>
 8003208:	6023      	str	r3, [r4, #0]
 800320a:	bd38      	pop	{r3, r4, r5, pc}
 800320c:	20000270 	.word	0x20000270

08003210 <_lseek_r>:
 8003210:	b538      	push	{r3, r4, r5, lr}
 8003212:	4d07      	ldr	r5, [pc, #28]	@ (8003230 <_lseek_r+0x20>)
 8003214:	4604      	mov	r4, r0
 8003216:	4608      	mov	r0, r1
 8003218:	4611      	mov	r1, r2
 800321a:	2200      	movs	r2, #0
 800321c:	602a      	str	r2, [r5, #0]
 800321e:	461a      	mov	r2, r3
 8003220:	f7fd fdc6 	bl	8000db0 <_lseek>
 8003224:	1c43      	adds	r3, r0, #1
 8003226:	d102      	bne.n	800322e <_lseek_r+0x1e>
 8003228:	682b      	ldr	r3, [r5, #0]
 800322a:	b103      	cbz	r3, 800322e <_lseek_r+0x1e>
 800322c:	6023      	str	r3, [r4, #0]
 800322e:	bd38      	pop	{r3, r4, r5, pc}
 8003230:	20000270 	.word	0x20000270

08003234 <_read_r>:
 8003234:	b538      	push	{r3, r4, r5, lr}
 8003236:	4d07      	ldr	r5, [pc, #28]	@ (8003254 <_read_r+0x20>)
 8003238:	4604      	mov	r4, r0
 800323a:	4608      	mov	r0, r1
 800323c:	4611      	mov	r1, r2
 800323e:	2200      	movs	r2, #0
 8003240:	602a      	str	r2, [r5, #0]
 8003242:	461a      	mov	r2, r3
 8003244:	f7fd fd54 	bl	8000cf0 <_read>
 8003248:	1c43      	adds	r3, r0, #1
 800324a:	d102      	bne.n	8003252 <_read_r+0x1e>
 800324c:	682b      	ldr	r3, [r5, #0]
 800324e:	b103      	cbz	r3, 8003252 <_read_r+0x1e>
 8003250:	6023      	str	r3, [r4, #0]
 8003252:	bd38      	pop	{r3, r4, r5, pc}
 8003254:	20000270 	.word	0x20000270

08003258 <_write_r>:
 8003258:	b538      	push	{r3, r4, r5, lr}
 800325a:	4d07      	ldr	r5, [pc, #28]	@ (8003278 <_write_r+0x20>)
 800325c:	4604      	mov	r4, r0
 800325e:	4608      	mov	r0, r1
 8003260:	4611      	mov	r1, r2
 8003262:	2200      	movs	r2, #0
 8003264:	602a      	str	r2, [r5, #0]
 8003266:	461a      	mov	r2, r3
 8003268:	f7fd fd5f 	bl	8000d2a <_write>
 800326c:	1c43      	adds	r3, r0, #1
 800326e:	d102      	bne.n	8003276 <_write_r+0x1e>
 8003270:	682b      	ldr	r3, [r5, #0]
 8003272:	b103      	cbz	r3, 8003276 <_write_r+0x1e>
 8003274:	6023      	str	r3, [r4, #0]
 8003276:	bd38      	pop	{r3, r4, r5, pc}
 8003278:	20000270 	.word	0x20000270

0800327c <__errno>:
 800327c:	4b01      	ldr	r3, [pc, #4]	@ (8003284 <__errno+0x8>)
 800327e:	6818      	ldr	r0, [r3, #0]
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	20000018 	.word	0x20000018

08003288 <__libc_init_array>:
 8003288:	b570      	push	{r4, r5, r6, lr}
 800328a:	4d0d      	ldr	r5, [pc, #52]	@ (80032c0 <__libc_init_array+0x38>)
 800328c:	4c0d      	ldr	r4, [pc, #52]	@ (80032c4 <__libc_init_array+0x3c>)
 800328e:	1b64      	subs	r4, r4, r5
 8003290:	10a4      	asrs	r4, r4, #2
 8003292:	2600      	movs	r6, #0
 8003294:	42a6      	cmp	r6, r4
 8003296:	d109      	bne.n	80032ac <__libc_init_array+0x24>
 8003298:	4d0b      	ldr	r5, [pc, #44]	@ (80032c8 <__libc_init_array+0x40>)
 800329a:	4c0c      	ldr	r4, [pc, #48]	@ (80032cc <__libc_init_array+0x44>)
 800329c:	f000 fdb8 	bl	8003e10 <_init>
 80032a0:	1b64      	subs	r4, r4, r5
 80032a2:	10a4      	asrs	r4, r4, #2
 80032a4:	2600      	movs	r6, #0
 80032a6:	42a6      	cmp	r6, r4
 80032a8:	d105      	bne.n	80032b6 <__libc_init_array+0x2e>
 80032aa:	bd70      	pop	{r4, r5, r6, pc}
 80032ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80032b0:	4798      	blx	r3
 80032b2:	3601      	adds	r6, #1
 80032b4:	e7ee      	b.n	8003294 <__libc_init_array+0xc>
 80032b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ba:	4798      	blx	r3
 80032bc:	3601      	adds	r6, #1
 80032be:	e7f2      	b.n	80032a6 <__libc_init_array+0x1e>
 80032c0:	08003eac 	.word	0x08003eac
 80032c4:	08003eac 	.word	0x08003eac
 80032c8:	08003eac 	.word	0x08003eac
 80032cc:	08003eb0 	.word	0x08003eb0

080032d0 <__retarget_lock_init_recursive>:
 80032d0:	4770      	bx	lr

080032d2 <__retarget_lock_acquire_recursive>:
 80032d2:	4770      	bx	lr

080032d4 <__retarget_lock_release_recursive>:
 80032d4:	4770      	bx	lr
	...

080032d8 <_free_r>:
 80032d8:	b538      	push	{r3, r4, r5, lr}
 80032da:	4605      	mov	r5, r0
 80032dc:	2900      	cmp	r1, #0
 80032de:	d041      	beq.n	8003364 <_free_r+0x8c>
 80032e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032e4:	1f0c      	subs	r4, r1, #4
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	bfb8      	it	lt
 80032ea:	18e4      	addlt	r4, r4, r3
 80032ec:	f000 f8e0 	bl	80034b0 <__malloc_lock>
 80032f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003368 <_free_r+0x90>)
 80032f2:	6813      	ldr	r3, [r2, #0]
 80032f4:	b933      	cbnz	r3, 8003304 <_free_r+0x2c>
 80032f6:	6063      	str	r3, [r4, #4]
 80032f8:	6014      	str	r4, [r2, #0]
 80032fa:	4628      	mov	r0, r5
 80032fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003300:	f000 b8dc 	b.w	80034bc <__malloc_unlock>
 8003304:	42a3      	cmp	r3, r4
 8003306:	d908      	bls.n	800331a <_free_r+0x42>
 8003308:	6820      	ldr	r0, [r4, #0]
 800330a:	1821      	adds	r1, r4, r0
 800330c:	428b      	cmp	r3, r1
 800330e:	bf01      	itttt	eq
 8003310:	6819      	ldreq	r1, [r3, #0]
 8003312:	685b      	ldreq	r3, [r3, #4]
 8003314:	1809      	addeq	r1, r1, r0
 8003316:	6021      	streq	r1, [r4, #0]
 8003318:	e7ed      	b.n	80032f6 <_free_r+0x1e>
 800331a:	461a      	mov	r2, r3
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	b10b      	cbz	r3, 8003324 <_free_r+0x4c>
 8003320:	42a3      	cmp	r3, r4
 8003322:	d9fa      	bls.n	800331a <_free_r+0x42>
 8003324:	6811      	ldr	r1, [r2, #0]
 8003326:	1850      	adds	r0, r2, r1
 8003328:	42a0      	cmp	r0, r4
 800332a:	d10b      	bne.n	8003344 <_free_r+0x6c>
 800332c:	6820      	ldr	r0, [r4, #0]
 800332e:	4401      	add	r1, r0
 8003330:	1850      	adds	r0, r2, r1
 8003332:	4283      	cmp	r3, r0
 8003334:	6011      	str	r1, [r2, #0]
 8003336:	d1e0      	bne.n	80032fa <_free_r+0x22>
 8003338:	6818      	ldr	r0, [r3, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	6053      	str	r3, [r2, #4]
 800333e:	4408      	add	r0, r1
 8003340:	6010      	str	r0, [r2, #0]
 8003342:	e7da      	b.n	80032fa <_free_r+0x22>
 8003344:	d902      	bls.n	800334c <_free_r+0x74>
 8003346:	230c      	movs	r3, #12
 8003348:	602b      	str	r3, [r5, #0]
 800334a:	e7d6      	b.n	80032fa <_free_r+0x22>
 800334c:	6820      	ldr	r0, [r4, #0]
 800334e:	1821      	adds	r1, r4, r0
 8003350:	428b      	cmp	r3, r1
 8003352:	bf04      	itt	eq
 8003354:	6819      	ldreq	r1, [r3, #0]
 8003356:	685b      	ldreq	r3, [r3, #4]
 8003358:	6063      	str	r3, [r4, #4]
 800335a:	bf04      	itt	eq
 800335c:	1809      	addeq	r1, r1, r0
 800335e:	6021      	streq	r1, [r4, #0]
 8003360:	6054      	str	r4, [r2, #4]
 8003362:	e7ca      	b.n	80032fa <_free_r+0x22>
 8003364:	bd38      	pop	{r3, r4, r5, pc}
 8003366:	bf00      	nop
 8003368:	2000027c 	.word	0x2000027c

0800336c <sbrk_aligned>:
 800336c:	b570      	push	{r4, r5, r6, lr}
 800336e:	4e0f      	ldr	r6, [pc, #60]	@ (80033ac <sbrk_aligned+0x40>)
 8003370:	460c      	mov	r4, r1
 8003372:	6831      	ldr	r1, [r6, #0]
 8003374:	4605      	mov	r5, r0
 8003376:	b911      	cbnz	r1, 800337e <sbrk_aligned+0x12>
 8003378:	f000 fcb6 	bl	8003ce8 <_sbrk_r>
 800337c:	6030      	str	r0, [r6, #0]
 800337e:	4621      	mov	r1, r4
 8003380:	4628      	mov	r0, r5
 8003382:	f000 fcb1 	bl	8003ce8 <_sbrk_r>
 8003386:	1c43      	adds	r3, r0, #1
 8003388:	d103      	bne.n	8003392 <sbrk_aligned+0x26>
 800338a:	f04f 34ff 	mov.w	r4, #4294967295
 800338e:	4620      	mov	r0, r4
 8003390:	bd70      	pop	{r4, r5, r6, pc}
 8003392:	1cc4      	adds	r4, r0, #3
 8003394:	f024 0403 	bic.w	r4, r4, #3
 8003398:	42a0      	cmp	r0, r4
 800339a:	d0f8      	beq.n	800338e <sbrk_aligned+0x22>
 800339c:	1a21      	subs	r1, r4, r0
 800339e:	4628      	mov	r0, r5
 80033a0:	f000 fca2 	bl	8003ce8 <_sbrk_r>
 80033a4:	3001      	adds	r0, #1
 80033a6:	d1f2      	bne.n	800338e <sbrk_aligned+0x22>
 80033a8:	e7ef      	b.n	800338a <sbrk_aligned+0x1e>
 80033aa:	bf00      	nop
 80033ac:	20000278 	.word	0x20000278

080033b0 <_malloc_r>:
 80033b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033b4:	1ccd      	adds	r5, r1, #3
 80033b6:	f025 0503 	bic.w	r5, r5, #3
 80033ba:	3508      	adds	r5, #8
 80033bc:	2d0c      	cmp	r5, #12
 80033be:	bf38      	it	cc
 80033c0:	250c      	movcc	r5, #12
 80033c2:	2d00      	cmp	r5, #0
 80033c4:	4606      	mov	r6, r0
 80033c6:	db01      	blt.n	80033cc <_malloc_r+0x1c>
 80033c8:	42a9      	cmp	r1, r5
 80033ca:	d904      	bls.n	80033d6 <_malloc_r+0x26>
 80033cc:	230c      	movs	r3, #12
 80033ce:	6033      	str	r3, [r6, #0]
 80033d0:	2000      	movs	r0, #0
 80033d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80034ac <_malloc_r+0xfc>
 80033da:	f000 f869 	bl	80034b0 <__malloc_lock>
 80033de:	f8d8 3000 	ldr.w	r3, [r8]
 80033e2:	461c      	mov	r4, r3
 80033e4:	bb44      	cbnz	r4, 8003438 <_malloc_r+0x88>
 80033e6:	4629      	mov	r1, r5
 80033e8:	4630      	mov	r0, r6
 80033ea:	f7ff ffbf 	bl	800336c <sbrk_aligned>
 80033ee:	1c43      	adds	r3, r0, #1
 80033f0:	4604      	mov	r4, r0
 80033f2:	d158      	bne.n	80034a6 <_malloc_r+0xf6>
 80033f4:	f8d8 4000 	ldr.w	r4, [r8]
 80033f8:	4627      	mov	r7, r4
 80033fa:	2f00      	cmp	r7, #0
 80033fc:	d143      	bne.n	8003486 <_malloc_r+0xd6>
 80033fe:	2c00      	cmp	r4, #0
 8003400:	d04b      	beq.n	800349a <_malloc_r+0xea>
 8003402:	6823      	ldr	r3, [r4, #0]
 8003404:	4639      	mov	r1, r7
 8003406:	4630      	mov	r0, r6
 8003408:	eb04 0903 	add.w	r9, r4, r3
 800340c:	f000 fc6c 	bl	8003ce8 <_sbrk_r>
 8003410:	4581      	cmp	r9, r0
 8003412:	d142      	bne.n	800349a <_malloc_r+0xea>
 8003414:	6821      	ldr	r1, [r4, #0]
 8003416:	1a6d      	subs	r5, r5, r1
 8003418:	4629      	mov	r1, r5
 800341a:	4630      	mov	r0, r6
 800341c:	f7ff ffa6 	bl	800336c <sbrk_aligned>
 8003420:	3001      	adds	r0, #1
 8003422:	d03a      	beq.n	800349a <_malloc_r+0xea>
 8003424:	6823      	ldr	r3, [r4, #0]
 8003426:	442b      	add	r3, r5
 8003428:	6023      	str	r3, [r4, #0]
 800342a:	f8d8 3000 	ldr.w	r3, [r8]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	bb62      	cbnz	r2, 800348c <_malloc_r+0xdc>
 8003432:	f8c8 7000 	str.w	r7, [r8]
 8003436:	e00f      	b.n	8003458 <_malloc_r+0xa8>
 8003438:	6822      	ldr	r2, [r4, #0]
 800343a:	1b52      	subs	r2, r2, r5
 800343c:	d420      	bmi.n	8003480 <_malloc_r+0xd0>
 800343e:	2a0b      	cmp	r2, #11
 8003440:	d917      	bls.n	8003472 <_malloc_r+0xc2>
 8003442:	1961      	adds	r1, r4, r5
 8003444:	42a3      	cmp	r3, r4
 8003446:	6025      	str	r5, [r4, #0]
 8003448:	bf18      	it	ne
 800344a:	6059      	strne	r1, [r3, #4]
 800344c:	6863      	ldr	r3, [r4, #4]
 800344e:	bf08      	it	eq
 8003450:	f8c8 1000 	streq.w	r1, [r8]
 8003454:	5162      	str	r2, [r4, r5]
 8003456:	604b      	str	r3, [r1, #4]
 8003458:	4630      	mov	r0, r6
 800345a:	f000 f82f 	bl	80034bc <__malloc_unlock>
 800345e:	f104 000b 	add.w	r0, r4, #11
 8003462:	1d23      	adds	r3, r4, #4
 8003464:	f020 0007 	bic.w	r0, r0, #7
 8003468:	1ac2      	subs	r2, r0, r3
 800346a:	bf1c      	itt	ne
 800346c:	1a1b      	subne	r3, r3, r0
 800346e:	50a3      	strne	r3, [r4, r2]
 8003470:	e7af      	b.n	80033d2 <_malloc_r+0x22>
 8003472:	6862      	ldr	r2, [r4, #4]
 8003474:	42a3      	cmp	r3, r4
 8003476:	bf0c      	ite	eq
 8003478:	f8c8 2000 	streq.w	r2, [r8]
 800347c:	605a      	strne	r2, [r3, #4]
 800347e:	e7eb      	b.n	8003458 <_malloc_r+0xa8>
 8003480:	4623      	mov	r3, r4
 8003482:	6864      	ldr	r4, [r4, #4]
 8003484:	e7ae      	b.n	80033e4 <_malloc_r+0x34>
 8003486:	463c      	mov	r4, r7
 8003488:	687f      	ldr	r7, [r7, #4]
 800348a:	e7b6      	b.n	80033fa <_malloc_r+0x4a>
 800348c:	461a      	mov	r2, r3
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	42a3      	cmp	r3, r4
 8003492:	d1fb      	bne.n	800348c <_malloc_r+0xdc>
 8003494:	2300      	movs	r3, #0
 8003496:	6053      	str	r3, [r2, #4]
 8003498:	e7de      	b.n	8003458 <_malloc_r+0xa8>
 800349a:	230c      	movs	r3, #12
 800349c:	6033      	str	r3, [r6, #0]
 800349e:	4630      	mov	r0, r6
 80034a0:	f000 f80c 	bl	80034bc <__malloc_unlock>
 80034a4:	e794      	b.n	80033d0 <_malloc_r+0x20>
 80034a6:	6005      	str	r5, [r0, #0]
 80034a8:	e7d6      	b.n	8003458 <_malloc_r+0xa8>
 80034aa:	bf00      	nop
 80034ac:	2000027c 	.word	0x2000027c

080034b0 <__malloc_lock>:
 80034b0:	4801      	ldr	r0, [pc, #4]	@ (80034b8 <__malloc_lock+0x8>)
 80034b2:	f7ff bf0e 	b.w	80032d2 <__retarget_lock_acquire_recursive>
 80034b6:	bf00      	nop
 80034b8:	20000274 	.word	0x20000274

080034bc <__malloc_unlock>:
 80034bc:	4801      	ldr	r0, [pc, #4]	@ (80034c4 <__malloc_unlock+0x8>)
 80034be:	f7ff bf09 	b.w	80032d4 <__retarget_lock_release_recursive>
 80034c2:	bf00      	nop
 80034c4:	20000274 	.word	0x20000274

080034c8 <__sfputc_r>:
 80034c8:	6893      	ldr	r3, [r2, #8]
 80034ca:	3b01      	subs	r3, #1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	b410      	push	{r4}
 80034d0:	6093      	str	r3, [r2, #8]
 80034d2:	da08      	bge.n	80034e6 <__sfputc_r+0x1e>
 80034d4:	6994      	ldr	r4, [r2, #24]
 80034d6:	42a3      	cmp	r3, r4
 80034d8:	db01      	blt.n	80034de <__sfputc_r+0x16>
 80034da:	290a      	cmp	r1, #10
 80034dc:	d103      	bne.n	80034e6 <__sfputc_r+0x1e>
 80034de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034e2:	f000 bb6d 	b.w	8003bc0 <__swbuf_r>
 80034e6:	6813      	ldr	r3, [r2, #0]
 80034e8:	1c58      	adds	r0, r3, #1
 80034ea:	6010      	str	r0, [r2, #0]
 80034ec:	7019      	strb	r1, [r3, #0]
 80034ee:	4608      	mov	r0, r1
 80034f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <__sfputs_r>:
 80034f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034f8:	4606      	mov	r6, r0
 80034fa:	460f      	mov	r7, r1
 80034fc:	4614      	mov	r4, r2
 80034fe:	18d5      	adds	r5, r2, r3
 8003500:	42ac      	cmp	r4, r5
 8003502:	d101      	bne.n	8003508 <__sfputs_r+0x12>
 8003504:	2000      	movs	r0, #0
 8003506:	e007      	b.n	8003518 <__sfputs_r+0x22>
 8003508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800350c:	463a      	mov	r2, r7
 800350e:	4630      	mov	r0, r6
 8003510:	f7ff ffda 	bl	80034c8 <__sfputc_r>
 8003514:	1c43      	adds	r3, r0, #1
 8003516:	d1f3      	bne.n	8003500 <__sfputs_r+0xa>
 8003518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800351c <_vfiprintf_r>:
 800351c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003520:	460d      	mov	r5, r1
 8003522:	b09d      	sub	sp, #116	@ 0x74
 8003524:	4614      	mov	r4, r2
 8003526:	4698      	mov	r8, r3
 8003528:	4606      	mov	r6, r0
 800352a:	b118      	cbz	r0, 8003534 <_vfiprintf_r+0x18>
 800352c:	6a03      	ldr	r3, [r0, #32]
 800352e:	b90b      	cbnz	r3, 8003534 <_vfiprintf_r+0x18>
 8003530:	f7ff fdca 	bl	80030c8 <__sinit>
 8003534:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003536:	07d9      	lsls	r1, r3, #31
 8003538:	d405      	bmi.n	8003546 <_vfiprintf_r+0x2a>
 800353a:	89ab      	ldrh	r3, [r5, #12]
 800353c:	059a      	lsls	r2, r3, #22
 800353e:	d402      	bmi.n	8003546 <_vfiprintf_r+0x2a>
 8003540:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003542:	f7ff fec6 	bl	80032d2 <__retarget_lock_acquire_recursive>
 8003546:	89ab      	ldrh	r3, [r5, #12]
 8003548:	071b      	lsls	r3, r3, #28
 800354a:	d501      	bpl.n	8003550 <_vfiprintf_r+0x34>
 800354c:	692b      	ldr	r3, [r5, #16]
 800354e:	b99b      	cbnz	r3, 8003578 <_vfiprintf_r+0x5c>
 8003550:	4629      	mov	r1, r5
 8003552:	4630      	mov	r0, r6
 8003554:	f000 fb72 	bl	8003c3c <__swsetup_r>
 8003558:	b170      	cbz	r0, 8003578 <_vfiprintf_r+0x5c>
 800355a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800355c:	07dc      	lsls	r4, r3, #31
 800355e:	d504      	bpl.n	800356a <_vfiprintf_r+0x4e>
 8003560:	f04f 30ff 	mov.w	r0, #4294967295
 8003564:	b01d      	add	sp, #116	@ 0x74
 8003566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800356a:	89ab      	ldrh	r3, [r5, #12]
 800356c:	0598      	lsls	r0, r3, #22
 800356e:	d4f7      	bmi.n	8003560 <_vfiprintf_r+0x44>
 8003570:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003572:	f7ff feaf 	bl	80032d4 <__retarget_lock_release_recursive>
 8003576:	e7f3      	b.n	8003560 <_vfiprintf_r+0x44>
 8003578:	2300      	movs	r3, #0
 800357a:	9309      	str	r3, [sp, #36]	@ 0x24
 800357c:	2320      	movs	r3, #32
 800357e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003582:	f8cd 800c 	str.w	r8, [sp, #12]
 8003586:	2330      	movs	r3, #48	@ 0x30
 8003588:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003738 <_vfiprintf_r+0x21c>
 800358c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003590:	f04f 0901 	mov.w	r9, #1
 8003594:	4623      	mov	r3, r4
 8003596:	469a      	mov	sl, r3
 8003598:	f813 2b01 	ldrb.w	r2, [r3], #1
 800359c:	b10a      	cbz	r2, 80035a2 <_vfiprintf_r+0x86>
 800359e:	2a25      	cmp	r2, #37	@ 0x25
 80035a0:	d1f9      	bne.n	8003596 <_vfiprintf_r+0x7a>
 80035a2:	ebba 0b04 	subs.w	fp, sl, r4
 80035a6:	d00b      	beq.n	80035c0 <_vfiprintf_r+0xa4>
 80035a8:	465b      	mov	r3, fp
 80035aa:	4622      	mov	r2, r4
 80035ac:	4629      	mov	r1, r5
 80035ae:	4630      	mov	r0, r6
 80035b0:	f7ff ffa1 	bl	80034f6 <__sfputs_r>
 80035b4:	3001      	adds	r0, #1
 80035b6:	f000 80a7 	beq.w	8003708 <_vfiprintf_r+0x1ec>
 80035ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80035bc:	445a      	add	r2, fp
 80035be:	9209      	str	r2, [sp, #36]	@ 0x24
 80035c0:	f89a 3000 	ldrb.w	r3, [sl]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 809f 	beq.w	8003708 <_vfiprintf_r+0x1ec>
 80035ca:	2300      	movs	r3, #0
 80035cc:	f04f 32ff 	mov.w	r2, #4294967295
 80035d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035d4:	f10a 0a01 	add.w	sl, sl, #1
 80035d8:	9304      	str	r3, [sp, #16]
 80035da:	9307      	str	r3, [sp, #28]
 80035dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80035e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80035e2:	4654      	mov	r4, sl
 80035e4:	2205      	movs	r2, #5
 80035e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035ea:	4853      	ldr	r0, [pc, #332]	@ (8003738 <_vfiprintf_r+0x21c>)
 80035ec:	f7fc fdf8 	bl	80001e0 <memchr>
 80035f0:	9a04      	ldr	r2, [sp, #16]
 80035f2:	b9d8      	cbnz	r0, 800362c <_vfiprintf_r+0x110>
 80035f4:	06d1      	lsls	r1, r2, #27
 80035f6:	bf44      	itt	mi
 80035f8:	2320      	movmi	r3, #32
 80035fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80035fe:	0713      	lsls	r3, r2, #28
 8003600:	bf44      	itt	mi
 8003602:	232b      	movmi	r3, #43	@ 0x2b
 8003604:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003608:	f89a 3000 	ldrb.w	r3, [sl]
 800360c:	2b2a      	cmp	r3, #42	@ 0x2a
 800360e:	d015      	beq.n	800363c <_vfiprintf_r+0x120>
 8003610:	9a07      	ldr	r2, [sp, #28]
 8003612:	4654      	mov	r4, sl
 8003614:	2000      	movs	r0, #0
 8003616:	f04f 0c0a 	mov.w	ip, #10
 800361a:	4621      	mov	r1, r4
 800361c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003620:	3b30      	subs	r3, #48	@ 0x30
 8003622:	2b09      	cmp	r3, #9
 8003624:	d94b      	bls.n	80036be <_vfiprintf_r+0x1a2>
 8003626:	b1b0      	cbz	r0, 8003656 <_vfiprintf_r+0x13a>
 8003628:	9207      	str	r2, [sp, #28]
 800362a:	e014      	b.n	8003656 <_vfiprintf_r+0x13a>
 800362c:	eba0 0308 	sub.w	r3, r0, r8
 8003630:	fa09 f303 	lsl.w	r3, r9, r3
 8003634:	4313      	orrs	r3, r2
 8003636:	9304      	str	r3, [sp, #16]
 8003638:	46a2      	mov	sl, r4
 800363a:	e7d2      	b.n	80035e2 <_vfiprintf_r+0xc6>
 800363c:	9b03      	ldr	r3, [sp, #12]
 800363e:	1d19      	adds	r1, r3, #4
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	9103      	str	r1, [sp, #12]
 8003644:	2b00      	cmp	r3, #0
 8003646:	bfbb      	ittet	lt
 8003648:	425b      	neglt	r3, r3
 800364a:	f042 0202 	orrlt.w	r2, r2, #2
 800364e:	9307      	strge	r3, [sp, #28]
 8003650:	9307      	strlt	r3, [sp, #28]
 8003652:	bfb8      	it	lt
 8003654:	9204      	strlt	r2, [sp, #16]
 8003656:	7823      	ldrb	r3, [r4, #0]
 8003658:	2b2e      	cmp	r3, #46	@ 0x2e
 800365a:	d10a      	bne.n	8003672 <_vfiprintf_r+0x156>
 800365c:	7863      	ldrb	r3, [r4, #1]
 800365e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003660:	d132      	bne.n	80036c8 <_vfiprintf_r+0x1ac>
 8003662:	9b03      	ldr	r3, [sp, #12]
 8003664:	1d1a      	adds	r2, r3, #4
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	9203      	str	r2, [sp, #12]
 800366a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800366e:	3402      	adds	r4, #2
 8003670:	9305      	str	r3, [sp, #20]
 8003672:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003748 <_vfiprintf_r+0x22c>
 8003676:	7821      	ldrb	r1, [r4, #0]
 8003678:	2203      	movs	r2, #3
 800367a:	4650      	mov	r0, sl
 800367c:	f7fc fdb0 	bl	80001e0 <memchr>
 8003680:	b138      	cbz	r0, 8003692 <_vfiprintf_r+0x176>
 8003682:	9b04      	ldr	r3, [sp, #16]
 8003684:	eba0 000a 	sub.w	r0, r0, sl
 8003688:	2240      	movs	r2, #64	@ 0x40
 800368a:	4082      	lsls	r2, r0
 800368c:	4313      	orrs	r3, r2
 800368e:	3401      	adds	r4, #1
 8003690:	9304      	str	r3, [sp, #16]
 8003692:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003696:	4829      	ldr	r0, [pc, #164]	@ (800373c <_vfiprintf_r+0x220>)
 8003698:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800369c:	2206      	movs	r2, #6
 800369e:	f7fc fd9f 	bl	80001e0 <memchr>
 80036a2:	2800      	cmp	r0, #0
 80036a4:	d03f      	beq.n	8003726 <_vfiprintf_r+0x20a>
 80036a6:	4b26      	ldr	r3, [pc, #152]	@ (8003740 <_vfiprintf_r+0x224>)
 80036a8:	bb1b      	cbnz	r3, 80036f2 <_vfiprintf_r+0x1d6>
 80036aa:	9b03      	ldr	r3, [sp, #12]
 80036ac:	3307      	adds	r3, #7
 80036ae:	f023 0307 	bic.w	r3, r3, #7
 80036b2:	3308      	adds	r3, #8
 80036b4:	9303      	str	r3, [sp, #12]
 80036b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036b8:	443b      	add	r3, r7
 80036ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80036bc:	e76a      	b.n	8003594 <_vfiprintf_r+0x78>
 80036be:	fb0c 3202 	mla	r2, ip, r2, r3
 80036c2:	460c      	mov	r4, r1
 80036c4:	2001      	movs	r0, #1
 80036c6:	e7a8      	b.n	800361a <_vfiprintf_r+0xfe>
 80036c8:	2300      	movs	r3, #0
 80036ca:	3401      	adds	r4, #1
 80036cc:	9305      	str	r3, [sp, #20]
 80036ce:	4619      	mov	r1, r3
 80036d0:	f04f 0c0a 	mov.w	ip, #10
 80036d4:	4620      	mov	r0, r4
 80036d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036da:	3a30      	subs	r2, #48	@ 0x30
 80036dc:	2a09      	cmp	r2, #9
 80036de:	d903      	bls.n	80036e8 <_vfiprintf_r+0x1cc>
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0c6      	beq.n	8003672 <_vfiprintf_r+0x156>
 80036e4:	9105      	str	r1, [sp, #20]
 80036e6:	e7c4      	b.n	8003672 <_vfiprintf_r+0x156>
 80036e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80036ec:	4604      	mov	r4, r0
 80036ee:	2301      	movs	r3, #1
 80036f0:	e7f0      	b.n	80036d4 <_vfiprintf_r+0x1b8>
 80036f2:	ab03      	add	r3, sp, #12
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	462a      	mov	r2, r5
 80036f8:	4b12      	ldr	r3, [pc, #72]	@ (8003744 <_vfiprintf_r+0x228>)
 80036fa:	a904      	add	r1, sp, #16
 80036fc:	4630      	mov	r0, r6
 80036fe:	f3af 8000 	nop.w
 8003702:	4607      	mov	r7, r0
 8003704:	1c78      	adds	r0, r7, #1
 8003706:	d1d6      	bne.n	80036b6 <_vfiprintf_r+0x19a>
 8003708:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800370a:	07d9      	lsls	r1, r3, #31
 800370c:	d405      	bmi.n	800371a <_vfiprintf_r+0x1fe>
 800370e:	89ab      	ldrh	r3, [r5, #12]
 8003710:	059a      	lsls	r2, r3, #22
 8003712:	d402      	bmi.n	800371a <_vfiprintf_r+0x1fe>
 8003714:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003716:	f7ff fddd 	bl	80032d4 <__retarget_lock_release_recursive>
 800371a:	89ab      	ldrh	r3, [r5, #12]
 800371c:	065b      	lsls	r3, r3, #25
 800371e:	f53f af1f 	bmi.w	8003560 <_vfiprintf_r+0x44>
 8003722:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003724:	e71e      	b.n	8003564 <_vfiprintf_r+0x48>
 8003726:	ab03      	add	r3, sp, #12
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	462a      	mov	r2, r5
 800372c:	4b05      	ldr	r3, [pc, #20]	@ (8003744 <_vfiprintf_r+0x228>)
 800372e:	a904      	add	r1, sp, #16
 8003730:	4630      	mov	r0, r6
 8003732:	f000 f879 	bl	8003828 <_printf_i>
 8003736:	e7e4      	b.n	8003702 <_vfiprintf_r+0x1e6>
 8003738:	08003e70 	.word	0x08003e70
 800373c:	08003e7a 	.word	0x08003e7a
 8003740:	00000000 	.word	0x00000000
 8003744:	080034f7 	.word	0x080034f7
 8003748:	08003e76 	.word	0x08003e76

0800374c <_printf_common>:
 800374c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003750:	4616      	mov	r6, r2
 8003752:	4698      	mov	r8, r3
 8003754:	688a      	ldr	r2, [r1, #8]
 8003756:	690b      	ldr	r3, [r1, #16]
 8003758:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800375c:	4293      	cmp	r3, r2
 800375e:	bfb8      	it	lt
 8003760:	4613      	movlt	r3, r2
 8003762:	6033      	str	r3, [r6, #0]
 8003764:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003768:	4607      	mov	r7, r0
 800376a:	460c      	mov	r4, r1
 800376c:	b10a      	cbz	r2, 8003772 <_printf_common+0x26>
 800376e:	3301      	adds	r3, #1
 8003770:	6033      	str	r3, [r6, #0]
 8003772:	6823      	ldr	r3, [r4, #0]
 8003774:	0699      	lsls	r1, r3, #26
 8003776:	bf42      	ittt	mi
 8003778:	6833      	ldrmi	r3, [r6, #0]
 800377a:	3302      	addmi	r3, #2
 800377c:	6033      	strmi	r3, [r6, #0]
 800377e:	6825      	ldr	r5, [r4, #0]
 8003780:	f015 0506 	ands.w	r5, r5, #6
 8003784:	d106      	bne.n	8003794 <_printf_common+0x48>
 8003786:	f104 0a19 	add.w	sl, r4, #25
 800378a:	68e3      	ldr	r3, [r4, #12]
 800378c:	6832      	ldr	r2, [r6, #0]
 800378e:	1a9b      	subs	r3, r3, r2
 8003790:	42ab      	cmp	r3, r5
 8003792:	dc26      	bgt.n	80037e2 <_printf_common+0x96>
 8003794:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003798:	6822      	ldr	r2, [r4, #0]
 800379a:	3b00      	subs	r3, #0
 800379c:	bf18      	it	ne
 800379e:	2301      	movne	r3, #1
 80037a0:	0692      	lsls	r2, r2, #26
 80037a2:	d42b      	bmi.n	80037fc <_printf_common+0xb0>
 80037a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80037a8:	4641      	mov	r1, r8
 80037aa:	4638      	mov	r0, r7
 80037ac:	47c8      	blx	r9
 80037ae:	3001      	adds	r0, #1
 80037b0:	d01e      	beq.n	80037f0 <_printf_common+0xa4>
 80037b2:	6823      	ldr	r3, [r4, #0]
 80037b4:	6922      	ldr	r2, [r4, #16]
 80037b6:	f003 0306 	and.w	r3, r3, #6
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	bf02      	ittt	eq
 80037be:	68e5      	ldreq	r5, [r4, #12]
 80037c0:	6833      	ldreq	r3, [r6, #0]
 80037c2:	1aed      	subeq	r5, r5, r3
 80037c4:	68a3      	ldr	r3, [r4, #8]
 80037c6:	bf0c      	ite	eq
 80037c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037cc:	2500      	movne	r5, #0
 80037ce:	4293      	cmp	r3, r2
 80037d0:	bfc4      	itt	gt
 80037d2:	1a9b      	subgt	r3, r3, r2
 80037d4:	18ed      	addgt	r5, r5, r3
 80037d6:	2600      	movs	r6, #0
 80037d8:	341a      	adds	r4, #26
 80037da:	42b5      	cmp	r5, r6
 80037dc:	d11a      	bne.n	8003814 <_printf_common+0xc8>
 80037de:	2000      	movs	r0, #0
 80037e0:	e008      	b.n	80037f4 <_printf_common+0xa8>
 80037e2:	2301      	movs	r3, #1
 80037e4:	4652      	mov	r2, sl
 80037e6:	4641      	mov	r1, r8
 80037e8:	4638      	mov	r0, r7
 80037ea:	47c8      	blx	r9
 80037ec:	3001      	adds	r0, #1
 80037ee:	d103      	bne.n	80037f8 <_printf_common+0xac>
 80037f0:	f04f 30ff 	mov.w	r0, #4294967295
 80037f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037f8:	3501      	adds	r5, #1
 80037fa:	e7c6      	b.n	800378a <_printf_common+0x3e>
 80037fc:	18e1      	adds	r1, r4, r3
 80037fe:	1c5a      	adds	r2, r3, #1
 8003800:	2030      	movs	r0, #48	@ 0x30
 8003802:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003806:	4422      	add	r2, r4
 8003808:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800380c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003810:	3302      	adds	r3, #2
 8003812:	e7c7      	b.n	80037a4 <_printf_common+0x58>
 8003814:	2301      	movs	r3, #1
 8003816:	4622      	mov	r2, r4
 8003818:	4641      	mov	r1, r8
 800381a:	4638      	mov	r0, r7
 800381c:	47c8      	blx	r9
 800381e:	3001      	adds	r0, #1
 8003820:	d0e6      	beq.n	80037f0 <_printf_common+0xa4>
 8003822:	3601      	adds	r6, #1
 8003824:	e7d9      	b.n	80037da <_printf_common+0x8e>
	...

08003828 <_printf_i>:
 8003828:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800382c:	7e0f      	ldrb	r7, [r1, #24]
 800382e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003830:	2f78      	cmp	r7, #120	@ 0x78
 8003832:	4691      	mov	r9, r2
 8003834:	4680      	mov	r8, r0
 8003836:	460c      	mov	r4, r1
 8003838:	469a      	mov	sl, r3
 800383a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800383e:	d807      	bhi.n	8003850 <_printf_i+0x28>
 8003840:	2f62      	cmp	r7, #98	@ 0x62
 8003842:	d80a      	bhi.n	800385a <_printf_i+0x32>
 8003844:	2f00      	cmp	r7, #0
 8003846:	f000 80d2 	beq.w	80039ee <_printf_i+0x1c6>
 800384a:	2f58      	cmp	r7, #88	@ 0x58
 800384c:	f000 80b9 	beq.w	80039c2 <_printf_i+0x19a>
 8003850:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003854:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003858:	e03a      	b.n	80038d0 <_printf_i+0xa8>
 800385a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800385e:	2b15      	cmp	r3, #21
 8003860:	d8f6      	bhi.n	8003850 <_printf_i+0x28>
 8003862:	a101      	add	r1, pc, #4	@ (adr r1, 8003868 <_printf_i+0x40>)
 8003864:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003868:	080038c1 	.word	0x080038c1
 800386c:	080038d5 	.word	0x080038d5
 8003870:	08003851 	.word	0x08003851
 8003874:	08003851 	.word	0x08003851
 8003878:	08003851 	.word	0x08003851
 800387c:	08003851 	.word	0x08003851
 8003880:	080038d5 	.word	0x080038d5
 8003884:	08003851 	.word	0x08003851
 8003888:	08003851 	.word	0x08003851
 800388c:	08003851 	.word	0x08003851
 8003890:	08003851 	.word	0x08003851
 8003894:	080039d5 	.word	0x080039d5
 8003898:	080038ff 	.word	0x080038ff
 800389c:	0800398f 	.word	0x0800398f
 80038a0:	08003851 	.word	0x08003851
 80038a4:	08003851 	.word	0x08003851
 80038a8:	080039f7 	.word	0x080039f7
 80038ac:	08003851 	.word	0x08003851
 80038b0:	080038ff 	.word	0x080038ff
 80038b4:	08003851 	.word	0x08003851
 80038b8:	08003851 	.word	0x08003851
 80038bc:	08003997 	.word	0x08003997
 80038c0:	6833      	ldr	r3, [r6, #0]
 80038c2:	1d1a      	adds	r2, r3, #4
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6032      	str	r2, [r6, #0]
 80038c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80038cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80038d0:	2301      	movs	r3, #1
 80038d2:	e09d      	b.n	8003a10 <_printf_i+0x1e8>
 80038d4:	6833      	ldr	r3, [r6, #0]
 80038d6:	6820      	ldr	r0, [r4, #0]
 80038d8:	1d19      	adds	r1, r3, #4
 80038da:	6031      	str	r1, [r6, #0]
 80038dc:	0606      	lsls	r6, r0, #24
 80038de:	d501      	bpl.n	80038e4 <_printf_i+0xbc>
 80038e0:	681d      	ldr	r5, [r3, #0]
 80038e2:	e003      	b.n	80038ec <_printf_i+0xc4>
 80038e4:	0645      	lsls	r5, r0, #25
 80038e6:	d5fb      	bpl.n	80038e0 <_printf_i+0xb8>
 80038e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80038ec:	2d00      	cmp	r5, #0
 80038ee:	da03      	bge.n	80038f8 <_printf_i+0xd0>
 80038f0:	232d      	movs	r3, #45	@ 0x2d
 80038f2:	426d      	negs	r5, r5
 80038f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80038f8:	4859      	ldr	r0, [pc, #356]	@ (8003a60 <_printf_i+0x238>)
 80038fa:	230a      	movs	r3, #10
 80038fc:	e011      	b.n	8003922 <_printf_i+0xfa>
 80038fe:	6821      	ldr	r1, [r4, #0]
 8003900:	6833      	ldr	r3, [r6, #0]
 8003902:	0608      	lsls	r0, r1, #24
 8003904:	f853 5b04 	ldr.w	r5, [r3], #4
 8003908:	d402      	bmi.n	8003910 <_printf_i+0xe8>
 800390a:	0649      	lsls	r1, r1, #25
 800390c:	bf48      	it	mi
 800390e:	b2ad      	uxthmi	r5, r5
 8003910:	2f6f      	cmp	r7, #111	@ 0x6f
 8003912:	4853      	ldr	r0, [pc, #332]	@ (8003a60 <_printf_i+0x238>)
 8003914:	6033      	str	r3, [r6, #0]
 8003916:	bf14      	ite	ne
 8003918:	230a      	movne	r3, #10
 800391a:	2308      	moveq	r3, #8
 800391c:	2100      	movs	r1, #0
 800391e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003922:	6866      	ldr	r6, [r4, #4]
 8003924:	60a6      	str	r6, [r4, #8]
 8003926:	2e00      	cmp	r6, #0
 8003928:	bfa2      	ittt	ge
 800392a:	6821      	ldrge	r1, [r4, #0]
 800392c:	f021 0104 	bicge.w	r1, r1, #4
 8003930:	6021      	strge	r1, [r4, #0]
 8003932:	b90d      	cbnz	r5, 8003938 <_printf_i+0x110>
 8003934:	2e00      	cmp	r6, #0
 8003936:	d04b      	beq.n	80039d0 <_printf_i+0x1a8>
 8003938:	4616      	mov	r6, r2
 800393a:	fbb5 f1f3 	udiv	r1, r5, r3
 800393e:	fb03 5711 	mls	r7, r3, r1, r5
 8003942:	5dc7      	ldrb	r7, [r0, r7]
 8003944:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003948:	462f      	mov	r7, r5
 800394a:	42bb      	cmp	r3, r7
 800394c:	460d      	mov	r5, r1
 800394e:	d9f4      	bls.n	800393a <_printf_i+0x112>
 8003950:	2b08      	cmp	r3, #8
 8003952:	d10b      	bne.n	800396c <_printf_i+0x144>
 8003954:	6823      	ldr	r3, [r4, #0]
 8003956:	07df      	lsls	r7, r3, #31
 8003958:	d508      	bpl.n	800396c <_printf_i+0x144>
 800395a:	6923      	ldr	r3, [r4, #16]
 800395c:	6861      	ldr	r1, [r4, #4]
 800395e:	4299      	cmp	r1, r3
 8003960:	bfde      	ittt	le
 8003962:	2330      	movle	r3, #48	@ 0x30
 8003964:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003968:	f106 36ff 	addle.w	r6, r6, #4294967295
 800396c:	1b92      	subs	r2, r2, r6
 800396e:	6122      	str	r2, [r4, #16]
 8003970:	f8cd a000 	str.w	sl, [sp]
 8003974:	464b      	mov	r3, r9
 8003976:	aa03      	add	r2, sp, #12
 8003978:	4621      	mov	r1, r4
 800397a:	4640      	mov	r0, r8
 800397c:	f7ff fee6 	bl	800374c <_printf_common>
 8003980:	3001      	adds	r0, #1
 8003982:	d14a      	bne.n	8003a1a <_printf_i+0x1f2>
 8003984:	f04f 30ff 	mov.w	r0, #4294967295
 8003988:	b004      	add	sp, #16
 800398a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800398e:	6823      	ldr	r3, [r4, #0]
 8003990:	f043 0320 	orr.w	r3, r3, #32
 8003994:	6023      	str	r3, [r4, #0]
 8003996:	4833      	ldr	r0, [pc, #204]	@ (8003a64 <_printf_i+0x23c>)
 8003998:	2778      	movs	r7, #120	@ 0x78
 800399a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800399e:	6823      	ldr	r3, [r4, #0]
 80039a0:	6831      	ldr	r1, [r6, #0]
 80039a2:	061f      	lsls	r7, r3, #24
 80039a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80039a8:	d402      	bmi.n	80039b0 <_printf_i+0x188>
 80039aa:	065f      	lsls	r7, r3, #25
 80039ac:	bf48      	it	mi
 80039ae:	b2ad      	uxthmi	r5, r5
 80039b0:	6031      	str	r1, [r6, #0]
 80039b2:	07d9      	lsls	r1, r3, #31
 80039b4:	bf44      	itt	mi
 80039b6:	f043 0320 	orrmi.w	r3, r3, #32
 80039ba:	6023      	strmi	r3, [r4, #0]
 80039bc:	b11d      	cbz	r5, 80039c6 <_printf_i+0x19e>
 80039be:	2310      	movs	r3, #16
 80039c0:	e7ac      	b.n	800391c <_printf_i+0xf4>
 80039c2:	4827      	ldr	r0, [pc, #156]	@ (8003a60 <_printf_i+0x238>)
 80039c4:	e7e9      	b.n	800399a <_printf_i+0x172>
 80039c6:	6823      	ldr	r3, [r4, #0]
 80039c8:	f023 0320 	bic.w	r3, r3, #32
 80039cc:	6023      	str	r3, [r4, #0]
 80039ce:	e7f6      	b.n	80039be <_printf_i+0x196>
 80039d0:	4616      	mov	r6, r2
 80039d2:	e7bd      	b.n	8003950 <_printf_i+0x128>
 80039d4:	6833      	ldr	r3, [r6, #0]
 80039d6:	6825      	ldr	r5, [r4, #0]
 80039d8:	6961      	ldr	r1, [r4, #20]
 80039da:	1d18      	adds	r0, r3, #4
 80039dc:	6030      	str	r0, [r6, #0]
 80039de:	062e      	lsls	r6, r5, #24
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	d501      	bpl.n	80039e8 <_printf_i+0x1c0>
 80039e4:	6019      	str	r1, [r3, #0]
 80039e6:	e002      	b.n	80039ee <_printf_i+0x1c6>
 80039e8:	0668      	lsls	r0, r5, #25
 80039ea:	d5fb      	bpl.n	80039e4 <_printf_i+0x1bc>
 80039ec:	8019      	strh	r1, [r3, #0]
 80039ee:	2300      	movs	r3, #0
 80039f0:	6123      	str	r3, [r4, #16]
 80039f2:	4616      	mov	r6, r2
 80039f4:	e7bc      	b.n	8003970 <_printf_i+0x148>
 80039f6:	6833      	ldr	r3, [r6, #0]
 80039f8:	1d1a      	adds	r2, r3, #4
 80039fa:	6032      	str	r2, [r6, #0]
 80039fc:	681e      	ldr	r6, [r3, #0]
 80039fe:	6862      	ldr	r2, [r4, #4]
 8003a00:	2100      	movs	r1, #0
 8003a02:	4630      	mov	r0, r6
 8003a04:	f7fc fbec 	bl	80001e0 <memchr>
 8003a08:	b108      	cbz	r0, 8003a0e <_printf_i+0x1e6>
 8003a0a:	1b80      	subs	r0, r0, r6
 8003a0c:	6060      	str	r0, [r4, #4]
 8003a0e:	6863      	ldr	r3, [r4, #4]
 8003a10:	6123      	str	r3, [r4, #16]
 8003a12:	2300      	movs	r3, #0
 8003a14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a18:	e7aa      	b.n	8003970 <_printf_i+0x148>
 8003a1a:	6923      	ldr	r3, [r4, #16]
 8003a1c:	4632      	mov	r2, r6
 8003a1e:	4649      	mov	r1, r9
 8003a20:	4640      	mov	r0, r8
 8003a22:	47d0      	blx	sl
 8003a24:	3001      	adds	r0, #1
 8003a26:	d0ad      	beq.n	8003984 <_printf_i+0x15c>
 8003a28:	6823      	ldr	r3, [r4, #0]
 8003a2a:	079b      	lsls	r3, r3, #30
 8003a2c:	d413      	bmi.n	8003a56 <_printf_i+0x22e>
 8003a2e:	68e0      	ldr	r0, [r4, #12]
 8003a30:	9b03      	ldr	r3, [sp, #12]
 8003a32:	4298      	cmp	r0, r3
 8003a34:	bfb8      	it	lt
 8003a36:	4618      	movlt	r0, r3
 8003a38:	e7a6      	b.n	8003988 <_printf_i+0x160>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	4632      	mov	r2, r6
 8003a3e:	4649      	mov	r1, r9
 8003a40:	4640      	mov	r0, r8
 8003a42:	47d0      	blx	sl
 8003a44:	3001      	adds	r0, #1
 8003a46:	d09d      	beq.n	8003984 <_printf_i+0x15c>
 8003a48:	3501      	adds	r5, #1
 8003a4a:	68e3      	ldr	r3, [r4, #12]
 8003a4c:	9903      	ldr	r1, [sp, #12]
 8003a4e:	1a5b      	subs	r3, r3, r1
 8003a50:	42ab      	cmp	r3, r5
 8003a52:	dcf2      	bgt.n	8003a3a <_printf_i+0x212>
 8003a54:	e7eb      	b.n	8003a2e <_printf_i+0x206>
 8003a56:	2500      	movs	r5, #0
 8003a58:	f104 0619 	add.w	r6, r4, #25
 8003a5c:	e7f5      	b.n	8003a4a <_printf_i+0x222>
 8003a5e:	bf00      	nop
 8003a60:	08003e81 	.word	0x08003e81
 8003a64:	08003e92 	.word	0x08003e92

08003a68 <__sflush_r>:
 8003a68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a70:	0716      	lsls	r6, r2, #28
 8003a72:	4605      	mov	r5, r0
 8003a74:	460c      	mov	r4, r1
 8003a76:	d454      	bmi.n	8003b22 <__sflush_r+0xba>
 8003a78:	684b      	ldr	r3, [r1, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	dc02      	bgt.n	8003a84 <__sflush_r+0x1c>
 8003a7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	dd48      	ble.n	8003b16 <__sflush_r+0xae>
 8003a84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003a86:	2e00      	cmp	r6, #0
 8003a88:	d045      	beq.n	8003b16 <__sflush_r+0xae>
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003a90:	682f      	ldr	r7, [r5, #0]
 8003a92:	6a21      	ldr	r1, [r4, #32]
 8003a94:	602b      	str	r3, [r5, #0]
 8003a96:	d030      	beq.n	8003afa <__sflush_r+0x92>
 8003a98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003a9a:	89a3      	ldrh	r3, [r4, #12]
 8003a9c:	0759      	lsls	r1, r3, #29
 8003a9e:	d505      	bpl.n	8003aac <__sflush_r+0x44>
 8003aa0:	6863      	ldr	r3, [r4, #4]
 8003aa2:	1ad2      	subs	r2, r2, r3
 8003aa4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003aa6:	b10b      	cbz	r3, 8003aac <__sflush_r+0x44>
 8003aa8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003aaa:	1ad2      	subs	r2, r2, r3
 8003aac:	2300      	movs	r3, #0
 8003aae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003ab0:	6a21      	ldr	r1, [r4, #32]
 8003ab2:	4628      	mov	r0, r5
 8003ab4:	47b0      	blx	r6
 8003ab6:	1c43      	adds	r3, r0, #1
 8003ab8:	89a3      	ldrh	r3, [r4, #12]
 8003aba:	d106      	bne.n	8003aca <__sflush_r+0x62>
 8003abc:	6829      	ldr	r1, [r5, #0]
 8003abe:	291d      	cmp	r1, #29
 8003ac0:	d82b      	bhi.n	8003b1a <__sflush_r+0xb2>
 8003ac2:	4a2a      	ldr	r2, [pc, #168]	@ (8003b6c <__sflush_r+0x104>)
 8003ac4:	410a      	asrs	r2, r1
 8003ac6:	07d6      	lsls	r6, r2, #31
 8003ac8:	d427      	bmi.n	8003b1a <__sflush_r+0xb2>
 8003aca:	2200      	movs	r2, #0
 8003acc:	6062      	str	r2, [r4, #4]
 8003ace:	04d9      	lsls	r1, r3, #19
 8003ad0:	6922      	ldr	r2, [r4, #16]
 8003ad2:	6022      	str	r2, [r4, #0]
 8003ad4:	d504      	bpl.n	8003ae0 <__sflush_r+0x78>
 8003ad6:	1c42      	adds	r2, r0, #1
 8003ad8:	d101      	bne.n	8003ade <__sflush_r+0x76>
 8003ada:	682b      	ldr	r3, [r5, #0]
 8003adc:	b903      	cbnz	r3, 8003ae0 <__sflush_r+0x78>
 8003ade:	6560      	str	r0, [r4, #84]	@ 0x54
 8003ae0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003ae2:	602f      	str	r7, [r5, #0]
 8003ae4:	b1b9      	cbz	r1, 8003b16 <__sflush_r+0xae>
 8003ae6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003aea:	4299      	cmp	r1, r3
 8003aec:	d002      	beq.n	8003af4 <__sflush_r+0x8c>
 8003aee:	4628      	mov	r0, r5
 8003af0:	f7ff fbf2 	bl	80032d8 <_free_r>
 8003af4:	2300      	movs	r3, #0
 8003af6:	6363      	str	r3, [r4, #52]	@ 0x34
 8003af8:	e00d      	b.n	8003b16 <__sflush_r+0xae>
 8003afa:	2301      	movs	r3, #1
 8003afc:	4628      	mov	r0, r5
 8003afe:	47b0      	blx	r6
 8003b00:	4602      	mov	r2, r0
 8003b02:	1c50      	adds	r0, r2, #1
 8003b04:	d1c9      	bne.n	8003a9a <__sflush_r+0x32>
 8003b06:	682b      	ldr	r3, [r5, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0c6      	beq.n	8003a9a <__sflush_r+0x32>
 8003b0c:	2b1d      	cmp	r3, #29
 8003b0e:	d001      	beq.n	8003b14 <__sflush_r+0xac>
 8003b10:	2b16      	cmp	r3, #22
 8003b12:	d11e      	bne.n	8003b52 <__sflush_r+0xea>
 8003b14:	602f      	str	r7, [r5, #0]
 8003b16:	2000      	movs	r0, #0
 8003b18:	e022      	b.n	8003b60 <__sflush_r+0xf8>
 8003b1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b1e:	b21b      	sxth	r3, r3
 8003b20:	e01b      	b.n	8003b5a <__sflush_r+0xf2>
 8003b22:	690f      	ldr	r7, [r1, #16]
 8003b24:	2f00      	cmp	r7, #0
 8003b26:	d0f6      	beq.n	8003b16 <__sflush_r+0xae>
 8003b28:	0793      	lsls	r3, r2, #30
 8003b2a:	680e      	ldr	r6, [r1, #0]
 8003b2c:	bf08      	it	eq
 8003b2e:	694b      	ldreq	r3, [r1, #20]
 8003b30:	600f      	str	r7, [r1, #0]
 8003b32:	bf18      	it	ne
 8003b34:	2300      	movne	r3, #0
 8003b36:	eba6 0807 	sub.w	r8, r6, r7
 8003b3a:	608b      	str	r3, [r1, #8]
 8003b3c:	f1b8 0f00 	cmp.w	r8, #0
 8003b40:	dde9      	ble.n	8003b16 <__sflush_r+0xae>
 8003b42:	6a21      	ldr	r1, [r4, #32]
 8003b44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003b46:	4643      	mov	r3, r8
 8003b48:	463a      	mov	r2, r7
 8003b4a:	4628      	mov	r0, r5
 8003b4c:	47b0      	blx	r6
 8003b4e:	2800      	cmp	r0, #0
 8003b50:	dc08      	bgt.n	8003b64 <__sflush_r+0xfc>
 8003b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b5a:	81a3      	strh	r3, [r4, #12]
 8003b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b64:	4407      	add	r7, r0
 8003b66:	eba8 0800 	sub.w	r8, r8, r0
 8003b6a:	e7e7      	b.n	8003b3c <__sflush_r+0xd4>
 8003b6c:	dfbffffe 	.word	0xdfbffffe

08003b70 <_fflush_r>:
 8003b70:	b538      	push	{r3, r4, r5, lr}
 8003b72:	690b      	ldr	r3, [r1, #16]
 8003b74:	4605      	mov	r5, r0
 8003b76:	460c      	mov	r4, r1
 8003b78:	b913      	cbnz	r3, 8003b80 <_fflush_r+0x10>
 8003b7a:	2500      	movs	r5, #0
 8003b7c:	4628      	mov	r0, r5
 8003b7e:	bd38      	pop	{r3, r4, r5, pc}
 8003b80:	b118      	cbz	r0, 8003b8a <_fflush_r+0x1a>
 8003b82:	6a03      	ldr	r3, [r0, #32]
 8003b84:	b90b      	cbnz	r3, 8003b8a <_fflush_r+0x1a>
 8003b86:	f7ff fa9f 	bl	80030c8 <__sinit>
 8003b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0f3      	beq.n	8003b7a <_fflush_r+0xa>
 8003b92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003b94:	07d0      	lsls	r0, r2, #31
 8003b96:	d404      	bmi.n	8003ba2 <_fflush_r+0x32>
 8003b98:	0599      	lsls	r1, r3, #22
 8003b9a:	d402      	bmi.n	8003ba2 <_fflush_r+0x32>
 8003b9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b9e:	f7ff fb98 	bl	80032d2 <__retarget_lock_acquire_recursive>
 8003ba2:	4628      	mov	r0, r5
 8003ba4:	4621      	mov	r1, r4
 8003ba6:	f7ff ff5f 	bl	8003a68 <__sflush_r>
 8003baa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003bac:	07da      	lsls	r2, r3, #31
 8003bae:	4605      	mov	r5, r0
 8003bb0:	d4e4      	bmi.n	8003b7c <_fflush_r+0xc>
 8003bb2:	89a3      	ldrh	r3, [r4, #12]
 8003bb4:	059b      	lsls	r3, r3, #22
 8003bb6:	d4e1      	bmi.n	8003b7c <_fflush_r+0xc>
 8003bb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003bba:	f7ff fb8b 	bl	80032d4 <__retarget_lock_release_recursive>
 8003bbe:	e7dd      	b.n	8003b7c <_fflush_r+0xc>

08003bc0 <__swbuf_r>:
 8003bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc2:	460e      	mov	r6, r1
 8003bc4:	4614      	mov	r4, r2
 8003bc6:	4605      	mov	r5, r0
 8003bc8:	b118      	cbz	r0, 8003bd2 <__swbuf_r+0x12>
 8003bca:	6a03      	ldr	r3, [r0, #32]
 8003bcc:	b90b      	cbnz	r3, 8003bd2 <__swbuf_r+0x12>
 8003bce:	f7ff fa7b 	bl	80030c8 <__sinit>
 8003bd2:	69a3      	ldr	r3, [r4, #24]
 8003bd4:	60a3      	str	r3, [r4, #8]
 8003bd6:	89a3      	ldrh	r3, [r4, #12]
 8003bd8:	071a      	lsls	r2, r3, #28
 8003bda:	d501      	bpl.n	8003be0 <__swbuf_r+0x20>
 8003bdc:	6923      	ldr	r3, [r4, #16]
 8003bde:	b943      	cbnz	r3, 8003bf2 <__swbuf_r+0x32>
 8003be0:	4621      	mov	r1, r4
 8003be2:	4628      	mov	r0, r5
 8003be4:	f000 f82a 	bl	8003c3c <__swsetup_r>
 8003be8:	b118      	cbz	r0, 8003bf2 <__swbuf_r+0x32>
 8003bea:	f04f 37ff 	mov.w	r7, #4294967295
 8003bee:	4638      	mov	r0, r7
 8003bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bf2:	6823      	ldr	r3, [r4, #0]
 8003bf4:	6922      	ldr	r2, [r4, #16]
 8003bf6:	1a98      	subs	r0, r3, r2
 8003bf8:	6963      	ldr	r3, [r4, #20]
 8003bfa:	b2f6      	uxtb	r6, r6
 8003bfc:	4283      	cmp	r3, r0
 8003bfe:	4637      	mov	r7, r6
 8003c00:	dc05      	bgt.n	8003c0e <__swbuf_r+0x4e>
 8003c02:	4621      	mov	r1, r4
 8003c04:	4628      	mov	r0, r5
 8003c06:	f7ff ffb3 	bl	8003b70 <_fflush_r>
 8003c0a:	2800      	cmp	r0, #0
 8003c0c:	d1ed      	bne.n	8003bea <__swbuf_r+0x2a>
 8003c0e:	68a3      	ldr	r3, [r4, #8]
 8003c10:	3b01      	subs	r3, #1
 8003c12:	60a3      	str	r3, [r4, #8]
 8003c14:	6823      	ldr	r3, [r4, #0]
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	6022      	str	r2, [r4, #0]
 8003c1a:	701e      	strb	r6, [r3, #0]
 8003c1c:	6962      	ldr	r2, [r4, #20]
 8003c1e:	1c43      	adds	r3, r0, #1
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d004      	beq.n	8003c2e <__swbuf_r+0x6e>
 8003c24:	89a3      	ldrh	r3, [r4, #12]
 8003c26:	07db      	lsls	r3, r3, #31
 8003c28:	d5e1      	bpl.n	8003bee <__swbuf_r+0x2e>
 8003c2a:	2e0a      	cmp	r6, #10
 8003c2c:	d1df      	bne.n	8003bee <__swbuf_r+0x2e>
 8003c2e:	4621      	mov	r1, r4
 8003c30:	4628      	mov	r0, r5
 8003c32:	f7ff ff9d 	bl	8003b70 <_fflush_r>
 8003c36:	2800      	cmp	r0, #0
 8003c38:	d0d9      	beq.n	8003bee <__swbuf_r+0x2e>
 8003c3a:	e7d6      	b.n	8003bea <__swbuf_r+0x2a>

08003c3c <__swsetup_r>:
 8003c3c:	b538      	push	{r3, r4, r5, lr}
 8003c3e:	4b29      	ldr	r3, [pc, #164]	@ (8003ce4 <__swsetup_r+0xa8>)
 8003c40:	4605      	mov	r5, r0
 8003c42:	6818      	ldr	r0, [r3, #0]
 8003c44:	460c      	mov	r4, r1
 8003c46:	b118      	cbz	r0, 8003c50 <__swsetup_r+0x14>
 8003c48:	6a03      	ldr	r3, [r0, #32]
 8003c4a:	b90b      	cbnz	r3, 8003c50 <__swsetup_r+0x14>
 8003c4c:	f7ff fa3c 	bl	80030c8 <__sinit>
 8003c50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c54:	0719      	lsls	r1, r3, #28
 8003c56:	d422      	bmi.n	8003c9e <__swsetup_r+0x62>
 8003c58:	06da      	lsls	r2, r3, #27
 8003c5a:	d407      	bmi.n	8003c6c <__swsetup_r+0x30>
 8003c5c:	2209      	movs	r2, #9
 8003c5e:	602a      	str	r2, [r5, #0]
 8003c60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c64:	81a3      	strh	r3, [r4, #12]
 8003c66:	f04f 30ff 	mov.w	r0, #4294967295
 8003c6a:	e033      	b.n	8003cd4 <__swsetup_r+0x98>
 8003c6c:	0758      	lsls	r0, r3, #29
 8003c6e:	d512      	bpl.n	8003c96 <__swsetup_r+0x5a>
 8003c70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c72:	b141      	cbz	r1, 8003c86 <__swsetup_r+0x4a>
 8003c74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c78:	4299      	cmp	r1, r3
 8003c7a:	d002      	beq.n	8003c82 <__swsetup_r+0x46>
 8003c7c:	4628      	mov	r0, r5
 8003c7e:	f7ff fb2b 	bl	80032d8 <_free_r>
 8003c82:	2300      	movs	r3, #0
 8003c84:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c86:	89a3      	ldrh	r3, [r4, #12]
 8003c88:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003c8c:	81a3      	strh	r3, [r4, #12]
 8003c8e:	2300      	movs	r3, #0
 8003c90:	6063      	str	r3, [r4, #4]
 8003c92:	6923      	ldr	r3, [r4, #16]
 8003c94:	6023      	str	r3, [r4, #0]
 8003c96:	89a3      	ldrh	r3, [r4, #12]
 8003c98:	f043 0308 	orr.w	r3, r3, #8
 8003c9c:	81a3      	strh	r3, [r4, #12]
 8003c9e:	6923      	ldr	r3, [r4, #16]
 8003ca0:	b94b      	cbnz	r3, 8003cb6 <__swsetup_r+0x7a>
 8003ca2:	89a3      	ldrh	r3, [r4, #12]
 8003ca4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003ca8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cac:	d003      	beq.n	8003cb6 <__swsetup_r+0x7a>
 8003cae:	4621      	mov	r1, r4
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	f000 f84f 	bl	8003d54 <__smakebuf_r>
 8003cb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cba:	f013 0201 	ands.w	r2, r3, #1
 8003cbe:	d00a      	beq.n	8003cd6 <__swsetup_r+0x9a>
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	60a2      	str	r2, [r4, #8]
 8003cc4:	6962      	ldr	r2, [r4, #20]
 8003cc6:	4252      	negs	r2, r2
 8003cc8:	61a2      	str	r2, [r4, #24]
 8003cca:	6922      	ldr	r2, [r4, #16]
 8003ccc:	b942      	cbnz	r2, 8003ce0 <__swsetup_r+0xa4>
 8003cce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003cd2:	d1c5      	bne.n	8003c60 <__swsetup_r+0x24>
 8003cd4:	bd38      	pop	{r3, r4, r5, pc}
 8003cd6:	0799      	lsls	r1, r3, #30
 8003cd8:	bf58      	it	pl
 8003cda:	6962      	ldrpl	r2, [r4, #20]
 8003cdc:	60a2      	str	r2, [r4, #8]
 8003cde:	e7f4      	b.n	8003cca <__swsetup_r+0x8e>
 8003ce0:	2000      	movs	r0, #0
 8003ce2:	e7f7      	b.n	8003cd4 <__swsetup_r+0x98>
 8003ce4:	20000018 	.word	0x20000018

08003ce8 <_sbrk_r>:
 8003ce8:	b538      	push	{r3, r4, r5, lr}
 8003cea:	4d06      	ldr	r5, [pc, #24]	@ (8003d04 <_sbrk_r+0x1c>)
 8003cec:	2300      	movs	r3, #0
 8003cee:	4604      	mov	r4, r0
 8003cf0:	4608      	mov	r0, r1
 8003cf2:	602b      	str	r3, [r5, #0]
 8003cf4:	f7fd f86a 	bl	8000dcc <_sbrk>
 8003cf8:	1c43      	adds	r3, r0, #1
 8003cfa:	d102      	bne.n	8003d02 <_sbrk_r+0x1a>
 8003cfc:	682b      	ldr	r3, [r5, #0]
 8003cfe:	b103      	cbz	r3, 8003d02 <_sbrk_r+0x1a>
 8003d00:	6023      	str	r3, [r4, #0]
 8003d02:	bd38      	pop	{r3, r4, r5, pc}
 8003d04:	20000270 	.word	0x20000270

08003d08 <__swhatbuf_r>:
 8003d08:	b570      	push	{r4, r5, r6, lr}
 8003d0a:	460c      	mov	r4, r1
 8003d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d10:	2900      	cmp	r1, #0
 8003d12:	b096      	sub	sp, #88	@ 0x58
 8003d14:	4615      	mov	r5, r2
 8003d16:	461e      	mov	r6, r3
 8003d18:	da0d      	bge.n	8003d36 <__swhatbuf_r+0x2e>
 8003d1a:	89a3      	ldrh	r3, [r4, #12]
 8003d1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003d20:	f04f 0100 	mov.w	r1, #0
 8003d24:	bf14      	ite	ne
 8003d26:	2340      	movne	r3, #64	@ 0x40
 8003d28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003d2c:	2000      	movs	r0, #0
 8003d2e:	6031      	str	r1, [r6, #0]
 8003d30:	602b      	str	r3, [r5, #0]
 8003d32:	b016      	add	sp, #88	@ 0x58
 8003d34:	bd70      	pop	{r4, r5, r6, pc}
 8003d36:	466a      	mov	r2, sp
 8003d38:	f000 f848 	bl	8003dcc <_fstat_r>
 8003d3c:	2800      	cmp	r0, #0
 8003d3e:	dbec      	blt.n	8003d1a <__swhatbuf_r+0x12>
 8003d40:	9901      	ldr	r1, [sp, #4]
 8003d42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003d46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003d4a:	4259      	negs	r1, r3
 8003d4c:	4159      	adcs	r1, r3
 8003d4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d52:	e7eb      	b.n	8003d2c <__swhatbuf_r+0x24>

08003d54 <__smakebuf_r>:
 8003d54:	898b      	ldrh	r3, [r1, #12]
 8003d56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d58:	079d      	lsls	r5, r3, #30
 8003d5a:	4606      	mov	r6, r0
 8003d5c:	460c      	mov	r4, r1
 8003d5e:	d507      	bpl.n	8003d70 <__smakebuf_r+0x1c>
 8003d60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003d64:	6023      	str	r3, [r4, #0]
 8003d66:	6123      	str	r3, [r4, #16]
 8003d68:	2301      	movs	r3, #1
 8003d6a:	6163      	str	r3, [r4, #20]
 8003d6c:	b003      	add	sp, #12
 8003d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d70:	ab01      	add	r3, sp, #4
 8003d72:	466a      	mov	r2, sp
 8003d74:	f7ff ffc8 	bl	8003d08 <__swhatbuf_r>
 8003d78:	9f00      	ldr	r7, [sp, #0]
 8003d7a:	4605      	mov	r5, r0
 8003d7c:	4639      	mov	r1, r7
 8003d7e:	4630      	mov	r0, r6
 8003d80:	f7ff fb16 	bl	80033b0 <_malloc_r>
 8003d84:	b948      	cbnz	r0, 8003d9a <__smakebuf_r+0x46>
 8003d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d8a:	059a      	lsls	r2, r3, #22
 8003d8c:	d4ee      	bmi.n	8003d6c <__smakebuf_r+0x18>
 8003d8e:	f023 0303 	bic.w	r3, r3, #3
 8003d92:	f043 0302 	orr.w	r3, r3, #2
 8003d96:	81a3      	strh	r3, [r4, #12]
 8003d98:	e7e2      	b.n	8003d60 <__smakebuf_r+0xc>
 8003d9a:	89a3      	ldrh	r3, [r4, #12]
 8003d9c:	6020      	str	r0, [r4, #0]
 8003d9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003da2:	81a3      	strh	r3, [r4, #12]
 8003da4:	9b01      	ldr	r3, [sp, #4]
 8003da6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003daa:	b15b      	cbz	r3, 8003dc4 <__smakebuf_r+0x70>
 8003dac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003db0:	4630      	mov	r0, r6
 8003db2:	f000 f81d 	bl	8003df0 <_isatty_r>
 8003db6:	b128      	cbz	r0, 8003dc4 <__smakebuf_r+0x70>
 8003db8:	89a3      	ldrh	r3, [r4, #12]
 8003dba:	f023 0303 	bic.w	r3, r3, #3
 8003dbe:	f043 0301 	orr.w	r3, r3, #1
 8003dc2:	81a3      	strh	r3, [r4, #12]
 8003dc4:	89a3      	ldrh	r3, [r4, #12]
 8003dc6:	431d      	orrs	r5, r3
 8003dc8:	81a5      	strh	r5, [r4, #12]
 8003dca:	e7cf      	b.n	8003d6c <__smakebuf_r+0x18>

08003dcc <_fstat_r>:
 8003dcc:	b538      	push	{r3, r4, r5, lr}
 8003dce:	4d07      	ldr	r5, [pc, #28]	@ (8003dec <_fstat_r+0x20>)
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	4604      	mov	r4, r0
 8003dd4:	4608      	mov	r0, r1
 8003dd6:	4611      	mov	r1, r2
 8003dd8:	602b      	str	r3, [r5, #0]
 8003dda:	f7fc ffce 	bl	8000d7a <_fstat>
 8003dde:	1c43      	adds	r3, r0, #1
 8003de0:	d102      	bne.n	8003de8 <_fstat_r+0x1c>
 8003de2:	682b      	ldr	r3, [r5, #0]
 8003de4:	b103      	cbz	r3, 8003de8 <_fstat_r+0x1c>
 8003de6:	6023      	str	r3, [r4, #0]
 8003de8:	bd38      	pop	{r3, r4, r5, pc}
 8003dea:	bf00      	nop
 8003dec:	20000270 	.word	0x20000270

08003df0 <_isatty_r>:
 8003df0:	b538      	push	{r3, r4, r5, lr}
 8003df2:	4d06      	ldr	r5, [pc, #24]	@ (8003e0c <_isatty_r+0x1c>)
 8003df4:	2300      	movs	r3, #0
 8003df6:	4604      	mov	r4, r0
 8003df8:	4608      	mov	r0, r1
 8003dfa:	602b      	str	r3, [r5, #0]
 8003dfc:	f7fc ffcd 	bl	8000d9a <_isatty>
 8003e00:	1c43      	adds	r3, r0, #1
 8003e02:	d102      	bne.n	8003e0a <_isatty_r+0x1a>
 8003e04:	682b      	ldr	r3, [r5, #0]
 8003e06:	b103      	cbz	r3, 8003e0a <_isatty_r+0x1a>
 8003e08:	6023      	str	r3, [r4, #0]
 8003e0a:	bd38      	pop	{r3, r4, r5, pc}
 8003e0c:	20000270 	.word	0x20000270

08003e10 <_init>:
 8003e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e12:	bf00      	nop
 8003e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e16:	bc08      	pop	{r3}
 8003e18:	469e      	mov	lr, r3
 8003e1a:	4770      	bx	lr

08003e1c <_fini>:
 8003e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e1e:	bf00      	nop
 8003e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e22:	bc08      	pop	{r3}
 8003e24:	469e      	mov	lr, r3
 8003e26:	4770      	bx	lr
