
Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a00  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  08006b90  08006b90  00007b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d9c  08006d9c  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006d9c  08006d9c  00007d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006da4  08006da4  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006da4  08006da4  00007da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006da8  08006da8  00007da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006dac  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  20000068  08006e14  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  08006e14  00008364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119c5  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026ad  00000000  00000000  00019a5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001028  00000000  00000000  0001c110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c92  00000000  00000000  0001d138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027f54  00000000  00000000  0001ddca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000138f2  00000000  00000000  00045d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f439f  00000000  00000000  00059610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014d9af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d10  00000000  00000000  0014d9f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00152704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b78 	.word	0x08006b78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006b78 	.word	0x08006b78

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 fe14 	bl	8001192 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f9c5 	bl	80008f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 fb63 	bl	8000c38 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000572:	f000 fa13 	bl	800099c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000576:	f000 fae1 	bl	8000b3c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800057a:	f000 fb2d 	bl	8000bd8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800057e:	2100      	movs	r1, #0
 8000580:	4890      	ldr	r0, [pc, #576]	@ (80007c4 <main+0x264>)
 8000582:	f002 fd8d 	bl	80030a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000586:	2104      	movs	r1, #4
 8000588:	488e      	ldr	r0, [pc, #568]	@ (80007c4 <main+0x264>)
 800058a:	f002 fd89 	bl	80030a0 <HAL_TIM_PWM_Start>
  motor_t mot1 = {.duty    = 0,
 800058e:	4a8e      	ldr	r2, [pc, #568]	@ (80007c8 <main+0x268>)
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	ca07      	ldmia	r2, {r0, r1, r2}
 8000596:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  				  .channel = 1,
				  .timer = TIM1};
  motor_t mot2 = {.duty    = 0,
 800059a:	4a8c      	ldr	r2, [pc, #560]	@ (80007cc <main+0x26c>)
 800059c:	463b      	mov	r3, r7
 800059e:	ca07      	ldmia	r2, {r0, r1, r2}
 80005a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  				  .channel = 2,
      			  .timer = TIM1};
  start_PWM(&htim1);
 80005a4:	4887      	ldr	r0, [pc, #540]	@ (80007c4 <main+0x264>)
 80005a6:	f000 fbdf 	bl	8000d68 <start_PWM>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart2,(uint8_t*) &chara,1);
 80005aa:	2201      	movs	r2, #1
 80005ac:	4988      	ldr	r1, [pc, #544]	@ (80007d0 <main+0x270>)
 80005ae:	4889      	ldr	r0, [pc, #548]	@ (80007d4 <main+0x274>)
 80005b0:	f003 fe68 	bl	8004284 <HAL_UART_Receive_IT>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    	if (char_flg){
 80005b4:	4b88      	ldr	r3, [pc, #544]	@ (80007d8 <main+0x278>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0fb      	beq.n	80005b4 <main+0x54>
    		char_flg = 0;
 80005bc:	4b86      	ldr	r3, [pc, #536]	@ (80007d8 <main+0x278>)
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]

    		HAL_UART_Transmit(&huart2,(uint8_t*) &chara,1,1);
 80005c2:	2301      	movs	r3, #1
 80005c4:	2201      	movs	r2, #1
 80005c6:	4982      	ldr	r1, [pc, #520]	@ (80007d0 <main+0x270>)
 80005c8:	4882      	ldr	r0, [pc, #520]	@ (80007d4 <main+0x274>)
 80005ca:	f003 fdd1 	bl	8004170 <HAL_UART_Transmit>
    		HAL_UART_Receive_IT(&huart2,(uint8_t*) &chara,1);
 80005ce:	2201      	movs	r2, #1
 80005d0:	497f      	ldr	r1, [pc, #508]	@ (80007d0 <main+0x270>)
 80005d2:	4880      	ldr	r0, [pc, #512]	@ (80007d4 <main+0x274>)
 80005d4:	f003 fe56 	bl	8004284 <HAL_UART_Receive_IT>
    		buffer[idx] = chara;
 80005d8:	4b80      	ldr	r3, [pc, #512]	@ (80007dc <main+0x27c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a7c      	ldr	r2, [pc, #496]	@ (80007d0 <main+0x270>)
 80005de:	7811      	ldrb	r1, [r2, #0]
 80005e0:	4a7f      	ldr	r2, [pc, #508]	@ (80007e0 <main+0x280>)
 80005e2:	54d1      	strb	r1, [r2, r3]
    		idx++;
 80005e4:	4b7d      	ldr	r3, [pc, #500]	@ (80007dc <main+0x27c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	3301      	adds	r3, #1
 80005ea:	4a7c      	ldr	r2, [pc, #496]	@ (80007dc <main+0x27c>)
 80005ec:	6013      	str	r3, [r2, #0]

    		if (chara == '\177'){
 80005ee:	4b78      	ldr	r3, [pc, #480]	@ (80007d0 <main+0x270>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80005f4:	d103      	bne.n	80005fe <main+0x9e>
    			cas = 1;
 80005f6:	4b7b      	ldr	r3, [pc, #492]	@ (80007e4 <main+0x284>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	e00a      	b.n	8000614 <main+0xb4>
    		}
    		else if (chara == '\r'){
 80005fe:	4b74      	ldr	r3, [pc, #464]	@ (80007d0 <main+0x270>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b0d      	cmp	r3, #13
 8000604:	d103      	bne.n	800060e <main+0xae>
    			cas = 2;
 8000606:	4b77      	ldr	r3, [pc, #476]	@ (80007e4 <main+0x284>)
 8000608:	2202      	movs	r2, #2
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	e002      	b.n	8000614 <main+0xb4>
    		}
    		else{
    			cas = 0;
 800060e:	4b75      	ldr	r3, [pc, #468]	@ (80007e4 <main+0x284>)
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
    		}


    		switch (cas){
 8000614:	4b73      	ldr	r3, [pc, #460]	@ (80007e4 <main+0x284>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d002      	beq.n	8000622 <main+0xc2>
 800061c:	2b02      	cmp	r3, #2
 800061e:	d015      	beq.n	800064c <main+0xec>
 8000620:	e09d      	b.n	800075e <main+0x1fe>
			case 1:
				idx--;
 8000622:	4b6e      	ldr	r3, [pc, #440]	@ (80007dc <main+0x27c>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	3b01      	subs	r3, #1
 8000628:	4a6c      	ldr	r2, [pc, #432]	@ (80007dc <main+0x27c>)
 800062a:	6013      	str	r3, [r2, #0]
				buffer[idx] = '\0';
 800062c:	4b6b      	ldr	r3, [pc, #428]	@ (80007dc <main+0x27c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a6b      	ldr	r2, [pc, #428]	@ (80007e0 <main+0x280>)
 8000632:	2100      	movs	r1, #0
 8000634:	54d1      	strb	r1, [r2, r3]
				idx--;
 8000636:	4b69      	ldr	r3, [pc, #420]	@ (80007dc <main+0x27c>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	3b01      	subs	r3, #1
 800063c:	4a67      	ldr	r2, [pc, #412]	@ (80007dc <main+0x27c>)
 800063e:	6013      	str	r3, [r2, #0]
				buffer[idx] = '\0';
 8000640:	4b66      	ldr	r3, [pc, #408]	@ (80007dc <main+0x27c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a66      	ldr	r2, [pc, #408]	@ (80007e0 <main+0x280>)
 8000646:	2100      	movs	r1, #0
 8000648:	54d1      	strb	r1, [r2, r3]
				break;
 800064a:	e088      	b.n	800075e <main+0x1fe>
			case 2:
				if (idx != 5){
 800064c:	4b63      	ldr	r3, [pc, #396]	@ (80007dc <main+0x27c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b05      	cmp	r3, #5
 8000652:	d003      	beq.n	800065c <main+0xfc>
					err = 1;
 8000654:	4b64      	ldr	r3, [pc, #400]	@ (80007e8 <main+0x288>)
 8000656:	2201      	movs	r2, #1
 8000658:	601a      	str	r2, [r3, #0]
					}
					ep = sprintf(error, "\nSuccess! Setting duty cycle to %d\n\r", dc);
					HAL_UART_Transmit(&huart2,error,ep,400);
					idx = 0;
				}
				break;
 800065a:	e07f      	b.n	800075c <main+0x1fc>
				else if (buffer[0] != 'm' && buffer[0] != 'M'){
 800065c:	4b60      	ldr	r3, [pc, #384]	@ (80007e0 <main+0x280>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b6d      	cmp	r3, #109	@ 0x6d
 8000662:	d007      	beq.n	8000674 <main+0x114>
 8000664:	4b5e      	ldr	r3, [pc, #376]	@ (80007e0 <main+0x280>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b4d      	cmp	r3, #77	@ 0x4d
 800066a:	d003      	beq.n	8000674 <main+0x114>
					err = 2;
 800066c:	4b5e      	ldr	r3, [pc, #376]	@ (80007e8 <main+0x288>)
 800066e:	2202      	movs	r2, #2
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	e073      	b.n	800075c <main+0x1fc>
				else if (buffer[1] != '1' && buffer[1] != '2'){
 8000674:	4b5a      	ldr	r3, [pc, #360]	@ (80007e0 <main+0x280>)
 8000676:	785b      	ldrb	r3, [r3, #1]
 8000678:	2b31      	cmp	r3, #49	@ 0x31
 800067a:	d007      	beq.n	800068c <main+0x12c>
 800067c:	4b58      	ldr	r3, [pc, #352]	@ (80007e0 <main+0x280>)
 800067e:	785b      	ldrb	r3, [r3, #1]
 8000680:	2b32      	cmp	r3, #50	@ 0x32
 8000682:	d003      	beq.n	800068c <main+0x12c>
					err = 3;
 8000684:	4b58      	ldr	r3, [pc, #352]	@ (80007e8 <main+0x288>)
 8000686:	2203      	movs	r2, #3
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	e067      	b.n	800075c <main+0x1fc>
				else if (((buffer[3] < '0' || buffer[3] > '9') && (buffer[3] < 'A' || buffer[3] > 'F')) && ((buffer[2] < '0' || buffer[2] > '9') && (buffer[2] < 'A' || buffer[2] > 'F'))){
 800068c:	4b54      	ldr	r3, [pc, #336]	@ (80007e0 <main+0x280>)
 800068e:	78db      	ldrb	r3, [r3, #3]
 8000690:	2b2f      	cmp	r3, #47	@ 0x2f
 8000692:	d903      	bls.n	800069c <main+0x13c>
 8000694:	4b52      	ldr	r3, [pc, #328]	@ (80007e0 <main+0x280>)
 8000696:	78db      	ldrb	r3, [r3, #3]
 8000698:	2b39      	cmp	r3, #57	@ 0x39
 800069a:	d91b      	bls.n	80006d4 <main+0x174>
 800069c:	4b50      	ldr	r3, [pc, #320]	@ (80007e0 <main+0x280>)
 800069e:	78db      	ldrb	r3, [r3, #3]
 80006a0:	2b40      	cmp	r3, #64	@ 0x40
 80006a2:	d903      	bls.n	80006ac <main+0x14c>
 80006a4:	4b4e      	ldr	r3, [pc, #312]	@ (80007e0 <main+0x280>)
 80006a6:	78db      	ldrb	r3, [r3, #3]
 80006a8:	2b46      	cmp	r3, #70	@ 0x46
 80006aa:	d913      	bls.n	80006d4 <main+0x174>
 80006ac:	4b4c      	ldr	r3, [pc, #304]	@ (80007e0 <main+0x280>)
 80006ae:	789b      	ldrb	r3, [r3, #2]
 80006b0:	2b2f      	cmp	r3, #47	@ 0x2f
 80006b2:	d903      	bls.n	80006bc <main+0x15c>
 80006b4:	4b4a      	ldr	r3, [pc, #296]	@ (80007e0 <main+0x280>)
 80006b6:	789b      	ldrb	r3, [r3, #2]
 80006b8:	2b39      	cmp	r3, #57	@ 0x39
 80006ba:	d90b      	bls.n	80006d4 <main+0x174>
 80006bc:	4b48      	ldr	r3, [pc, #288]	@ (80007e0 <main+0x280>)
 80006be:	789b      	ldrb	r3, [r3, #2]
 80006c0:	2b40      	cmp	r3, #64	@ 0x40
 80006c2:	d903      	bls.n	80006cc <main+0x16c>
 80006c4:	4b46      	ldr	r3, [pc, #280]	@ (80007e0 <main+0x280>)
 80006c6:	789b      	ldrb	r3, [r3, #2]
 80006c8:	2b46      	cmp	r3, #70	@ 0x46
 80006ca:	d903      	bls.n	80006d4 <main+0x174>
					err = 4;
 80006cc:	4b46      	ldr	r3, [pc, #280]	@ (80007e8 <main+0x288>)
 80006ce:	2204      	movs	r2, #4
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	e043      	b.n	800075c <main+0x1fc>
					err = 0;
 80006d4:	4b44      	ldr	r3, [pc, #272]	@ (80007e8 <main+0x288>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
					lazy[0] = buffer[2];
 80006da:	4b41      	ldr	r3, [pc, #260]	@ (80007e0 <main+0x280>)
 80006dc:	789a      	ldrb	r2, [r3, #2]
 80006de:	4b43      	ldr	r3, [pc, #268]	@ (80007ec <main+0x28c>)
 80006e0:	701a      	strb	r2, [r3, #0]
					lazy[1] = buffer[3];
 80006e2:	4b3f      	ldr	r3, [pc, #252]	@ (80007e0 <main+0x280>)
 80006e4:	78da      	ldrb	r2, [r3, #3]
 80006e6:	4b41      	ldr	r3, [pc, #260]	@ (80007ec <main+0x28c>)
 80006e8:	705a      	strb	r2, [r3, #1]
					dc = strtol(lazy,&p,16);
 80006ea:	2210      	movs	r2, #16
 80006ec:	4940      	ldr	r1, [pc, #256]	@ (80007f0 <main+0x290>)
 80006ee:	483f      	ldr	r0, [pc, #252]	@ (80007ec <main+0x28c>)
 80006f0:	f005 f932 	bl	8005958 <strtol>
 80006f4:	4603      	mov	r3, r0
 80006f6:	b25a      	sxtb	r2, r3
 80006f8:	4b3e      	ldr	r3, [pc, #248]	@ (80007f4 <main+0x294>)
 80006fa:	701a      	strb	r2, [r3, #0]
					if (buffer[1] - '0' == 1){
 80006fc:	4b38      	ldr	r3, [pc, #224]	@ (80007e0 <main+0x280>)
 80006fe:	785b      	ldrb	r3, [r3, #1]
 8000700:	2b31      	cmp	r3, #49	@ 0x31
 8000702:	d10a      	bne.n	800071a <main+0x1ba>
						set_duty(&mot1, dc);
 8000704:	4b3b      	ldr	r3, [pc, #236]	@ (80007f4 <main+0x294>)
 8000706:	f993 3000 	ldrsb.w	r3, [r3]
 800070a:	461a      	mov	r2, r3
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	4611      	mov	r1, r2
 8000712:	4618      	mov	r0, r3
 8000714:	f000 fabe 	bl	8000c94 <set_duty>
 8000718:	e008      	b.n	800072c <main+0x1cc>
						set_duty(&mot2, dc);
 800071a:	4b36      	ldr	r3, [pc, #216]	@ (80007f4 <main+0x294>)
 800071c:	f993 3000 	ldrsb.w	r3, [r3]
 8000720:	461a      	mov	r2, r3
 8000722:	463b      	mov	r3, r7
 8000724:	4611      	mov	r1, r2
 8000726:	4618      	mov	r0, r3
 8000728:	f000 fab4 	bl	8000c94 <set_duty>
					ep = sprintf(error, "\nSuccess! Setting duty cycle to %d\n\r", dc);
 800072c:	4b31      	ldr	r3, [pc, #196]	@ (80007f4 <main+0x294>)
 800072e:	f993 3000 	ldrsb.w	r3, [r3]
 8000732:	461a      	mov	r2, r3
 8000734:	4930      	ldr	r1, [pc, #192]	@ (80007f8 <main+0x298>)
 8000736:	4831      	ldr	r0, [pc, #196]	@ (80007fc <main+0x29c>)
 8000738:	f005 f9ec 	bl	8005b14 <siprintf>
 800073c:	4603      	mov	r3, r0
 800073e:	4a30      	ldr	r2, [pc, #192]	@ (8000800 <main+0x2a0>)
 8000740:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit(&huart2,error,ep,400);
 8000742:	4b2f      	ldr	r3, [pc, #188]	@ (8000800 <main+0x2a0>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	b29a      	uxth	r2, r3
 8000748:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800074c:	492b      	ldr	r1, [pc, #172]	@ (80007fc <main+0x29c>)
 800074e:	4821      	ldr	r0, [pc, #132]	@ (80007d4 <main+0x274>)
 8000750:	f003 fd0e 	bl	8004170 <HAL_UART_Transmit>
					idx = 0;
 8000754:	4b21      	ldr	r3, [pc, #132]	@ (80007dc <main+0x27c>)
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
				break;
 800075a:	e7ff      	b.n	800075c <main+0x1fc>
 800075c:	bf00      	nop

    		}
    		switch (err){
 800075e:	4b22      	ldr	r3, [pc, #136]	@ (80007e8 <main+0x288>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	3b01      	subs	r3, #1
 8000764:	2b03      	cmp	r3, #3
 8000766:	f63f af25 	bhi.w	80005b4 <main+0x54>
 800076a:	a201      	add	r2, pc, #4	@ (adr r2, 8000770 <main+0x210>)
 800076c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000770:	08000781 	.word	0x08000781
 8000774:	08000809 	.word	0x08000809
 8000778:	0800084d 	.word	0x0800084d
 800077c:	08000891 	.word	0x08000891
				case 1:
					ep = sprintf(error, "\nError 1\n\r");
 8000780:	4920      	ldr	r1, [pc, #128]	@ (8000804 <main+0x2a4>)
 8000782:	481e      	ldr	r0, [pc, #120]	@ (80007fc <main+0x29c>)
 8000784:	f005 f9c6 	bl	8005b14 <siprintf>
 8000788:	4603      	mov	r3, r0
 800078a:	4a1d      	ldr	r2, [pc, #116]	@ (8000800 <main+0x2a0>)
 800078c:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit(&huart2,error,ep,400);
 800078e:	4b1c      	ldr	r3, [pc, #112]	@ (8000800 <main+0x2a0>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	b29a      	uxth	r2, r3
 8000794:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000798:	4918      	ldr	r1, [pc, #96]	@ (80007fc <main+0x29c>)
 800079a:	480e      	ldr	r0, [pc, #56]	@ (80007d4 <main+0x274>)
 800079c:	f003 fce8 	bl	8004170 <HAL_UART_Transmit>
					idx = 0;
 80007a0:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <main+0x27c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
					err = 0;
 80007a6:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <main+0x288>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
					set_duty(&mot1,0);
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 fa6e 	bl	8000c94 <set_duty>
					set_duty(&mot2,0);
 80007b8:	463b      	mov	r3, r7
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 fa69 	bl	8000c94 <set_duty>
					break;
 80007c2:	e088      	b.n	80008d6 <main+0x376>
 80007c4:	20000084 	.word	0x20000084
 80007c8:	08006be8 	.word	0x08006be8
 80007cc:	08006bf4 	.word	0x08006bf4
 80007d0:	2000020c 	.word	0x2000020c
 80007d4:	2000011c 	.word	0x2000011c
 80007d8:	200001a4 	.word	0x200001a4
 80007dc:	200001a8 	.word	0x200001a8
 80007e0:	200001f8 	.word	0x200001f8
 80007e4:	200001ac 	.word	0x200001ac
 80007e8:	200001b0 	.word	0x200001b0
 80007ec:	200001f4 	.word	0x200001f4
 80007f0:	200001b8 	.word	0x200001b8
 80007f4:	200001b4 	.word	0x200001b4
 80007f8:	08006b90 	.word	0x08006b90
 80007fc:	200001c0 	.word	0x200001c0
 8000800:	200001bc 	.word	0x200001bc
 8000804:	08006bb8 	.word	0x08006bb8
				case 2:
					ep = sprintf(error, "\nError 2\n\r");
 8000808:	4933      	ldr	r1, [pc, #204]	@ (80008d8 <main+0x378>)
 800080a:	4834      	ldr	r0, [pc, #208]	@ (80008dc <main+0x37c>)
 800080c:	f005 f982 	bl	8005b14 <siprintf>
 8000810:	4603      	mov	r3, r0
 8000812:	4a33      	ldr	r2, [pc, #204]	@ (80008e0 <main+0x380>)
 8000814:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit(&huart2,error,ep,400);
 8000816:	4b32      	ldr	r3, [pc, #200]	@ (80008e0 <main+0x380>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	b29a      	uxth	r2, r3
 800081c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000820:	492e      	ldr	r1, [pc, #184]	@ (80008dc <main+0x37c>)
 8000822:	4830      	ldr	r0, [pc, #192]	@ (80008e4 <main+0x384>)
 8000824:	f003 fca4 	bl	8004170 <HAL_UART_Transmit>
					idx = 0;
 8000828:	4b2f      	ldr	r3, [pc, #188]	@ (80008e8 <main+0x388>)
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
					err = 0;
 800082e:	4b2f      	ldr	r3, [pc, #188]	@ (80008ec <main+0x38c>)
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
					set_duty(&mot1,0);
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f000 fa2a 	bl	8000c94 <set_duty>
					set_duty(&mot2,0);
 8000840:	463b      	mov	r3, r7
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f000 fa25 	bl	8000c94 <set_duty>
					break;
 800084a:	e044      	b.n	80008d6 <main+0x376>
				case 3:
					ep = sprintf(error, "\nError 3\n\r");
 800084c:	4928      	ldr	r1, [pc, #160]	@ (80008f0 <main+0x390>)
 800084e:	4823      	ldr	r0, [pc, #140]	@ (80008dc <main+0x37c>)
 8000850:	f005 f960 	bl	8005b14 <siprintf>
 8000854:	4603      	mov	r3, r0
 8000856:	4a22      	ldr	r2, [pc, #136]	@ (80008e0 <main+0x380>)
 8000858:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit(&huart2,error,ep,400);
 800085a:	4b21      	ldr	r3, [pc, #132]	@ (80008e0 <main+0x380>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	b29a      	uxth	r2, r3
 8000860:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000864:	491d      	ldr	r1, [pc, #116]	@ (80008dc <main+0x37c>)
 8000866:	481f      	ldr	r0, [pc, #124]	@ (80008e4 <main+0x384>)
 8000868:	f003 fc82 	bl	8004170 <HAL_UART_Transmit>
					idx = 0;
 800086c:	4b1e      	ldr	r3, [pc, #120]	@ (80008e8 <main+0x388>)
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
					err = 0;
 8000872:	4b1e      	ldr	r3, [pc, #120]	@ (80008ec <main+0x38c>)
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
					set_duty(&mot1,0);
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f000 fa08 	bl	8000c94 <set_duty>
					set_duty(&mot2,0);
 8000884:	463b      	mov	r3, r7
 8000886:	2100      	movs	r1, #0
 8000888:	4618      	mov	r0, r3
 800088a:	f000 fa03 	bl	8000c94 <set_duty>
					break;
 800088e:	e022      	b.n	80008d6 <main+0x376>
				case 4:
					ep = sprintf(error, "\nError 4\n\r");
 8000890:	4918      	ldr	r1, [pc, #96]	@ (80008f4 <main+0x394>)
 8000892:	4812      	ldr	r0, [pc, #72]	@ (80008dc <main+0x37c>)
 8000894:	f005 f93e 	bl	8005b14 <siprintf>
 8000898:	4603      	mov	r3, r0
 800089a:	4a11      	ldr	r2, [pc, #68]	@ (80008e0 <main+0x380>)
 800089c:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit(&huart2,error,ep,400);
 800089e:	4b10      	ldr	r3, [pc, #64]	@ (80008e0 <main+0x380>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80008a8:	490c      	ldr	r1, [pc, #48]	@ (80008dc <main+0x37c>)
 80008aa:	480e      	ldr	r0, [pc, #56]	@ (80008e4 <main+0x384>)
 80008ac:	f003 fc60 	bl	8004170 <HAL_UART_Transmit>
					idx = 0;
 80008b0:	4b0d      	ldr	r3, [pc, #52]	@ (80008e8 <main+0x388>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
					err = 0;
 80008b6:	4b0d      	ldr	r3, [pc, #52]	@ (80008ec <main+0x38c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
					set_duty(&mot1,0);
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 f9e6 	bl	8000c94 <set_duty>
					set_duty(&mot2,0);
 80008c8:	463b      	mov	r3, r7
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 f9e1 	bl	8000c94 <set_duty>
					break;
 80008d2:	bf00      	nop
 80008d4:	e66e      	b.n	80005b4 <main+0x54>
    	if (char_flg){
 80008d6:	e66d      	b.n	80005b4 <main+0x54>
 80008d8:	08006bc4 	.word	0x08006bc4
 80008dc:	200001c0 	.word	0x200001c0
 80008e0:	200001bc 	.word	0x200001bc
 80008e4:	2000011c 	.word	0x2000011c
 80008e8:	200001a8 	.word	0x200001a8
 80008ec:	200001b0 	.word	0x200001b0
 80008f0:	08006bd0 	.word	0x08006bd0
 80008f4:	08006bdc 	.word	0x08006bdc

080008f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b096      	sub	sp, #88	@ 0x58
 80008fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	2244      	movs	r2, #68	@ 0x44
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f005 f967 	bl	8005bda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800090c:	463b      	mov	r3, r7
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800091a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800091e:	f000 fff5 	bl	800190c <HAL_PWREx_ControlVoltageScaling>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000928:	f000 f9ae 	bl	8000c88 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800092c:	2310      	movs	r3, #16
 800092e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000930:	2301      	movs	r3, #1
 8000932:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000938:	2360      	movs	r3, #96	@ 0x60
 800093a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093c:	2302      	movs	r3, #2
 800093e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000940:	2301      	movs	r3, #1
 8000942:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000944:	2301      	movs	r3, #1
 8000946:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000948:	2328      	movs	r3, #40	@ 0x28
 800094a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800094c:	2307      	movs	r3, #7
 800094e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000950:	2302      	movs	r3, #2
 8000952:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000954:	2302      	movs	r3, #2
 8000956:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4618      	mov	r0, r3
 800095e:	f001 f82b 	bl	80019b8 <HAL_RCC_OscConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000968:	f000 f98e 	bl	8000c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096c:	230f      	movs	r3, #15
 800096e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000970:	2303      	movs	r3, #3
 8000972:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000980:	463b      	mov	r3, r7
 8000982:	2104      	movs	r1, #4
 8000984:	4618      	mov	r0, r3
 8000986:	f001 fbf3 	bl	8002170 <HAL_RCC_ClockConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000990:	f000 f97a 	bl	8000c88 <Error_Handler>
  }
}
 8000994:	bf00      	nop
 8000996:	3758      	adds	r7, #88	@ 0x58
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b09a      	sub	sp, #104	@ 0x68
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009a2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009bc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
 80009cc:	615a      	str	r2, [r3, #20]
 80009ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	222c      	movs	r2, #44	@ 0x2c
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f005 f8ff 	bl	8005bda <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009dc:	4b55      	ldr	r3, [pc, #340]	@ (8000b34 <MX_TIM1_Init+0x198>)
 80009de:	4a56      	ldr	r2, [pc, #344]	@ (8000b38 <MX_TIM1_Init+0x19c>)
 80009e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8;
 80009e2:	4b54      	ldr	r3, [pc, #336]	@ (8000b34 <MX_TIM1_Init+0x198>)
 80009e4:	2208      	movs	r2, #8
 80009e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e8:	4b52      	ldr	r3, [pc, #328]	@ (8000b34 <MX_TIM1_Init+0x198>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 265;
 80009ee:	4b51      	ldr	r3, [pc, #324]	@ (8000b34 <MX_TIM1_Init+0x198>)
 80009f0:	f240 1209 	movw	r2, #265	@ 0x109
 80009f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f6:	4b4f      	ldr	r3, [pc, #316]	@ (8000b34 <MX_TIM1_Init+0x198>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009fc:	4b4d      	ldr	r3, [pc, #308]	@ (8000b34 <MX_TIM1_Init+0x198>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a02:	4b4c      	ldr	r3, [pc, #304]	@ (8000b34 <MX_TIM1_Init+0x198>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a08:	484a      	ldr	r0, [pc, #296]	@ (8000b34 <MX_TIM1_Init+0x198>)
 8000a0a:	f002 fa91 	bl	8002f30 <HAL_TIM_Base_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000a14:	f000 f938 	bl	8000c88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a1c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a1e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000a22:	4619      	mov	r1, r3
 8000a24:	4843      	ldr	r0, [pc, #268]	@ (8000b34 <MX_TIM1_Init+0x198>)
 8000a26:	f002 fd55 	bl	80034d4 <HAL_TIM_ConfigClockSource>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a30:	f000 f92a 	bl	8000c88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a34:	483f      	ldr	r0, [pc, #252]	@ (8000b34 <MX_TIM1_Init+0x198>)
 8000a36:	f002 fad2 	bl	8002fde <HAL_TIM_PWM_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000a40:	f000 f922 	bl	8000c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a44:	2300      	movs	r3, #0
 8000a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a50:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a54:	4619      	mov	r1, r3
 8000a56:	4837      	ldr	r0, [pc, #220]	@ (8000b34 <MX_TIM1_Init+0x198>)
 8000a58:	f003 fa36 	bl	8003ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000a62:	f000 f911 	bl	8000c88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a66:	2360      	movs	r3, #96	@ 0x60
 8000a68:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a72:	2300      	movs	r3, #0
 8000a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a82:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a86:	2200      	movs	r2, #0
 8000a88:	4619      	mov	r1, r3
 8000a8a:	482a      	ldr	r0, [pc, #168]	@ (8000b34 <MX_TIM1_Init+0x198>)
 8000a8c:	f002 fc0e 	bl	80032ac <HAL_TIM_PWM_ConfigChannel>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000a96:	f000 f8f7 	bl	8000c88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a9a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a9e:	2204      	movs	r2, #4
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4824      	ldr	r0, [pc, #144]	@ (8000b34 <MX_TIM1_Init+0x198>)
 8000aa4:	f002 fc02 	bl	80032ac <HAL_TIM_PWM_ConfigChannel>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000aae:	f000 f8eb 	bl	8000c88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ab2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ab6:	2208      	movs	r2, #8
 8000ab8:	4619      	mov	r1, r3
 8000aba:	481e      	ldr	r0, [pc, #120]	@ (8000b34 <MX_TIM1_Init+0x198>)
 8000abc:	f002 fbf6 	bl	80032ac <HAL_TIM_PWM_ConfigChannel>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000ac6:	f000 f8df 	bl	8000c88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000aca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ace:	220c      	movs	r2, #12
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4818      	ldr	r0, [pc, #96]	@ (8000b34 <MX_TIM1_Init+0x198>)
 8000ad4:	f002 fbea 	bl	80032ac <HAL_TIM_PWM_ConfigChannel>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000ade:	f000 f8d3 	bl	8000c88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000af6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000afa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b04:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b08:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	4619      	mov	r1, r3
 8000b16:	4807      	ldr	r0, [pc, #28]	@ (8000b34 <MX_TIM1_Init+0x198>)
 8000b18:	f003 fa5e 	bl	8003fd8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8000b22:	f000 f8b1 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b26:	4803      	ldr	r0, [pc, #12]	@ (8000b34 <MX_TIM1_Init+0x198>)
 8000b28:	f000 f97e 	bl	8000e28 <HAL_TIM_MspPostInit>

}
 8000b2c:	bf00      	nop
 8000b2e:	3768      	adds	r7, #104	@ 0x68
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000084 	.word	0x20000084
 8000b38:	40012c00 	.word	0x40012c00

08000b3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b088      	sub	sp, #32
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b42:	f107 0310 	add.w	r3, r7, #16
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd4 <MX_TIM2_Init+0x98>)
 8000b5c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b60:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd4 <MX_TIM2_Init+0x98>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b68:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd4 <MX_TIM2_Init+0x98>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000b6e:	4b19      	ldr	r3, [pc, #100]	@ (8000bd4 <MX_TIM2_Init+0x98>)
 8000b70:	f04f 32ff 	mov.w	r2, #4294967295
 8000b74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b76:	4b17      	ldr	r3, [pc, #92]	@ (8000bd4 <MX_TIM2_Init+0x98>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7c:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <MX_TIM2_Init+0x98>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b82:	4814      	ldr	r0, [pc, #80]	@ (8000bd4 <MX_TIM2_Init+0x98>)
 8000b84:	f002 f9d4 	bl	8002f30 <HAL_TIM_Base_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000b8e:	f000 f87b 	bl	8000c88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b98:	f107 0310 	add.w	r3, r7, #16
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	480d      	ldr	r0, [pc, #52]	@ (8000bd4 <MX_TIM2_Init+0x98>)
 8000ba0:	f002 fc98 	bl	80034d4 <HAL_TIM_ConfigClockSource>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000baa:	f000 f86d 	bl	8000c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4806      	ldr	r0, [pc, #24]	@ (8000bd4 <MX_TIM2_Init+0x98>)
 8000bbc:	f003 f984 	bl	8003ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000bc6:	f000 f85f 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	3720      	adds	r7, #32
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200000d0 	.word	0x200000d0

08000bd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bdc:	4b14      	ldr	r3, [pc, #80]	@ (8000c30 <MX_USART2_UART_Init+0x58>)
 8000bde:	4a15      	ldr	r2, [pc, #84]	@ (8000c34 <MX_USART2_UART_Init+0x5c>)
 8000be0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000be2:	4b13      	ldr	r3, [pc, #76]	@ (8000c30 <MX_USART2_UART_Init+0x58>)
 8000be4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000be8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bea:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <MX_USART2_UART_Init+0x58>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c30 <MX_USART2_UART_Init+0x58>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <MX_USART2_UART_Init+0x58>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <MX_USART2_UART_Init+0x58>)
 8000bfe:	220c      	movs	r2, #12
 8000c00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c02:	4b0b      	ldr	r3, [pc, #44]	@ (8000c30 <MX_USART2_UART_Init+0x58>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c08:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <MX_USART2_UART_Init+0x58>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <MX_USART2_UART_Init+0x58>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <MX_USART2_UART_Init+0x58>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c1a:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <MX_USART2_UART_Init+0x58>)
 8000c1c:	f003 fa5a 	bl	80040d4 <HAL_UART_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c26:	f000 f82f 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000011c 	.word	0x2000011c
 8000c34:	40004400 	.word	0x40004400

08000c38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <MX_GPIO_Init+0x2c>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c42:	4a08      	ldr	r2, [pc, #32]	@ (8000c64 <MX_GPIO_Init+0x2c>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c4a:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <MX_GPIO_Init+0x2c>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40021000 	.word	0x40021000

08000c68 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  char_flg = 1;
 8000c70:	4b04      	ldr	r3, [pc, #16]	@ (8000c84 <HAL_UART_RxCpltCallback+0x1c>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	601a      	str	r2, [r3, #0]


}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	200001a4 	.word	0x200001a4

08000c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c8c:	b672      	cpsid	i
}
 8000c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <Error_Handler+0x8>

08000c94 <set_duty>:
 *      Author: Aiden
 */
#include "motor_driver.h"

// The implementation of the motor object method should go in the .c file
void set_duty(motor_t* p_mot, int32_t duty){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
    // Print to the console so we can see what's happening
    printf("Setting Motor Duty Cycle to %d", duty);
 8000c9e:	6839      	ldr	r1, [r7, #0]
 8000ca0:	4830      	ldr	r0, [pc, #192]	@ (8000d64 <set_duty+0xd0>)
 8000ca2:	f004 ff25 	bl	8005af0 <iprintf>
    p_mot->duty = duty;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	683a      	ldr	r2, [r7, #0]
 8000caa:	601a      	str	r2, [r3, #0]
    // Assign the duty cycle to a field in the structure
    if (p_mot->channel == 1){
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d129      	bne.n	8000d08 <set_duty+0x74>

			if (duty>=0){
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db13      	blt.n	8000ce2 <set_duty+0x4e>
				duty = duty*265/128;
 8000cba:	683a      	ldr	r2, [r7, #0]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	015b      	lsls	r3, r3, #5
 8000cc0:	4413      	add	r3, r2
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	4413      	add	r3, r2
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	da00      	bge.n	8000ccc <set_duty+0x38>
 8000cca:	337f      	adds	r3, #127	@ 0x7f
 8000ccc:	11db      	asrs	r3, r3, #7
 8000cce:	603b      	str	r3, [r7, #0]
				p_mot->timer->CCR1 = duty;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	683a      	ldr	r2, [r7, #0]
 8000cd6:	635a      	str	r2, [r3, #52]	@ 0x34
				p_mot->timer->CCR2 = 0;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	639a      	str	r2, [r3, #56]	@ 0x38
				duty = -1*duty*265/128;
				p_mot->timer->CCR3 = 0;
				p_mot->timer->CCR4 = duty;
			}
    }
}
 8000ce0:	e03b      	b.n	8000d5a <set_duty+0xc6>
				duty = -1*duty*265/128;
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	f46f 7284 	mvn.w	r2, #264	@ 0x108
 8000ce8:	fb02 f303 	mul.w	r3, r2, r3
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	da00      	bge.n	8000cf2 <set_duty+0x5e>
 8000cf0:	337f      	adds	r3, #127	@ 0x7f
 8000cf2:	11db      	asrs	r3, r3, #7
 8000cf4:	603b      	str	r3, [r7, #0]
				p_mot->timer->CCR1 = 0;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	635a      	str	r2, [r3, #52]	@ 0x34
				p_mot->timer->CCR2 = duty;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	683a      	ldr	r2, [r7, #0]
 8000d04:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000d06:	e028      	b.n	8000d5a <set_duty+0xc6>
    		if (duty>=0){
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	db13      	blt.n	8000d36 <set_duty+0xa2>
				duty = duty*265/128;
 8000d0e:	683a      	ldr	r2, [r7, #0]
 8000d10:	4613      	mov	r3, r2
 8000d12:	015b      	lsls	r3, r3, #5
 8000d14:	4413      	add	r3, r2
 8000d16:	00db      	lsls	r3, r3, #3
 8000d18:	4413      	add	r3, r2
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	da00      	bge.n	8000d20 <set_duty+0x8c>
 8000d1e:	337f      	adds	r3, #127	@ 0x7f
 8000d20:	11db      	asrs	r3, r3, #7
 8000d22:	603b      	str	r3, [r7, #0]
				p_mot->timer->CCR3 = duty;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	63da      	str	r2, [r3, #60]	@ 0x3c
				p_mot->timer->CCR4 = 0;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	2200      	movs	r2, #0
 8000d32:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000d34:	e011      	b.n	8000d5a <set_duty+0xc6>
				duty = -1*duty*265/128;
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	f46f 7284 	mvn.w	r2, #264	@ 0x108
 8000d3c:	fb02 f303 	mul.w	r3, r2, r3
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	da00      	bge.n	8000d46 <set_duty+0xb2>
 8000d44:	337f      	adds	r3, #127	@ 0x7f
 8000d46:	11db      	asrs	r3, r3, #7
 8000d48:	603b      	str	r3, [r7, #0]
				p_mot->timer->CCR3 = 0;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	63da      	str	r2, [r3, #60]	@ 0x3c
				p_mot->timer->CCR4 = duty;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	683a      	ldr	r2, [r7, #0]
 8000d58:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	08006c00 	.word	0x08006c00

08000d68 <start_PWM>:

void start_PWM(TIM_HandleTypeDef* htim){
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	//printf("Starting the PWM");
//	HAL_TIM_PWM_Start(&htim, TIM_CHANNEL_1);
//	HAL_TIM_PWM_Start(&htim, TIM_CHANNEL_2);
//	HAL_TIM_PWM_Start(&htim, TIM_CHANNEL_3);
//	HAL_TIM_PWM_Start(&htim, TIM_CHANNEL_4);
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d82:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc0 <HAL_MspInit+0x44>)
 8000d84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d86:	4a0e      	ldr	r2, [pc, #56]	@ (8000dc0 <HAL_MspInit+0x44>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <HAL_MspInit+0x44>)
 8000d90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9a:	4b09      	ldr	r3, [pc, #36]	@ (8000dc0 <HAL_MspInit+0x44>)
 8000d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d9e:	4a08      	ldr	r2, [pc, #32]	@ (8000dc0 <HAL_MspInit+0x44>)
 8000da0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000da4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000da6:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <HAL_MspInit+0x44>)
 8000da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dae:	603b      	str	r3, [r7, #0]
 8000db0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a13      	ldr	r2, [pc, #76]	@ (8000e20 <HAL_TIM_Base_MspInit+0x5c>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d10c      	bne.n	8000df0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dd6:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <HAL_TIM_Base_MspInit+0x60>)
 8000dd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dda:	4a12      	ldr	r2, [pc, #72]	@ (8000e24 <HAL_TIM_Base_MspInit+0x60>)
 8000ddc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000de0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000de2:	4b10      	ldr	r3, [pc, #64]	@ (8000e24 <HAL_TIM_Base_MspInit+0x60>)
 8000de4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000de6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dee:	e010      	b.n	8000e12 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000df8:	d10b      	bne.n	8000e12 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <HAL_TIM_Base_MspInit+0x60>)
 8000dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dfe:	4a09      	ldr	r2, [pc, #36]	@ (8000e24 <HAL_TIM_Base_MspInit+0x60>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e06:	4b07      	ldr	r3, [pc, #28]	@ (8000e24 <HAL_TIM_Base_MspInit+0x60>)
 8000e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
}
 8000e12:	bf00      	nop
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	40012c00 	.word	0x40012c00
 8000e24:	40021000 	.word	0x40021000

08000e28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b088      	sub	sp, #32
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a12      	ldr	r2, [pc, #72]	@ (8000e90 <HAL_TIM_MspPostInit+0x68>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d11d      	bne.n	8000e86 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	4b12      	ldr	r3, [pc, #72]	@ (8000e94 <HAL_TIM_MspPostInit+0x6c>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4e:	4a11      	ldr	r2, [pc, #68]	@ (8000e94 <HAL_TIM_MspPostInit+0x6c>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e56:	4b0f      	ldr	r3, [pc, #60]	@ (8000e94 <HAL_TIM_MspPostInit+0x6c>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000e62:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000e66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e74:	2301      	movs	r3, #1
 8000e76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e78:	f107 030c 	add.w	r3, r7, #12
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e82:	f000 fb8b 	bl	800159c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e86:	bf00      	nop
 8000e88:	3720      	adds	r7, #32
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40012c00 	.word	0x40012c00
 8000e94:	40021000 	.word	0x40021000

08000e98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b0ac      	sub	sp, #176	@ 0xb0
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	2288      	movs	r2, #136	@ 0x88
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f004 fe8e 	bl	8005bda <memset>
  if(huart->Instance==USART2)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a25      	ldr	r2, [pc, #148]	@ (8000f58 <HAL_UART_MspInit+0xc0>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d143      	bne.n	8000f50 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f001 fb6f 	bl	80025b8 <HAL_RCCEx_PeriphCLKConfig>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ee0:	f7ff fed2 	bl	8000c88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ee4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f5c <HAL_UART_MspInit+0xc4>)
 8000ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ee8:	4a1c      	ldr	r2, [pc, #112]	@ (8000f5c <HAL_UART_MspInit+0xc4>)
 8000eea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eee:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f5c <HAL_UART_MspInit+0xc4>)
 8000ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ef4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efc:	4b17      	ldr	r3, [pc, #92]	@ (8000f5c <HAL_UART_MspInit+0xc4>)
 8000efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f00:	4a16      	ldr	r2, [pc, #88]	@ (8000f5c <HAL_UART_MspInit+0xc4>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f08:	4b14      	ldr	r3, [pc, #80]	@ (8000f5c <HAL_UART_MspInit+0xc4>)
 8000f0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f14:	230c      	movs	r3, #12
 8000f16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f26:	2303      	movs	r3, #3
 8000f28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f2c:	2307      	movs	r3, #7
 8000f2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f32:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f36:	4619      	mov	r1, r3
 8000f38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f3c:	f000 fb2e 	bl	800159c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2100      	movs	r1, #0
 8000f44:	2026      	movs	r0, #38	@ 0x26
 8000f46:	f000 fa74 	bl	8001432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f4a:	2026      	movs	r0, #38	@ 0x26
 8000f4c:	f000 fa8d 	bl	800146a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f50:	bf00      	nop
 8000f52:	37b0      	adds	r7, #176	@ 0xb0
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40004400 	.word	0x40004400
 8000f5c:	40021000 	.word	0x40021000

08000f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <NMI_Handler+0x4>

08000f68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <HardFault_Handler+0x4>

08000f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <MemManage_Handler+0x4>

08000f78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7c:	bf00      	nop
 8000f7e:	e7fd      	b.n	8000f7c <BusFault_Handler+0x4>

08000f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <UsageFault_Handler+0x4>

08000f88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb6:	f000 f941 	bl	800123c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fc4:	4802      	ldr	r0, [pc, #8]	@ (8000fd0 <USART2_IRQHandler+0x10>)
 8000fc6:	f003 f9a9 	bl	800431c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	2000011c 	.word	0x2000011c

08000fd4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	e00a      	b.n	8000ffc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fe6:	f3af 8000 	nop.w
 8000fea:	4601      	mov	r1, r0
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	1c5a      	adds	r2, r3, #1
 8000ff0:	60ba      	str	r2, [r7, #8]
 8000ff2:	b2ca      	uxtb	r2, r1
 8000ff4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	697a      	ldr	r2, [r7, #20]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	429a      	cmp	r2, r3
 8001002:	dbf0      	blt.n	8000fe6 <_read+0x12>
  }

  return len;
 8001004:	687b      	ldr	r3, [r7, #4]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b086      	sub	sp, #24
 8001012:	af00      	add	r7, sp, #0
 8001014:	60f8      	str	r0, [r7, #12]
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
 800101e:	e009      	b.n	8001034 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	1c5a      	adds	r2, r3, #1
 8001024:	60ba      	str	r2, [r7, #8]
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	4618      	mov	r0, r3
 800102a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	3301      	adds	r3, #1
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	697a      	ldr	r2, [r7, #20]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	429a      	cmp	r2, r3
 800103a:	dbf1      	blt.n	8001020 <_write+0x12>
  }
  return len;
 800103c:	687b      	ldr	r3, [r7, #4]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <_close>:

int _close(int file)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800104e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001052:	4618      	mov	r0, r3
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800106e:	605a      	str	r2, [r3, #4]
  return 0;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <_isatty>:

int _isatty(int file)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001086:	2301      	movs	r3, #1
}
 8001088:	4618      	mov	r0, r3
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
	...

080010b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010b8:	4a14      	ldr	r2, [pc, #80]	@ (800110c <_sbrk+0x5c>)
 80010ba:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <_sbrk+0x60>)
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c4:	4b13      	ldr	r3, [pc, #76]	@ (8001114 <_sbrk+0x64>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d102      	bne.n	80010d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010cc:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <_sbrk+0x64>)
 80010ce:	4a12      	ldr	r2, [pc, #72]	@ (8001118 <_sbrk+0x68>)
 80010d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010d2:	4b10      	ldr	r3, [pc, #64]	@ (8001114 <_sbrk+0x64>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d207      	bcs.n	80010f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e0:	f004 fdca 	bl	8005c78 <__errno>
 80010e4:	4603      	mov	r3, r0
 80010e6:	220c      	movs	r2, #12
 80010e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	e009      	b.n	8001104 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f0:	4b08      	ldr	r3, [pc, #32]	@ (8001114 <_sbrk+0x64>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010f6:	4b07      	ldr	r3, [pc, #28]	@ (8001114 <_sbrk+0x64>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	4a05      	ldr	r2, [pc, #20]	@ (8001114 <_sbrk+0x64>)
 8001100:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001102:	68fb      	ldr	r3, [r7, #12]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20018000 	.word	0x20018000
 8001110:	00000400 	.word	0x00000400
 8001114:	20000210 	.word	0x20000210
 8001118:	20000368 	.word	0x20000368

0800111c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001120:	4b06      	ldr	r3, [pc, #24]	@ (800113c <SystemInit+0x20>)
 8001122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001126:	4a05      	ldr	r2, [pc, #20]	@ (800113c <SystemInit+0x20>)
 8001128:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800112c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001140:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001178 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001144:	f7ff ffea 	bl	800111c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001148:	480c      	ldr	r0, [pc, #48]	@ (800117c <LoopForever+0x6>)
  ldr r1, =_edata
 800114a:	490d      	ldr	r1, [pc, #52]	@ (8001180 <LoopForever+0xa>)
  ldr r2, =_sidata
 800114c:	4a0d      	ldr	r2, [pc, #52]	@ (8001184 <LoopForever+0xe>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001150:	e002      	b.n	8001158 <LoopCopyDataInit>

08001152 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001152:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001154:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001156:	3304      	adds	r3, #4

08001158 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001158:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800115c:	d3f9      	bcc.n	8001152 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115e:	4a0a      	ldr	r2, [pc, #40]	@ (8001188 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001160:	4c0a      	ldr	r4, [pc, #40]	@ (800118c <LoopForever+0x16>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001164:	e001      	b.n	800116a <LoopFillZerobss>

08001166 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001166:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001168:	3204      	adds	r2, #4

0800116a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800116c:	d3fb      	bcc.n	8001166 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800116e:	f004 fd89 	bl	8005c84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001172:	f7ff f9f5 	bl	8000560 <main>

08001176 <LoopForever>:

LoopForever:
    b LoopForever
 8001176:	e7fe      	b.n	8001176 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001178:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800117c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001180:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001184:	08006dac 	.word	0x08006dac
  ldr r2, =_sbss
 8001188:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800118c:	20000364 	.word	0x20000364

08001190 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001190:	e7fe      	b.n	8001190 <ADC1_2_IRQHandler>

08001192 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001198:	2300      	movs	r3, #0
 800119a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800119c:	2003      	movs	r0, #3
 800119e:	f000 f93d 	bl	800141c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011a2:	200f      	movs	r0, #15
 80011a4:	f000 f80e 	bl	80011c4 <HAL_InitTick>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d002      	beq.n	80011b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	71fb      	strb	r3, [r7, #7]
 80011b2:	e001      	b.n	80011b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011b4:	f7ff fde2 	bl	8000d7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011b8:	79fb      	ldrb	r3, [r7, #7]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011cc:	2300      	movs	r3, #0
 80011ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011d0:	4b17      	ldr	r3, [pc, #92]	@ (8001230 <HAL_InitTick+0x6c>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d023      	beq.n	8001220 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011d8:	4b16      	ldr	r3, [pc, #88]	@ (8001234 <HAL_InitTick+0x70>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <HAL_InitTick+0x6c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	4619      	mov	r1, r3
 80011e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 f949 	bl	8001486 <HAL_SYSTICK_Config>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10f      	bne.n	800121a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b0f      	cmp	r3, #15
 80011fe:	d809      	bhi.n	8001214 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001200:	2200      	movs	r2, #0
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	f04f 30ff 	mov.w	r0, #4294967295
 8001208:	f000 f913 	bl	8001432 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800120c:	4a0a      	ldr	r2, [pc, #40]	@ (8001238 <HAL_InitTick+0x74>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	e007      	b.n	8001224 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	73fb      	strb	r3, [r7, #15]
 8001218:	e004      	b.n	8001224 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	73fb      	strb	r3, [r7, #15]
 800121e:	e001      	b.n	8001224 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001224:	7bfb      	ldrb	r3, [r7, #15]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000008 	.word	0x20000008
 8001234:	20000000 	.word	0x20000000
 8001238:	20000004 	.word	0x20000004

0800123c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001240:	4b06      	ldr	r3, [pc, #24]	@ (800125c <HAL_IncTick+0x20>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <HAL_IncTick+0x24>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4413      	add	r3, r2
 800124c:	4a04      	ldr	r2, [pc, #16]	@ (8001260 <HAL_IncTick+0x24>)
 800124e:	6013      	str	r3, [r2, #0]
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000008 	.word	0x20000008
 8001260:	20000214 	.word	0x20000214

08001264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return uwTick;
 8001268:	4b03      	ldr	r3, [pc, #12]	@ (8001278 <HAL_GetTick+0x14>)
 800126a:	681b      	ldr	r3, [r3, #0]
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000214 	.word	0x20000214

0800127c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800128c:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <__NVIC_SetPriorityGrouping+0x44>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001298:	4013      	ands	r3, r2
 800129a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ae:	4a04      	ldr	r2, [pc, #16]	@ (80012c0 <__NVIC_SetPriorityGrouping+0x44>)
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	60d3      	str	r3, [r2, #12]
}
 80012b4:	bf00      	nop
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c8:	4b04      	ldr	r3, [pc, #16]	@ (80012dc <__NVIC_GetPriorityGrouping+0x18>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	0a1b      	lsrs	r3, r3, #8
 80012ce:	f003 0307 	and.w	r3, r3, #7
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	db0b      	blt.n	800130a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	f003 021f 	and.w	r2, r3, #31
 80012f8:	4907      	ldr	r1, [pc, #28]	@ (8001318 <__NVIC_EnableIRQ+0x38>)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	095b      	lsrs	r3, r3, #5
 8001300:	2001      	movs	r0, #1
 8001302:	fa00 f202 	lsl.w	r2, r0, r2
 8001306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000e100 	.word	0xe000e100

0800131c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	6039      	str	r1, [r7, #0]
 8001326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132c:	2b00      	cmp	r3, #0
 800132e:	db0a      	blt.n	8001346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	b2da      	uxtb	r2, r3
 8001334:	490c      	ldr	r1, [pc, #48]	@ (8001368 <__NVIC_SetPriority+0x4c>)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	0112      	lsls	r2, r2, #4
 800133c:	b2d2      	uxtb	r2, r2
 800133e:	440b      	add	r3, r1
 8001340:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001344:	e00a      	b.n	800135c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4908      	ldr	r1, [pc, #32]	@ (800136c <__NVIC_SetPriority+0x50>)
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	3b04      	subs	r3, #4
 8001354:	0112      	lsls	r2, r2, #4
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	440b      	add	r3, r1
 800135a:	761a      	strb	r2, [r3, #24]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000e100 	.word	0xe000e100
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001370:	b480      	push	{r7}
 8001372:	b089      	sub	sp, #36	@ 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f1c3 0307 	rsb	r3, r3, #7
 800138a:	2b04      	cmp	r3, #4
 800138c:	bf28      	it	cs
 800138e:	2304      	movcs	r3, #4
 8001390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3304      	adds	r3, #4
 8001396:	2b06      	cmp	r3, #6
 8001398:	d902      	bls.n	80013a0 <NVIC_EncodePriority+0x30>
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3b03      	subs	r3, #3
 800139e:	e000      	b.n	80013a2 <NVIC_EncodePriority+0x32>
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a4:	f04f 32ff 	mov.w	r2, #4294967295
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43da      	mvns	r2, r3
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	401a      	ands	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b8:	f04f 31ff 	mov.w	r1, #4294967295
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	fa01 f303 	lsl.w	r3, r1, r3
 80013c2:	43d9      	mvns	r1, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	4313      	orrs	r3, r2
         );
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3724      	adds	r7, #36	@ 0x24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
	...

080013d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013e8:	d301      	bcc.n	80013ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00f      	b.n	800140e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001418 <SysTick_Config+0x40>)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f6:	210f      	movs	r1, #15
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	f7ff ff8e 	bl	800131c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001400:	4b05      	ldr	r3, [pc, #20]	@ (8001418 <SysTick_Config+0x40>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001406:	4b04      	ldr	r3, [pc, #16]	@ (8001418 <SysTick_Config+0x40>)
 8001408:	2207      	movs	r2, #7
 800140a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	e000e010 	.word	0xe000e010

0800141c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff ff29 	bl	800127c <__NVIC_SetPriorityGrouping>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b086      	sub	sp, #24
 8001436:	af00      	add	r7, sp, #0
 8001438:	4603      	mov	r3, r0
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
 800143e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001444:	f7ff ff3e 	bl	80012c4 <__NVIC_GetPriorityGrouping>
 8001448:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	6978      	ldr	r0, [r7, #20]
 8001450:	f7ff ff8e 	bl	8001370 <NVIC_EncodePriority>
 8001454:	4602      	mov	r2, r0
 8001456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff5d 	bl	800131c <__NVIC_SetPriority>
}
 8001462:	bf00      	nop
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff31 	bl	80012e0 <__NVIC_EnableIRQ>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff ffa2 	bl	80013d8 <SysTick_Config>
 8001494:	4603      	mov	r3, r0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800149e:	b480      	push	{r7}
 80014a0:	b085      	sub	sp, #20
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014a6:	2300      	movs	r3, #0
 80014a8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d008      	beq.n	80014c8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2204      	movs	r2, #4
 80014ba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e022      	b.n	800150e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 020e 	bic.w	r2, r2, #14
 80014d6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 0201 	bic.w	r2, r2, #1
 80014e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ec:	f003 021c 	and.w	r2, r3, #28
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f4:	2101      	movs	r1, #1
 80014f6:	fa01 f202 	lsl.w	r2, r1, r2
 80014fa:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800150c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800150e:	4618      	mov	r0, r3
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d005      	beq.n	800153e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2204      	movs	r2, #4
 8001536:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]
 800153c:	e029      	b.n	8001592 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 020e 	bic.w	r2, r2, #14
 800154c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 0201 	bic.w	r2, r2, #1
 800155c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001562:	f003 021c 	and.w	r2, r3, #28
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156a:	2101      	movs	r1, #1
 800156c:	fa01 f202 	lsl.w	r2, r1, r2
 8001570:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2201      	movs	r2, #1
 8001576:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	4798      	blx	r3
    }
  }
  return status;
 8001592:	7bfb      	ldrb	r3, [r7, #15]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800159c:	b480      	push	{r7}
 800159e:	b087      	sub	sp, #28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015aa:	e17f      	b.n	80018ac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	2101      	movs	r1, #1
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	fa01 f303 	lsl.w	r3, r1, r3
 80015b8:	4013      	ands	r3, r2
 80015ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 8171 	beq.w	80018a6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d005      	beq.n	80015dc <HAL_GPIO_Init+0x40>
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d130      	bne.n	800163e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	2203      	movs	r2, #3
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4313      	orrs	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001612:	2201      	movs	r2, #1
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	091b      	lsrs	r3, r3, #4
 8001628:	f003 0201 	and.w	r2, r3, #1
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4313      	orrs	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	2b03      	cmp	r3, #3
 8001648:	d118      	bne.n	800167c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800164e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001650:	2201      	movs	r2, #1
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	08db      	lsrs	r3, r3, #3
 8001666:	f003 0201 	and.w	r2, r3, #1
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4313      	orrs	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	2b03      	cmp	r3, #3
 8001686:	d017      	beq.n	80016b8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	2203      	movs	r2, #3
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4013      	ands	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 0303 	and.w	r3, r3, #3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d123      	bne.n	800170c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	08da      	lsrs	r2, r3, #3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3208      	adds	r2, #8
 80016cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	220f      	movs	r2, #15
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	691a      	ldr	r2, [r3, #16]
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	08da      	lsrs	r2, r3, #3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3208      	adds	r2, #8
 8001706:	6939      	ldr	r1, [r7, #16]
 8001708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	2203      	movs	r2, #3
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4013      	ands	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 0203 	and.w	r2, r3, #3
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4313      	orrs	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 80ac 	beq.w	80018a6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174e:	4b5f      	ldr	r3, [pc, #380]	@ (80018cc <HAL_GPIO_Init+0x330>)
 8001750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001752:	4a5e      	ldr	r2, [pc, #376]	@ (80018cc <HAL_GPIO_Init+0x330>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6613      	str	r3, [r2, #96]	@ 0x60
 800175a:	4b5c      	ldr	r3, [pc, #368]	@ (80018cc <HAL_GPIO_Init+0x330>)
 800175c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001766:	4a5a      	ldr	r2, [pc, #360]	@ (80018d0 <HAL_GPIO_Init+0x334>)
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	089b      	lsrs	r3, r3, #2
 800176c:	3302      	adds	r3, #2
 800176e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001772:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	220f      	movs	r2, #15
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4013      	ands	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001790:	d025      	beq.n	80017de <HAL_GPIO_Init+0x242>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a4f      	ldr	r2, [pc, #316]	@ (80018d4 <HAL_GPIO_Init+0x338>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d01f      	beq.n	80017da <HAL_GPIO_Init+0x23e>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a4e      	ldr	r2, [pc, #312]	@ (80018d8 <HAL_GPIO_Init+0x33c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d019      	beq.n	80017d6 <HAL_GPIO_Init+0x23a>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a4d      	ldr	r2, [pc, #308]	@ (80018dc <HAL_GPIO_Init+0x340>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d013      	beq.n	80017d2 <HAL_GPIO_Init+0x236>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a4c      	ldr	r2, [pc, #304]	@ (80018e0 <HAL_GPIO_Init+0x344>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d00d      	beq.n	80017ce <HAL_GPIO_Init+0x232>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a4b      	ldr	r2, [pc, #300]	@ (80018e4 <HAL_GPIO_Init+0x348>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d007      	beq.n	80017ca <HAL_GPIO_Init+0x22e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a4a      	ldr	r2, [pc, #296]	@ (80018e8 <HAL_GPIO_Init+0x34c>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d101      	bne.n	80017c6 <HAL_GPIO_Init+0x22a>
 80017c2:	2306      	movs	r3, #6
 80017c4:	e00c      	b.n	80017e0 <HAL_GPIO_Init+0x244>
 80017c6:	2307      	movs	r3, #7
 80017c8:	e00a      	b.n	80017e0 <HAL_GPIO_Init+0x244>
 80017ca:	2305      	movs	r3, #5
 80017cc:	e008      	b.n	80017e0 <HAL_GPIO_Init+0x244>
 80017ce:	2304      	movs	r3, #4
 80017d0:	e006      	b.n	80017e0 <HAL_GPIO_Init+0x244>
 80017d2:	2303      	movs	r3, #3
 80017d4:	e004      	b.n	80017e0 <HAL_GPIO_Init+0x244>
 80017d6:	2302      	movs	r3, #2
 80017d8:	e002      	b.n	80017e0 <HAL_GPIO_Init+0x244>
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <HAL_GPIO_Init+0x244>
 80017de:	2300      	movs	r3, #0
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	f002 0203 	and.w	r2, r2, #3
 80017e6:	0092      	lsls	r2, r2, #2
 80017e8:	4093      	lsls	r3, r2
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017f0:	4937      	ldr	r1, [pc, #220]	@ (80018d0 <HAL_GPIO_Init+0x334>)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	089b      	lsrs	r3, r3, #2
 80017f6:	3302      	adds	r3, #2
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017fe:	4b3b      	ldr	r3, [pc, #236]	@ (80018ec <HAL_GPIO_Init+0x350>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	43db      	mvns	r3, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4013      	ands	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4313      	orrs	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001822:	4a32      	ldr	r2, [pc, #200]	@ (80018ec <HAL_GPIO_Init+0x350>)
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001828:	4b30      	ldr	r3, [pc, #192]	@ (80018ec <HAL_GPIO_Init+0x350>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	43db      	mvns	r3, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4313      	orrs	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800184c:	4a27      	ldr	r2, [pc, #156]	@ (80018ec <HAL_GPIO_Init+0x350>)
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001852:	4b26      	ldr	r3, [pc, #152]	@ (80018ec <HAL_GPIO_Init+0x350>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4313      	orrs	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001876:	4a1d      	ldr	r2, [pc, #116]	@ (80018ec <HAL_GPIO_Init+0x350>)
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800187c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ec <HAL_GPIO_Init+0x350>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	43db      	mvns	r3, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4313      	orrs	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018a0:	4a12      	ldr	r2, [pc, #72]	@ (80018ec <HAL_GPIO_Init+0x350>)
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	3301      	adds	r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	fa22 f303 	lsr.w	r3, r2, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f47f ae78 	bne.w	80015ac <HAL_GPIO_Init+0x10>
  }
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	371c      	adds	r7, #28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40010000 	.word	0x40010000
 80018d4:	48000400 	.word	0x48000400
 80018d8:	48000800 	.word	0x48000800
 80018dc:	48000c00 	.word	0x48000c00
 80018e0:	48001000 	.word	0x48001000
 80018e4:	48001400 	.word	0x48001400
 80018e8:	48001800 	.word	0x48001800
 80018ec:	40010400 	.word	0x40010400

080018f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80018f4:	4b04      	ldr	r3, [pc, #16]	@ (8001908 <HAL_PWREx_GetVoltageRange+0x18>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	40007000 	.word	0x40007000

0800190c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800191a:	d130      	bne.n	800197e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800191c:	4b23      	ldr	r3, [pc, #140]	@ (80019ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001928:	d038      	beq.n	800199c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800192a:	4b20      	ldr	r3, [pc, #128]	@ (80019ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001932:	4a1e      	ldr	r2, [pc, #120]	@ (80019ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001934:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001938:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800193a:	4b1d      	ldr	r3, [pc, #116]	@ (80019b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2232      	movs	r2, #50	@ 0x32
 8001940:	fb02 f303 	mul.w	r3, r2, r3
 8001944:	4a1b      	ldr	r2, [pc, #108]	@ (80019b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001946:	fba2 2303 	umull	r2, r3, r2, r3
 800194a:	0c9b      	lsrs	r3, r3, #18
 800194c:	3301      	adds	r3, #1
 800194e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001950:	e002      	b.n	8001958 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	3b01      	subs	r3, #1
 8001956:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001958:	4b14      	ldr	r3, [pc, #80]	@ (80019ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001960:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001964:	d102      	bne.n	800196c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1f2      	bne.n	8001952 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800196c:	4b0f      	ldr	r3, [pc, #60]	@ (80019ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001974:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001978:	d110      	bne.n	800199c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e00f      	b.n	800199e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800197e:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001986:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800198a:	d007      	beq.n	800199c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800198c:	4b07      	ldr	r3, [pc, #28]	@ (80019ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001994:	4a05      	ldr	r2, [pc, #20]	@ (80019ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001996:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800199a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40007000 	.word	0x40007000
 80019b0:	20000000 	.word	0x20000000
 80019b4:	431bde83 	.word	0x431bde83

080019b8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e3ca      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ca:	4b97      	ldr	r3, [pc, #604]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 030c 	and.w	r3, r3, #12
 80019d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019d4:	4b94      	ldr	r3, [pc, #592]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	f003 0303 	and.w	r3, r3, #3
 80019dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0310 	and.w	r3, r3, #16
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 80e4 	beq.w	8001bb4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d007      	beq.n	8001a02 <HAL_RCC_OscConfig+0x4a>
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	2b0c      	cmp	r3, #12
 80019f6:	f040 808b 	bne.w	8001b10 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	f040 8087 	bne.w	8001b10 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a02:	4b89      	ldr	r3, [pc, #548]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d005      	beq.n	8001a1a <HAL_RCC_OscConfig+0x62>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e3a2      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a1a      	ldr	r2, [r3, #32]
 8001a1e:	4b82      	ldr	r3, [pc, #520]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d004      	beq.n	8001a34 <HAL_RCC_OscConfig+0x7c>
 8001a2a:	4b7f      	ldr	r3, [pc, #508]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a32:	e005      	b.n	8001a40 <HAL_RCC_OscConfig+0x88>
 8001a34:	4b7c      	ldr	r3, [pc, #496]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a3a:	091b      	lsrs	r3, r3, #4
 8001a3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d223      	bcs.n	8001a8c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f000 fd55 	bl	80024f8 <RCC_SetFlashLatencyFromMSIRange>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e383      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a58:	4b73      	ldr	r3, [pc, #460]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a72      	ldr	r2, [pc, #456]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001a5e:	f043 0308 	orr.w	r3, r3, #8
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	4b70      	ldr	r3, [pc, #448]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	496d      	ldr	r1, [pc, #436]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a76:	4b6c      	ldr	r3, [pc, #432]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	021b      	lsls	r3, r3, #8
 8001a84:	4968      	ldr	r1, [pc, #416]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	604b      	str	r3, [r1, #4]
 8001a8a:	e025      	b.n	8001ad8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a8c:	4b66      	ldr	r3, [pc, #408]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a65      	ldr	r2, [pc, #404]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001a92:	f043 0308 	orr.w	r3, r3, #8
 8001a96:	6013      	str	r3, [r2, #0]
 8001a98:	4b63      	ldr	r3, [pc, #396]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	4960      	ldr	r1, [pc, #384]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001aaa:	4b5f      	ldr	r3, [pc, #380]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	021b      	lsls	r3, r3, #8
 8001ab8:	495b      	ldr	r1, [pc, #364]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d109      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f000 fd15 	bl	80024f8 <RCC_SetFlashLatencyFromMSIRange>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e343      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ad8:	f000 fc4a 	bl	8002370 <HAL_RCC_GetSysClockFreq>
 8001adc:	4602      	mov	r2, r0
 8001ade:	4b52      	ldr	r3, [pc, #328]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	091b      	lsrs	r3, r3, #4
 8001ae4:	f003 030f 	and.w	r3, r3, #15
 8001ae8:	4950      	ldr	r1, [pc, #320]	@ (8001c2c <HAL_RCC_OscConfig+0x274>)
 8001aea:	5ccb      	ldrb	r3, [r1, r3]
 8001aec:	f003 031f 	and.w	r3, r3, #31
 8001af0:	fa22 f303 	lsr.w	r3, r2, r3
 8001af4:	4a4e      	ldr	r2, [pc, #312]	@ (8001c30 <HAL_RCC_OscConfig+0x278>)
 8001af6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001af8:	4b4e      	ldr	r3, [pc, #312]	@ (8001c34 <HAL_RCC_OscConfig+0x27c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fb61 	bl	80011c4 <HAL_InitTick>
 8001b02:	4603      	mov	r3, r0
 8001b04:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d052      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
 8001b0e:	e327      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d032      	beq.n	8001b7e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b18:	4b43      	ldr	r3, [pc, #268]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a42      	ldr	r2, [pc, #264]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b24:	f7ff fb9e 	bl	8001264 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fb9a 	bl	8001264 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e310      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b3e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b4a:	4b37      	ldr	r3, [pc, #220]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a36      	ldr	r2, [pc, #216]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001b50:	f043 0308 	orr.w	r3, r3, #8
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	4b34      	ldr	r3, [pc, #208]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	4931      	ldr	r1, [pc, #196]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b68:	4b2f      	ldr	r3, [pc, #188]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	021b      	lsls	r3, r3, #8
 8001b76:	492c      	ldr	r1, [pc, #176]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	604b      	str	r3, [r1, #4]
 8001b7c:	e01a      	b.n	8001bb4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a29      	ldr	r2, [pc, #164]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001b84:	f023 0301 	bic.w	r3, r3, #1
 8001b88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b8a:	f7ff fb6b 	bl	8001264 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b92:	f7ff fb67 	bl	8001264 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e2dd      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ba4:	4b20      	ldr	r3, [pc, #128]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1f0      	bne.n	8001b92 <HAL_RCC_OscConfig+0x1da>
 8001bb0:	e000      	b.n	8001bb4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bb2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d074      	beq.n	8001caa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	2b08      	cmp	r3, #8
 8001bc4:	d005      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x21a>
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	2b0c      	cmp	r3, #12
 8001bca:	d10e      	bne.n	8001bea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	d10b      	bne.n	8001bea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd2:	4b15      	ldr	r3, [pc, #84]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d064      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x2f0>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d160      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e2ba      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bf2:	d106      	bne.n	8001c02 <HAL_RCC_OscConfig+0x24a>
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a0b      	ldr	r2, [pc, #44]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001bfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	e026      	b.n	8001c50 <HAL_RCC_OscConfig+0x298>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c0a:	d115      	bne.n	8001c38 <HAL_RCC_OscConfig+0x280>
 8001c0c:	4b06      	ldr	r3, [pc, #24]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a05      	ldr	r2, [pc, #20]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001c12:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	4b03      	ldr	r3, [pc, #12]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a02      	ldr	r2, [pc, #8]	@ (8001c28 <HAL_RCC_OscConfig+0x270>)
 8001c1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	e014      	b.n	8001c50 <HAL_RCC_OscConfig+0x298>
 8001c26:	bf00      	nop
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	08006c20 	.word	0x08006c20
 8001c30:	20000000 	.word	0x20000000
 8001c34:	20000004 	.word	0x20000004
 8001c38:	4ba0      	ldr	r3, [pc, #640]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a9f      	ldr	r2, [pc, #636]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001c3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	4b9d      	ldr	r3, [pc, #628]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a9c      	ldr	r2, [pc, #624]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001c4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d013      	beq.n	8001c80 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c58:	f7ff fb04 	bl	8001264 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c60:	f7ff fb00 	bl	8001264 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b64      	cmp	r3, #100	@ 0x64
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e276      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c72:	4b92      	ldr	r3, [pc, #584]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0f0      	beq.n	8001c60 <HAL_RCC_OscConfig+0x2a8>
 8001c7e:	e014      	b.n	8001caa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7ff faf0 	bl	8001264 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c88:	f7ff faec 	bl	8001264 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b64      	cmp	r3, #100	@ 0x64
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e262      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c9a:	4b88      	ldr	r3, [pc, #544]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0x2d0>
 8001ca6:	e000      	b.n	8001caa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d060      	beq.n	8001d78 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	2b04      	cmp	r3, #4
 8001cba:	d005      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x310>
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	2b0c      	cmp	r3, #12
 8001cc0:	d119      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d116      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cc8:	4b7c      	ldr	r3, [pc, #496]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d005      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x328>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e23f      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce0:	4b76      	ldr	r3, [pc, #472]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	061b      	lsls	r3, r3, #24
 8001cee:	4973      	ldr	r1, [pc, #460]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cf4:	e040      	b.n	8001d78 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d023      	beq.n	8001d46 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cfe:	4b6f      	ldr	r3, [pc, #444]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a6e      	ldr	r2, [pc, #440]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001d04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0a:	f7ff faab 	bl	8001264 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d12:	f7ff faa7 	bl	8001264 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e21d      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d24:	4b65      	ldr	r3, [pc, #404]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0f0      	beq.n	8001d12 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d30:	4b62      	ldr	r3, [pc, #392]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	061b      	lsls	r3, r3, #24
 8001d3e:	495f      	ldr	r1, [pc, #380]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	604b      	str	r3, [r1, #4]
 8001d44:	e018      	b.n	8001d78 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d46:	4b5d      	ldr	r3, [pc, #372]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a5c      	ldr	r2, [pc, #368]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001d4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d52:	f7ff fa87 	bl	8001264 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d5a:	f7ff fa83 	bl	8001264 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e1f9      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d6c:	4b53      	ldr	r3, [pc, #332]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1f0      	bne.n	8001d5a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d03c      	beq.n	8001dfe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d01c      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d8c:	4b4b      	ldr	r3, [pc, #300]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d92:	4a4a      	ldr	r2, [pc, #296]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d9c:	f7ff fa62 	bl	8001264 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001da4:	f7ff fa5e 	bl	8001264 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e1d4      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001db6:	4b41      	ldr	r3, [pc, #260]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001db8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0ef      	beq.n	8001da4 <HAL_RCC_OscConfig+0x3ec>
 8001dc4:	e01b      	b.n	8001dfe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dc6:	4b3d      	ldr	r3, [pc, #244]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dcc:	4a3b      	ldr	r2, [pc, #236]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001dce:	f023 0301 	bic.w	r3, r3, #1
 8001dd2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd6:	f7ff fa45 	bl	8001264 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dde:	f7ff fa41 	bl	8001264 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e1b7      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001df0:	4b32      	ldr	r3, [pc, #200]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1ef      	bne.n	8001dde <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0304 	and.w	r3, r3, #4
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 80a6 	beq.w	8001f58 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e10:	4b2a      	ldr	r3, [pc, #168]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d10d      	bne.n	8001e38 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e1c:	4b27      	ldr	r3, [pc, #156]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e20:	4a26      	ldr	r2, [pc, #152]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001e22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e26:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e28:	4b24      	ldr	r3, [pc, #144]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e34:	2301      	movs	r3, #1
 8001e36:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e38:	4b21      	ldr	r3, [pc, #132]	@ (8001ec0 <HAL_RCC_OscConfig+0x508>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d118      	bne.n	8001e76 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e44:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec0 <HAL_RCC_OscConfig+0x508>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a1d      	ldr	r2, [pc, #116]	@ (8001ec0 <HAL_RCC_OscConfig+0x508>)
 8001e4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e50:	f7ff fa08 	bl	8001264 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e58:	f7ff fa04 	bl	8001264 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e17a      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e6a:	4b15      	ldr	r3, [pc, #84]	@ (8001ec0 <HAL_RCC_OscConfig+0x508>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0f0      	beq.n	8001e58 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d108      	bne.n	8001e90 <HAL_RCC_OscConfig+0x4d8>
 8001e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e84:	4a0d      	ldr	r2, [pc, #52]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e8e:	e029      	b.n	8001ee4 <HAL_RCC_OscConfig+0x52c>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	2b05      	cmp	r3, #5
 8001e96:	d115      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x50c>
 8001e98:	4b08      	ldr	r3, [pc, #32]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e9e:	4a07      	ldr	r2, [pc, #28]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001ea0:	f043 0304 	orr.w	r3, r3, #4
 8001ea4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ea8:	4b04      	ldr	r3, [pc, #16]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eae:	4a03      	ldr	r2, [pc, #12]	@ (8001ebc <HAL_RCC_OscConfig+0x504>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001eb8:	e014      	b.n	8001ee4 <HAL_RCC_OscConfig+0x52c>
 8001eba:	bf00      	nop
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40007000 	.word	0x40007000
 8001ec4:	4b9c      	ldr	r3, [pc, #624]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8001ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eca:	4a9b      	ldr	r2, [pc, #620]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8001ecc:	f023 0301 	bic.w	r3, r3, #1
 8001ed0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ed4:	4b98      	ldr	r3, [pc, #608]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8001ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eda:	4a97      	ldr	r2, [pc, #604]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8001edc:	f023 0304 	bic.w	r3, r3, #4
 8001ee0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d016      	beq.n	8001f1a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eec:	f7ff f9ba 	bl	8001264 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ef2:	e00a      	b.n	8001f0a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef4:	f7ff f9b6 	bl	8001264 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e12a      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f0a:	4b8b      	ldr	r3, [pc, #556]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8001f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0ed      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x53c>
 8001f18:	e015      	b.n	8001f46 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1a:	f7ff f9a3 	bl	8001264 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f20:	e00a      	b.n	8001f38 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f22:	f7ff f99f 	bl	8001264 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e113      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f38:	4b7f      	ldr	r3, [pc, #508]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8001f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1ed      	bne.n	8001f22 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f46:	7ffb      	ldrb	r3, [r7, #31]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d105      	bne.n	8001f58 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f4c:	4b7a      	ldr	r3, [pc, #488]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8001f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f50:	4a79      	ldr	r2, [pc, #484]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8001f52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f56:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 80fe 	beq.w	800215e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	f040 80d0 	bne.w	800210c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f6c:	4b72      	ldr	r3, [pc, #456]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	f003 0203 	and.w	r2, r3, #3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d130      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d127      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d11f      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001fac:	2a07      	cmp	r2, #7
 8001fae:	bf14      	ite	ne
 8001fb0:	2201      	movne	r2, #1
 8001fb2:	2200      	moveq	r2, #0
 8001fb4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d113      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fc4:	085b      	lsrs	r3, r3, #1
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d109      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd8:	085b      	lsrs	r3, r3, #1
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d06e      	beq.n	80020c0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	2b0c      	cmp	r3, #12
 8001fe6:	d069      	beq.n	80020bc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fe8:	4b53      	ldr	r3, [pc, #332]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d105      	bne.n	8002000 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ff4:	4b50      	ldr	r3, [pc, #320]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0ad      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002004:	4b4c      	ldr	r3, [pc, #304]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a4b      	ldr	r2, [pc, #300]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 800200a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800200e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002010:	f7ff f928 	bl	8001264 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002018:	f7ff f924 	bl	8001264 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e09a      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800202a:	4b43      	ldr	r3, [pc, #268]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f0      	bne.n	8002018 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002036:	4b40      	ldr	r3, [pc, #256]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	4b40      	ldr	r3, [pc, #256]	@ (800213c <HAL_RCC_OscConfig+0x784>)
 800203c:	4013      	ands	r3, r2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002046:	3a01      	subs	r2, #1
 8002048:	0112      	lsls	r2, r2, #4
 800204a:	4311      	orrs	r1, r2
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002050:	0212      	lsls	r2, r2, #8
 8002052:	4311      	orrs	r1, r2
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002058:	0852      	lsrs	r2, r2, #1
 800205a:	3a01      	subs	r2, #1
 800205c:	0552      	lsls	r2, r2, #21
 800205e:	4311      	orrs	r1, r2
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002064:	0852      	lsrs	r2, r2, #1
 8002066:	3a01      	subs	r2, #1
 8002068:	0652      	lsls	r2, r2, #25
 800206a:	4311      	orrs	r1, r2
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002070:	0912      	lsrs	r2, r2, #4
 8002072:	0452      	lsls	r2, r2, #17
 8002074:	430a      	orrs	r2, r1
 8002076:	4930      	ldr	r1, [pc, #192]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8002078:	4313      	orrs	r3, r2
 800207a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800207c:	4b2e      	ldr	r3, [pc, #184]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a2d      	ldr	r2, [pc, #180]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8002082:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002086:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002088:	4b2b      	ldr	r3, [pc, #172]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	4a2a      	ldr	r2, [pc, #168]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 800208e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002092:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002094:	f7ff f8e6 	bl	8001264 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800209c:	f7ff f8e2 	bl	8001264 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e058      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ae:	4b22      	ldr	r3, [pc, #136]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020ba:	e050      	b.n	800215e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e04f      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d148      	bne.n	800215e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a19      	ldr	r2, [pc, #100]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 80020d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020d8:	4b17      	ldr	r3, [pc, #92]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	4a16      	ldr	r2, [pc, #88]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 80020de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020e4:	f7ff f8be 	bl	8001264 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ec:	f7ff f8ba 	bl	8001264 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e030      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f0      	beq.n	80020ec <HAL_RCC_OscConfig+0x734>
 800210a:	e028      	b.n	800215e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	2b0c      	cmp	r3, #12
 8002110:	d023      	beq.n	800215a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002112:	4b09      	ldr	r3, [pc, #36]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a08      	ldr	r2, [pc, #32]	@ (8002138 <HAL_RCC_OscConfig+0x780>)
 8002118:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800211c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211e:	f7ff f8a1 	bl	8001264 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002124:	e00c      	b.n	8002140 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002126:	f7ff f89d 	bl	8001264 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d905      	bls.n	8002140 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e013      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
 8002138:	40021000 	.word	0x40021000
 800213c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002140:	4b09      	ldr	r3, [pc, #36]	@ (8002168 <HAL_RCC_OscConfig+0x7b0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1ec      	bne.n	8002126 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800214c:	4b06      	ldr	r3, [pc, #24]	@ (8002168 <HAL_RCC_OscConfig+0x7b0>)
 800214e:	68da      	ldr	r2, [r3, #12]
 8002150:	4905      	ldr	r1, [pc, #20]	@ (8002168 <HAL_RCC_OscConfig+0x7b0>)
 8002152:	4b06      	ldr	r3, [pc, #24]	@ (800216c <HAL_RCC_OscConfig+0x7b4>)
 8002154:	4013      	ands	r3, r2
 8002156:	60cb      	str	r3, [r1, #12]
 8002158:	e001      	b.n	800215e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3720      	adds	r7, #32
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40021000 	.word	0x40021000
 800216c:	feeefffc 	.word	0xfeeefffc

08002170 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e0e7      	b.n	8002354 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002184:	4b75      	ldr	r3, [pc, #468]	@ (800235c <HAL_RCC_ClockConfig+0x1ec>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	429a      	cmp	r2, r3
 8002190:	d910      	bls.n	80021b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002192:	4b72      	ldr	r3, [pc, #456]	@ (800235c <HAL_RCC_ClockConfig+0x1ec>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f023 0207 	bic.w	r2, r3, #7
 800219a:	4970      	ldr	r1, [pc, #448]	@ (800235c <HAL_RCC_ClockConfig+0x1ec>)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	4313      	orrs	r3, r2
 80021a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a2:	4b6e      	ldr	r3, [pc, #440]	@ (800235c <HAL_RCC_ClockConfig+0x1ec>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d001      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0cf      	b.n	8002354 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d010      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	4b66      	ldr	r3, [pc, #408]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d908      	bls.n	80021e2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d0:	4b63      	ldr	r3, [pc, #396]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	4960      	ldr	r1, [pc, #384]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d04c      	beq.n	8002288 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d107      	bne.n	8002206 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f6:	4b5a      	ldr	r3, [pc, #360]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d121      	bne.n	8002246 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e0a6      	b.n	8002354 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b02      	cmp	r3, #2
 800220c:	d107      	bne.n	800221e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800220e:	4b54      	ldr	r3, [pc, #336]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d115      	bne.n	8002246 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e09a      	b.n	8002354 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d107      	bne.n	8002236 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002226:	4b4e      	ldr	r3, [pc, #312]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d109      	bne.n	8002246 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e08e      	b.n	8002354 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002236:	4b4a      	ldr	r3, [pc, #296]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e086      	b.n	8002354 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002246:	4b46      	ldr	r3, [pc, #280]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f023 0203 	bic.w	r2, r3, #3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	4943      	ldr	r1, [pc, #268]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 8002254:	4313      	orrs	r3, r2
 8002256:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002258:	f7ff f804 	bl	8001264 <HAL_GetTick>
 800225c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225e:	e00a      	b.n	8002276 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002260:	f7ff f800 	bl	8001264 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800226e:	4293      	cmp	r3, r2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e06e      	b.n	8002354 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002276:	4b3a      	ldr	r3, [pc, #232]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 020c 	and.w	r2, r3, #12
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	429a      	cmp	r2, r3
 8002286:	d1eb      	bne.n	8002260 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d010      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	4b31      	ldr	r3, [pc, #196]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d208      	bcs.n	80022b6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	492b      	ldr	r1, [pc, #172]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022b6:	4b29      	ldr	r3, [pc, #164]	@ (800235c <HAL_RCC_ClockConfig+0x1ec>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d210      	bcs.n	80022e6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c4:	4b25      	ldr	r3, [pc, #148]	@ (800235c <HAL_RCC_ClockConfig+0x1ec>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f023 0207 	bic.w	r2, r3, #7
 80022cc:	4923      	ldr	r1, [pc, #140]	@ (800235c <HAL_RCC_ClockConfig+0x1ec>)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d4:	4b21      	ldr	r3, [pc, #132]	@ (800235c <HAL_RCC_ClockConfig+0x1ec>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d001      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e036      	b.n	8002354 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0304 	and.w	r3, r3, #4
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d008      	beq.n	8002304 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	4918      	ldr	r1, [pc, #96]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 8002300:	4313      	orrs	r3, r2
 8002302:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0308 	and.w	r3, r3, #8
 800230c:	2b00      	cmp	r3, #0
 800230e:	d009      	beq.n	8002324 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002310:	4b13      	ldr	r3, [pc, #76]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	4910      	ldr	r1, [pc, #64]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 8002320:	4313      	orrs	r3, r2
 8002322:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002324:	f000 f824 	bl	8002370 <HAL_RCC_GetSysClockFreq>
 8002328:	4602      	mov	r2, r0
 800232a:	4b0d      	ldr	r3, [pc, #52]	@ (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	091b      	lsrs	r3, r3, #4
 8002330:	f003 030f 	and.w	r3, r3, #15
 8002334:	490b      	ldr	r1, [pc, #44]	@ (8002364 <HAL_RCC_ClockConfig+0x1f4>)
 8002336:	5ccb      	ldrb	r3, [r1, r3]
 8002338:	f003 031f 	and.w	r3, r3, #31
 800233c:	fa22 f303 	lsr.w	r3, r2, r3
 8002340:	4a09      	ldr	r2, [pc, #36]	@ (8002368 <HAL_RCC_ClockConfig+0x1f8>)
 8002342:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002344:	4b09      	ldr	r3, [pc, #36]	@ (800236c <HAL_RCC_ClockConfig+0x1fc>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f7fe ff3b 	bl	80011c4 <HAL_InitTick>
 800234e:	4603      	mov	r3, r0
 8002350:	72fb      	strb	r3, [r7, #11]

  return status;
 8002352:	7afb      	ldrb	r3, [r7, #11]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40022000 	.word	0x40022000
 8002360:	40021000 	.word	0x40021000
 8002364:	08006c20 	.word	0x08006c20
 8002368:	20000000 	.word	0x20000000
 800236c:	20000004 	.word	0x20000004

08002370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002370:	b480      	push	{r7}
 8002372:	b089      	sub	sp, #36	@ 0x24
 8002374:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
 800237a:	2300      	movs	r3, #0
 800237c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800237e:	4b3e      	ldr	r3, [pc, #248]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x108>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 030c 	and.w	r3, r3, #12
 8002386:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002388:	4b3b      	ldr	r3, [pc, #236]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x108>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f003 0303 	and.w	r3, r3, #3
 8002390:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <HAL_RCC_GetSysClockFreq+0x34>
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	2b0c      	cmp	r3, #12
 800239c:	d121      	bne.n	80023e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d11e      	bne.n	80023e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023a4:	4b34      	ldr	r3, [pc, #208]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x108>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0308 	and.w	r3, r3, #8
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d107      	bne.n	80023c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023b0:	4b31      	ldr	r3, [pc, #196]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x108>)
 80023b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023b6:	0a1b      	lsrs	r3, r3, #8
 80023b8:	f003 030f 	and.w	r3, r3, #15
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	e005      	b.n	80023cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x108>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	091b      	lsrs	r3, r3, #4
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023cc:	4a2b      	ldr	r2, [pc, #172]	@ (800247c <HAL_RCC_GetSysClockFreq+0x10c>)
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10d      	bne.n	80023f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023e0:	e00a      	b.n	80023f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d102      	bne.n	80023ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023e8:	4b25      	ldr	r3, [pc, #148]	@ (8002480 <HAL_RCC_GetSysClockFreq+0x110>)
 80023ea:	61bb      	str	r3, [r7, #24]
 80023ec:	e004      	b.n	80023f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d101      	bne.n	80023f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023f4:	4b23      	ldr	r3, [pc, #140]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x114>)
 80023f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	2b0c      	cmp	r3, #12
 80023fc:	d134      	bne.n	8002468 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x108>)
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d003      	beq.n	8002416 <HAL_RCC_GetSysClockFreq+0xa6>
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b03      	cmp	r3, #3
 8002412:	d003      	beq.n	800241c <HAL_RCC_GetSysClockFreq+0xac>
 8002414:	e005      	b.n	8002422 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002416:	4b1a      	ldr	r3, [pc, #104]	@ (8002480 <HAL_RCC_GetSysClockFreq+0x110>)
 8002418:	617b      	str	r3, [r7, #20]
      break;
 800241a:	e005      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800241c:	4b19      	ldr	r3, [pc, #100]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x114>)
 800241e:	617b      	str	r3, [r7, #20]
      break;
 8002420:	e002      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	617b      	str	r3, [r7, #20]
      break;
 8002426:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002428:	4b13      	ldr	r3, [pc, #76]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x108>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	091b      	lsrs	r3, r3, #4
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	3301      	adds	r3, #1
 8002434:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002436:	4b10      	ldr	r3, [pc, #64]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x108>)
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	0a1b      	lsrs	r3, r3, #8
 800243c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	fb03 f202 	mul.w	r2, r3, r2
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	fbb2 f3f3 	udiv	r3, r2, r3
 800244c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800244e:	4b0a      	ldr	r3, [pc, #40]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x108>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	0e5b      	lsrs	r3, r3, #25
 8002454:	f003 0303 	and.w	r3, r3, #3
 8002458:	3301      	adds	r3, #1
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	fbb2 f3f3 	udiv	r3, r2, r3
 8002466:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002468:	69bb      	ldr	r3, [r7, #24]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3724      	adds	r7, #36	@ 0x24
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	40021000 	.word	0x40021000
 800247c:	08006c38 	.word	0x08006c38
 8002480:	00f42400 	.word	0x00f42400
 8002484:	007a1200 	.word	0x007a1200

08002488 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800248c:	4b03      	ldr	r3, [pc, #12]	@ (800249c <HAL_RCC_GetHCLKFreq+0x14>)
 800248e:	681b      	ldr	r3, [r3, #0]
}
 8002490:	4618      	mov	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	20000000 	.word	0x20000000

080024a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024a4:	f7ff fff0 	bl	8002488 <HAL_RCC_GetHCLKFreq>
 80024a8:	4602      	mov	r2, r0
 80024aa:	4b06      	ldr	r3, [pc, #24]	@ (80024c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	0a1b      	lsrs	r3, r3, #8
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	4904      	ldr	r1, [pc, #16]	@ (80024c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024b6:	5ccb      	ldrb	r3, [r1, r3]
 80024b8:	f003 031f 	and.w	r3, r3, #31
 80024bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40021000 	.word	0x40021000
 80024c8:	08006c30 	.word	0x08006c30

080024cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024d0:	f7ff ffda 	bl	8002488 <HAL_RCC_GetHCLKFreq>
 80024d4:	4602      	mov	r2, r0
 80024d6:	4b06      	ldr	r3, [pc, #24]	@ (80024f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	0adb      	lsrs	r3, r3, #11
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	4904      	ldr	r1, [pc, #16]	@ (80024f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024e2:	5ccb      	ldrb	r3, [r1, r3]
 80024e4:	f003 031f 	and.w	r3, r3, #31
 80024e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40021000 	.word	0x40021000
 80024f4:	08006c30 	.word	0x08006c30

080024f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002500:	2300      	movs	r3, #0
 8002502:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002504:	4b2a      	ldr	r3, [pc, #168]	@ (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002508:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002510:	f7ff f9ee 	bl	80018f0 <HAL_PWREx_GetVoltageRange>
 8002514:	6178      	str	r0, [r7, #20]
 8002516:	e014      	b.n	8002542 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002518:	4b25      	ldr	r3, [pc, #148]	@ (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800251a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800251c:	4a24      	ldr	r2, [pc, #144]	@ (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800251e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002522:	6593      	str	r3, [r2, #88]	@ 0x58
 8002524:	4b22      	ldr	r3, [pc, #136]	@ (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002528:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002530:	f7ff f9de 	bl	80018f0 <HAL_PWREx_GetVoltageRange>
 8002534:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002536:	4b1e      	ldr	r3, [pc, #120]	@ (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800253a:	4a1d      	ldr	r2, [pc, #116]	@ (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800253c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002540:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002548:	d10b      	bne.n	8002562 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b80      	cmp	r3, #128	@ 0x80
 800254e:	d919      	bls.n	8002584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2ba0      	cmp	r3, #160	@ 0xa0
 8002554:	d902      	bls.n	800255c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002556:	2302      	movs	r3, #2
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	e013      	b.n	8002584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800255c:	2301      	movs	r3, #1
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	e010      	b.n	8002584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b80      	cmp	r3, #128	@ 0x80
 8002566:	d902      	bls.n	800256e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002568:	2303      	movs	r3, #3
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	e00a      	b.n	8002584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b80      	cmp	r3, #128	@ 0x80
 8002572:	d102      	bne.n	800257a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002574:	2302      	movs	r3, #2
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	e004      	b.n	8002584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b70      	cmp	r3, #112	@ 0x70
 800257e:	d101      	bne.n	8002584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002580:	2301      	movs	r3, #1
 8002582:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002584:	4b0b      	ldr	r3, [pc, #44]	@ (80025b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f023 0207 	bic.w	r2, r3, #7
 800258c:	4909      	ldr	r1, [pc, #36]	@ (80025b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002594:	4b07      	ldr	r3, [pc, #28]	@ (80025b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d001      	beq.n	80025a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40022000 	.word	0x40022000

080025b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025c0:	2300      	movs	r3, #0
 80025c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025c4:	2300      	movs	r3, #0
 80025c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d041      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025d8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80025dc:	d02a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80025de:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80025e2:	d824      	bhi.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80025e8:	d008      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80025ee:	d81e      	bhi.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00a      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80025f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025f8:	d010      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025fa:	e018      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025fc:	4b86      	ldr	r3, [pc, #536]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	4a85      	ldr	r2, [pc, #532]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002602:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002606:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002608:	e015      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	3304      	adds	r3, #4
 800260e:	2100      	movs	r1, #0
 8002610:	4618      	mov	r0, r3
 8002612:	f000 fabb 	bl	8002b8c <RCCEx_PLLSAI1_Config>
 8002616:	4603      	mov	r3, r0
 8002618:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800261a:	e00c      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3320      	adds	r3, #32
 8002620:	2100      	movs	r1, #0
 8002622:	4618      	mov	r0, r3
 8002624:	f000 fba6 	bl	8002d74 <RCCEx_PLLSAI2_Config>
 8002628:	4603      	mov	r3, r0
 800262a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800262c:	e003      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	74fb      	strb	r3, [r7, #19]
      break;
 8002632:	e000      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002634:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002636:	7cfb      	ldrb	r3, [r7, #19]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10b      	bne.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800263c:	4b76      	ldr	r3, [pc, #472]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800263e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002642:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800264a:	4973      	ldr	r1, [pc, #460]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800264c:	4313      	orrs	r3, r2
 800264e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002652:	e001      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002654:	7cfb      	ldrb	r3, [r7, #19]
 8002656:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d041      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002668:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800266c:	d02a      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800266e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002672:	d824      	bhi.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002674:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002678:	d008      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800267a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800267e:	d81e      	bhi.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00a      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002684:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002688:	d010      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800268a:	e018      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800268c:	4b62      	ldr	r3, [pc, #392]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	4a61      	ldr	r2, [pc, #388]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002692:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002696:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002698:	e015      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3304      	adds	r3, #4
 800269e:	2100      	movs	r1, #0
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 fa73 	bl	8002b8c <RCCEx_PLLSAI1_Config>
 80026a6:	4603      	mov	r3, r0
 80026a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026aa:	e00c      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3320      	adds	r3, #32
 80026b0:	2100      	movs	r1, #0
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 fb5e 	bl	8002d74 <RCCEx_PLLSAI2_Config>
 80026b8:	4603      	mov	r3, r0
 80026ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026bc:	e003      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	74fb      	strb	r3, [r7, #19]
      break;
 80026c2:	e000      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80026c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026c6:	7cfb      	ldrb	r3, [r7, #19]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10b      	bne.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026cc:	4b52      	ldr	r3, [pc, #328]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026d2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026da:	494f      	ldr	r1, [pc, #316]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80026e2:	e001      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026e4:	7cfb      	ldrb	r3, [r7, #19]
 80026e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 80a0 	beq.w	8002836 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026f6:	2300      	movs	r3, #0
 80026f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026fa:	4b47      	ldr	r3, [pc, #284]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800270a:	2300      	movs	r3, #0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00d      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002710:	4b41      	ldr	r3, [pc, #260]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002714:	4a40      	ldr	r2, [pc, #256]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002716:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800271a:	6593      	str	r3, [r2, #88]	@ 0x58
 800271c:	4b3e      	ldr	r3, [pc, #248]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800271e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002728:	2301      	movs	r3, #1
 800272a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800272c:	4b3b      	ldr	r3, [pc, #236]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a3a      	ldr	r2, [pc, #232]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002732:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002736:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002738:	f7fe fd94 	bl	8001264 <HAL_GetTick>
 800273c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800273e:	e009      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002740:	f7fe fd90 	bl	8001264 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d902      	bls.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	74fb      	strb	r3, [r7, #19]
        break;
 8002752:	e005      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002754:	4b31      	ldr	r3, [pc, #196]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0ef      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002760:	7cfb      	ldrb	r3, [r7, #19]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d15c      	bne.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002766:	4b2c      	ldr	r3, [pc, #176]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800276c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002770:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d01f      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	429a      	cmp	r2, r3
 8002782:	d019      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002784:	4b24      	ldr	r3, [pc, #144]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800278a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800278e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002790:	4b21      	ldr	r3, [pc, #132]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002796:	4a20      	ldr	r2, [pc, #128]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800279c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027b0:	4a19      	ldr	r2, [pc, #100]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d016      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c2:	f7fe fd4f 	bl	8001264 <HAL_GetTick>
 80027c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027c8:	e00b      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ca:	f7fe fd4b 	bl	8001264 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027d8:	4293      	cmp	r3, r2
 80027da:	d902      	bls.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	74fb      	strb	r3, [r7, #19]
            break;
 80027e0:	e006      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0ec      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80027f0:	7cfb      	ldrb	r3, [r7, #19]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10c      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027f6:	4b08      	ldr	r3, [pc, #32]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002806:	4904      	ldr	r1, [pc, #16]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002808:	4313      	orrs	r3, r2
 800280a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800280e:	e009      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002810:	7cfb      	ldrb	r3, [r7, #19]
 8002812:	74bb      	strb	r3, [r7, #18]
 8002814:	e006      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002816:	bf00      	nop
 8002818:	40021000 	.word	0x40021000
 800281c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002820:	7cfb      	ldrb	r3, [r7, #19]
 8002822:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002824:	7c7b      	ldrb	r3, [r7, #17]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d105      	bne.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800282a:	4b9e      	ldr	r3, [pc, #632]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800282e:	4a9d      	ldr	r2, [pc, #628]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002830:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002834:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00a      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002842:	4b98      	ldr	r3, [pc, #608]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002848:	f023 0203 	bic.w	r2, r3, #3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002850:	4994      	ldr	r1, [pc, #592]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002852:	4313      	orrs	r3, r2
 8002854:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00a      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002864:	4b8f      	ldr	r3, [pc, #572]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800286a:	f023 020c 	bic.w	r2, r3, #12
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002872:	498c      	ldr	r1, [pc, #560]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002874:	4313      	orrs	r3, r2
 8002876:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00a      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002886:	4b87      	ldr	r3, [pc, #540]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800288c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002894:	4983      	ldr	r1, [pc, #524]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002896:	4313      	orrs	r3, r2
 8002898:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0308 	and.w	r3, r3, #8
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00a      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028a8:	4b7e      	ldr	r3, [pc, #504]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b6:	497b      	ldr	r1, [pc, #492]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0310 	and.w	r3, r3, #16
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00a      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028ca:	4b76      	ldr	r3, [pc, #472]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028d8:	4972      	ldr	r1, [pc, #456]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0320 	and.w	r3, r3, #32
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00a      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028ec:	4b6d      	ldr	r3, [pc, #436]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028fa:	496a      	ldr	r1, [pc, #424]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00a      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800290e:	4b65      	ldr	r3, [pc, #404]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002914:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800291c:	4961      	ldr	r1, [pc, #388]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291e:	4313      	orrs	r3, r2
 8002920:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00a      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002930:	4b5c      	ldr	r3, [pc, #368]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002936:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800293e:	4959      	ldr	r1, [pc, #356]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00a      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002952:	4b54      	ldr	r3, [pc, #336]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002958:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002960:	4950      	ldr	r1, [pc, #320]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002962:	4313      	orrs	r3, r2
 8002964:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00a      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002974:	4b4b      	ldr	r3, [pc, #300]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800297a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002982:	4948      	ldr	r1, [pc, #288]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002984:	4313      	orrs	r3, r2
 8002986:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00a      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002996:	4b43      	ldr	r3, [pc, #268]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002998:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800299c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a4:	493f      	ldr	r1, [pc, #252]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d028      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029b8:	4b3a      	ldr	r3, [pc, #232]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029c6:	4937      	ldr	r1, [pc, #220]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029d6:	d106      	bne.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029d8:	4b32      	ldr	r3, [pc, #200]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	4a31      	ldr	r2, [pc, #196]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029e2:	60d3      	str	r3, [r2, #12]
 80029e4:	e011      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029ee:	d10c      	bne.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3304      	adds	r3, #4
 80029f4:	2101      	movs	r1, #1
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 f8c8 	bl	8002b8c <RCCEx_PLLSAI1_Config>
 80029fc:	4603      	mov	r3, r0
 80029fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a00:	7cfb      	ldrb	r3, [r7, #19]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002a06:	7cfb      	ldrb	r3, [r7, #19]
 8002a08:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d028      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a16:	4b23      	ldr	r3, [pc, #140]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a1c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a24:	491f      	ldr	r1, [pc, #124]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a34:	d106      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a36:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	4a1a      	ldr	r2, [pc, #104]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a40:	60d3      	str	r3, [r2, #12]
 8002a42:	e011      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a4c:	d10c      	bne.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3304      	adds	r3, #4
 8002a52:	2101      	movs	r1, #1
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 f899 	bl	8002b8c <RCCEx_PLLSAI1_Config>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a5e:	7cfb      	ldrb	r3, [r7, #19]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002a64:	7cfb      	ldrb	r3, [r7, #19]
 8002a66:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d02b      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a74:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a82:	4908      	ldr	r1, [pc, #32]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a92:	d109      	bne.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a94:	4b03      	ldr	r3, [pc, #12]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	4a02      	ldr	r2, [pc, #8]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a9e:	60d3      	str	r3, [r2, #12]
 8002aa0:	e014      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002aa2:	bf00      	nop
 8002aa4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ab0:	d10c      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f000 f867 	bl	8002b8c <RCCEx_PLLSAI1_Config>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ac2:	7cfb      	ldrb	r3, [r7, #19]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002ac8:	7cfb      	ldrb	r3, [r7, #19]
 8002aca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d02f      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ad8:	4b2b      	ldr	r3, [pc, #172]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ade:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ae6:	4928      	ldr	r1, [pc, #160]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002af2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002af6:	d10d      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3304      	adds	r3, #4
 8002afc:	2102      	movs	r1, #2
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 f844 	bl	8002b8c <RCCEx_PLLSAI1_Config>
 8002b04:	4603      	mov	r3, r0
 8002b06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b08:	7cfb      	ldrb	r3, [r7, #19]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d014      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b0e:	7cfb      	ldrb	r3, [r7, #19]
 8002b10:	74bb      	strb	r3, [r7, #18]
 8002b12:	e011      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b1c:	d10c      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3320      	adds	r3, #32
 8002b22:	2102      	movs	r1, #2
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 f925 	bl	8002d74 <RCCEx_PLLSAI2_Config>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b2e:	7cfb      	ldrb	r3, [r7, #19]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b34:	7cfb      	ldrb	r3, [r7, #19]
 8002b36:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00a      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b44:	4b10      	ldr	r3, [pc, #64]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b4a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b52:	490d      	ldr	r1, [pc, #52]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00b      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b66:	4b08      	ldr	r3, [pc, #32]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b6c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b76:	4904      	ldr	r1, [pc, #16]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b7e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40021000 	.word	0x40021000

08002b8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b96:	2300      	movs	r3, #0
 8002b98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b9a:	4b75      	ldr	r3, [pc, #468]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d018      	beq.n	8002bd8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ba6:	4b72      	ldr	r3, [pc, #456]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	f003 0203 	and.w	r2, r3, #3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d10d      	bne.n	8002bd2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
       ||
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d009      	beq.n	8002bd2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002bbe:	4b6c      	ldr	r3, [pc, #432]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	091b      	lsrs	r3, r3, #4
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	1c5a      	adds	r2, r3, #1
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
       ||
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d047      	beq.n	8002c62 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	73fb      	strb	r3, [r7, #15]
 8002bd6:	e044      	b.n	8002c62 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d018      	beq.n	8002c12 <RCCEx_PLLSAI1_Config+0x86>
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d825      	bhi.n	8002c30 <RCCEx_PLLSAI1_Config+0xa4>
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d002      	beq.n	8002bee <RCCEx_PLLSAI1_Config+0x62>
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d009      	beq.n	8002c00 <RCCEx_PLLSAI1_Config+0x74>
 8002bec:	e020      	b.n	8002c30 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bee:	4b60      	ldr	r3, [pc, #384]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d11d      	bne.n	8002c36 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bfe:	e01a      	b.n	8002c36 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c00:	4b5b      	ldr	r3, [pc, #364]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d116      	bne.n	8002c3a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c10:	e013      	b.n	8002c3a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c12:	4b57      	ldr	r3, [pc, #348]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10f      	bne.n	8002c3e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c1e:	4b54      	ldr	r3, [pc, #336]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d109      	bne.n	8002c3e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c2e:	e006      	b.n	8002c3e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	73fb      	strb	r3, [r7, #15]
      break;
 8002c34:	e004      	b.n	8002c40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c36:	bf00      	nop
 8002c38:	e002      	b.n	8002c40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c3a:	bf00      	nop
 8002c3c:	e000      	b.n	8002c40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10d      	bne.n	8002c62 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c46:	4b4a      	ldr	r3, [pc, #296]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6819      	ldr	r1, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	430b      	orrs	r3, r1
 8002c5c:	4944      	ldr	r1, [pc, #272]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d17d      	bne.n	8002d64 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c68:	4b41      	ldr	r3, [pc, #260]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a40      	ldr	r2, [pc, #256]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002c72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c74:	f7fe faf6 	bl	8001264 <HAL_GetTick>
 8002c78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c7a:	e009      	b.n	8002c90 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c7c:	f7fe faf2 	bl	8001264 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d902      	bls.n	8002c90 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	73fb      	strb	r3, [r7, #15]
        break;
 8002c8e:	e005      	b.n	8002c9c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c90:	4b37      	ldr	r3, [pc, #220]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1ef      	bne.n	8002c7c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d160      	bne.n	8002d64 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d111      	bne.n	8002ccc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ca8:	4b31      	ldr	r3, [pc, #196]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002cb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6892      	ldr	r2, [r2, #8]
 8002cb8:	0211      	lsls	r1, r2, #8
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68d2      	ldr	r2, [r2, #12]
 8002cbe:	0912      	lsrs	r2, r2, #4
 8002cc0:	0452      	lsls	r2, r2, #17
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	492a      	ldr	r1, [pc, #168]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	610b      	str	r3, [r1, #16]
 8002cca:	e027      	b.n	8002d1c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d112      	bne.n	8002cf8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cd2:	4b27      	ldr	r3, [pc, #156]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002cda:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6892      	ldr	r2, [r2, #8]
 8002ce2:	0211      	lsls	r1, r2, #8
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6912      	ldr	r2, [r2, #16]
 8002ce8:	0852      	lsrs	r2, r2, #1
 8002cea:	3a01      	subs	r2, #1
 8002cec:	0552      	lsls	r2, r2, #21
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	491f      	ldr	r1, [pc, #124]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	610b      	str	r3, [r1, #16]
 8002cf6:	e011      	b.n	8002d1c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002d00:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6892      	ldr	r2, [r2, #8]
 8002d08:	0211      	lsls	r1, r2, #8
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6952      	ldr	r2, [r2, #20]
 8002d0e:	0852      	lsrs	r2, r2, #1
 8002d10:	3a01      	subs	r2, #1
 8002d12:	0652      	lsls	r2, r2, #25
 8002d14:	430a      	orrs	r2, r1
 8002d16:	4916      	ldr	r1, [pc, #88]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d1c:	4b14      	ldr	r3, [pc, #80]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a13      	ldr	r2, [pc, #76]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d22:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d28:	f7fe fa9c 	bl	8001264 <HAL_GetTick>
 8002d2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d2e:	e009      	b.n	8002d44 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d30:	f7fe fa98 	bl	8001264 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d902      	bls.n	8002d44 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	73fb      	strb	r3, [r7, #15]
          break;
 8002d42:	e005      	b.n	8002d50 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d44:	4b0a      	ldr	r3, [pc, #40]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0ef      	beq.n	8002d30 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d106      	bne.n	8002d64 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d56:	4b06      	ldr	r3, [pc, #24]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d58:	691a      	ldr	r2, [r3, #16]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	4904      	ldr	r1, [pc, #16]	@ (8002d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40021000 	.word	0x40021000

08002d74 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d82:	4b6a      	ldr	r3, [pc, #424]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d018      	beq.n	8002dc0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d8e:	4b67      	ldr	r3, [pc, #412]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f003 0203 	and.w	r2, r3, #3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d10d      	bne.n	8002dba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
       ||
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d009      	beq.n	8002dba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002da6:	4b61      	ldr	r3, [pc, #388]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	091b      	lsrs	r3, r3, #4
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	1c5a      	adds	r2, r3, #1
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
       ||
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d047      	beq.n	8002e4a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	73fb      	strb	r3, [r7, #15]
 8002dbe:	e044      	b.n	8002e4a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d018      	beq.n	8002dfa <RCCEx_PLLSAI2_Config+0x86>
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d825      	bhi.n	8002e18 <RCCEx_PLLSAI2_Config+0xa4>
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d002      	beq.n	8002dd6 <RCCEx_PLLSAI2_Config+0x62>
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d009      	beq.n	8002de8 <RCCEx_PLLSAI2_Config+0x74>
 8002dd4:	e020      	b.n	8002e18 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dd6:	4b55      	ldr	r3, [pc, #340]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d11d      	bne.n	8002e1e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002de6:	e01a      	b.n	8002e1e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002de8:	4b50      	ldr	r3, [pc, #320]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d116      	bne.n	8002e22 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002df8:	e013      	b.n	8002e22 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dfa:	4b4c      	ldr	r3, [pc, #304]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10f      	bne.n	8002e26 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e06:	4b49      	ldr	r3, [pc, #292]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d109      	bne.n	8002e26 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e16:	e006      	b.n	8002e26 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e1c:	e004      	b.n	8002e28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e1e:	bf00      	nop
 8002e20:	e002      	b.n	8002e28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e22:	bf00      	nop
 8002e24:	e000      	b.n	8002e28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e26:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10d      	bne.n	8002e4a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e2e:	4b3f      	ldr	r3, [pc, #252]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6819      	ldr	r1, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	430b      	orrs	r3, r1
 8002e44:	4939      	ldr	r1, [pc, #228]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e4a:	7bfb      	ldrb	r3, [r7, #15]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d167      	bne.n	8002f20 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e50:	4b36      	ldr	r3, [pc, #216]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a35      	ldr	r2, [pc, #212]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e5c:	f7fe fa02 	bl	8001264 <HAL_GetTick>
 8002e60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e62:	e009      	b.n	8002e78 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e64:	f7fe f9fe 	bl	8001264 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d902      	bls.n	8002e78 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	73fb      	strb	r3, [r7, #15]
        break;
 8002e76:	e005      	b.n	8002e84 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e78:	4b2c      	ldr	r3, [pc, #176]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1ef      	bne.n	8002e64 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d14a      	bne.n	8002f20 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d111      	bne.n	8002eb4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e90:	4b26      	ldr	r3, [pc, #152]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002e98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6892      	ldr	r2, [r2, #8]
 8002ea0:	0211      	lsls	r1, r2, #8
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	68d2      	ldr	r2, [r2, #12]
 8002ea6:	0912      	lsrs	r2, r2, #4
 8002ea8:	0452      	lsls	r2, r2, #17
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	491f      	ldr	r1, [pc, #124]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	614b      	str	r3, [r1, #20]
 8002eb2:	e011      	b.n	8002ed8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002ebc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6892      	ldr	r2, [r2, #8]
 8002ec4:	0211      	lsls	r1, r2, #8
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6912      	ldr	r2, [r2, #16]
 8002eca:	0852      	lsrs	r2, r2, #1
 8002ecc:	3a01      	subs	r2, #1
 8002ece:	0652      	lsls	r2, r2, #25
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	4916      	ldr	r1, [pc, #88]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ed8:	4b14      	ldr	r3, [pc, #80]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a13      	ldr	r2, [pc, #76]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ede:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ee2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee4:	f7fe f9be 	bl	8001264 <HAL_GetTick>
 8002ee8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002eea:	e009      	b.n	8002f00 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002eec:	f7fe f9ba 	bl	8001264 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d902      	bls.n	8002f00 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	73fb      	strb	r3, [r7, #15]
          break;
 8002efe:	e005      	b.n	8002f0c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f00:	4b0a      	ldr	r3, [pc, #40]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0ef      	beq.n	8002eec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d106      	bne.n	8002f20 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f12:	4b06      	ldr	r3, [pc, #24]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f14:	695a      	ldr	r2, [r3, #20]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	4904      	ldr	r1, [pc, #16]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40021000 	.word	0x40021000

08002f30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e049      	b.n	8002fd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d106      	bne.n	8002f5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7fd ff34 	bl	8000dc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4610      	mov	r0, r2
 8002f70:	f000 fb7a 	bl	8003668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b082      	sub	sp, #8
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e049      	b.n	8003084 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d106      	bne.n	800300a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f841 	bl	800308c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2202      	movs	r2, #2
 800300e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3304      	adds	r3, #4
 800301a:	4619      	mov	r1, r3
 800301c:	4610      	mov	r0, r2
 800301e:	f000 fb23 	bl	8003668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d109      	bne.n	80030c4 <HAL_TIM_PWM_Start+0x24>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	bf14      	ite	ne
 80030bc:	2301      	movne	r3, #1
 80030be:	2300      	moveq	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	e03c      	b.n	800313e <HAL_TIM_PWM_Start+0x9e>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d109      	bne.n	80030de <HAL_TIM_PWM_Start+0x3e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	bf14      	ite	ne
 80030d6:	2301      	movne	r3, #1
 80030d8:	2300      	moveq	r3, #0
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	e02f      	b.n	800313e <HAL_TIM_PWM_Start+0x9e>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d109      	bne.n	80030f8 <HAL_TIM_PWM_Start+0x58>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	bf14      	ite	ne
 80030f0:	2301      	movne	r3, #1
 80030f2:	2300      	moveq	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	e022      	b.n	800313e <HAL_TIM_PWM_Start+0x9e>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	2b0c      	cmp	r3, #12
 80030fc:	d109      	bne.n	8003112 <HAL_TIM_PWM_Start+0x72>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b01      	cmp	r3, #1
 8003108:	bf14      	ite	ne
 800310a:	2301      	movne	r3, #1
 800310c:	2300      	moveq	r3, #0
 800310e:	b2db      	uxtb	r3, r3
 8003110:	e015      	b.n	800313e <HAL_TIM_PWM_Start+0x9e>
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	2b10      	cmp	r3, #16
 8003116:	d109      	bne.n	800312c <HAL_TIM_PWM_Start+0x8c>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b01      	cmp	r3, #1
 8003122:	bf14      	ite	ne
 8003124:	2301      	movne	r3, #1
 8003126:	2300      	moveq	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	e008      	b.n	800313e <HAL_TIM_PWM_Start+0x9e>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b01      	cmp	r3, #1
 8003136:	bf14      	ite	ne
 8003138:	2301      	movne	r3, #1
 800313a:	2300      	moveq	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e09c      	b.n	8003280 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d104      	bne.n	8003156 <HAL_TIM_PWM_Start+0xb6>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2202      	movs	r2, #2
 8003150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003154:	e023      	b.n	800319e <HAL_TIM_PWM_Start+0xfe>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	2b04      	cmp	r3, #4
 800315a:	d104      	bne.n	8003166 <HAL_TIM_PWM_Start+0xc6>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2202      	movs	r2, #2
 8003160:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003164:	e01b      	b.n	800319e <HAL_TIM_PWM_Start+0xfe>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b08      	cmp	r3, #8
 800316a:	d104      	bne.n	8003176 <HAL_TIM_PWM_Start+0xd6>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003174:	e013      	b.n	800319e <HAL_TIM_PWM_Start+0xfe>
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	2b0c      	cmp	r3, #12
 800317a:	d104      	bne.n	8003186 <HAL_TIM_PWM_Start+0xe6>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003184:	e00b      	b.n	800319e <HAL_TIM_PWM_Start+0xfe>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b10      	cmp	r3, #16
 800318a:	d104      	bne.n	8003196 <HAL_TIM_PWM_Start+0xf6>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003194:	e003      	b.n	800319e <HAL_TIM_PWM_Start+0xfe>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2202      	movs	r2, #2
 800319a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2201      	movs	r2, #1
 80031a4:	6839      	ldr	r1, [r7, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 fe68 	bl	8003e7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a35      	ldr	r2, [pc, #212]	@ (8003288 <HAL_TIM_PWM_Start+0x1e8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d013      	beq.n	80031de <HAL_TIM_PWM_Start+0x13e>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a34      	ldr	r2, [pc, #208]	@ (800328c <HAL_TIM_PWM_Start+0x1ec>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d00e      	beq.n	80031de <HAL_TIM_PWM_Start+0x13e>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a32      	ldr	r2, [pc, #200]	@ (8003290 <HAL_TIM_PWM_Start+0x1f0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d009      	beq.n	80031de <HAL_TIM_PWM_Start+0x13e>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a31      	ldr	r2, [pc, #196]	@ (8003294 <HAL_TIM_PWM_Start+0x1f4>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d004      	beq.n	80031de <HAL_TIM_PWM_Start+0x13e>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a2f      	ldr	r2, [pc, #188]	@ (8003298 <HAL_TIM_PWM_Start+0x1f8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d101      	bne.n	80031e2 <HAL_TIM_PWM_Start+0x142>
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <HAL_TIM_PWM_Start+0x144>
 80031e2:	2300      	movs	r3, #0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d007      	beq.n	80031f8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031f6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a22      	ldr	r2, [pc, #136]	@ (8003288 <HAL_TIM_PWM_Start+0x1e8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d01d      	beq.n	800323e <HAL_TIM_PWM_Start+0x19e>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800320a:	d018      	beq.n	800323e <HAL_TIM_PWM_Start+0x19e>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a22      	ldr	r2, [pc, #136]	@ (800329c <HAL_TIM_PWM_Start+0x1fc>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d013      	beq.n	800323e <HAL_TIM_PWM_Start+0x19e>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a21      	ldr	r2, [pc, #132]	@ (80032a0 <HAL_TIM_PWM_Start+0x200>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d00e      	beq.n	800323e <HAL_TIM_PWM_Start+0x19e>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a1f      	ldr	r2, [pc, #124]	@ (80032a4 <HAL_TIM_PWM_Start+0x204>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d009      	beq.n	800323e <HAL_TIM_PWM_Start+0x19e>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a17      	ldr	r2, [pc, #92]	@ (800328c <HAL_TIM_PWM_Start+0x1ec>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d004      	beq.n	800323e <HAL_TIM_PWM_Start+0x19e>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a15      	ldr	r2, [pc, #84]	@ (8003290 <HAL_TIM_PWM_Start+0x1f0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d115      	bne.n	800326a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	4b18      	ldr	r3, [pc, #96]	@ (80032a8 <HAL_TIM_PWM_Start+0x208>)
 8003246:	4013      	ands	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2b06      	cmp	r3, #6
 800324e:	d015      	beq.n	800327c <HAL_TIM_PWM_Start+0x1dc>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003256:	d011      	beq.n	800327c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003268:	e008      	b.n	800327c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f042 0201 	orr.w	r2, r2, #1
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	e000      	b.n	800327e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800327c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40012c00 	.word	0x40012c00
 800328c:	40013400 	.word	0x40013400
 8003290:	40014000 	.word	0x40014000
 8003294:	40014400 	.word	0x40014400
 8003298:	40014800 	.word	0x40014800
 800329c:	40000400 	.word	0x40000400
 80032a0:	40000800 	.word	0x40000800
 80032a4:	40000c00 	.word	0x40000c00
 80032a8:	00010007 	.word	0x00010007

080032ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032b8:	2300      	movs	r3, #0
 80032ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d101      	bne.n	80032ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032c6:	2302      	movs	r3, #2
 80032c8:	e0ff      	b.n	80034ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b14      	cmp	r3, #20
 80032d6:	f200 80f0 	bhi.w	80034ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80032da:	a201      	add	r2, pc, #4	@ (adr r2, 80032e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e0:	08003335 	.word	0x08003335
 80032e4:	080034bb 	.word	0x080034bb
 80032e8:	080034bb 	.word	0x080034bb
 80032ec:	080034bb 	.word	0x080034bb
 80032f0:	08003375 	.word	0x08003375
 80032f4:	080034bb 	.word	0x080034bb
 80032f8:	080034bb 	.word	0x080034bb
 80032fc:	080034bb 	.word	0x080034bb
 8003300:	080033b7 	.word	0x080033b7
 8003304:	080034bb 	.word	0x080034bb
 8003308:	080034bb 	.word	0x080034bb
 800330c:	080034bb 	.word	0x080034bb
 8003310:	080033f7 	.word	0x080033f7
 8003314:	080034bb 	.word	0x080034bb
 8003318:	080034bb 	.word	0x080034bb
 800331c:	080034bb 	.word	0x080034bb
 8003320:	08003439 	.word	0x08003439
 8003324:	080034bb 	.word	0x080034bb
 8003328:	080034bb 	.word	0x080034bb
 800332c:	080034bb 	.word	0x080034bb
 8003330:	08003479 	.word	0x08003479
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68b9      	ldr	r1, [r7, #8]
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fa2e 	bl	800379c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699a      	ldr	r2, [r3, #24]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0208 	orr.w	r2, r2, #8
 800334e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	699a      	ldr	r2, [r3, #24]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0204 	bic.w	r2, r2, #4
 800335e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6999      	ldr	r1, [r3, #24]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	691a      	ldr	r2, [r3, #16]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	619a      	str	r2, [r3, #24]
      break;
 8003372:	e0a5      	b.n	80034c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68b9      	ldr	r1, [r7, #8]
 800337a:	4618      	mov	r0, r3
 800337c:	f000 fa9e 	bl	80038bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	699a      	ldr	r2, [r3, #24]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800338e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699a      	ldr	r2, [r3, #24]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800339e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6999      	ldr	r1, [r3, #24]
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	021a      	lsls	r2, r3, #8
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	619a      	str	r2, [r3, #24]
      break;
 80033b4:	e084      	b.n	80034c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68b9      	ldr	r1, [r7, #8]
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 fb07 	bl	80039d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	69da      	ldr	r2, [r3, #28]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f042 0208 	orr.w	r2, r2, #8
 80033d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	69da      	ldr	r2, [r3, #28]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0204 	bic.w	r2, r2, #4
 80033e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	69d9      	ldr	r1, [r3, #28]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	691a      	ldr	r2, [r3, #16]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	61da      	str	r2, [r3, #28]
      break;
 80033f4:	e064      	b.n	80034c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68b9      	ldr	r1, [r7, #8]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 fb6f 	bl	8003ae0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	69da      	ldr	r2, [r3, #28]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003410:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	69da      	ldr	r2, [r3, #28]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003420:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	69d9      	ldr	r1, [r3, #28]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	021a      	lsls	r2, r3, #8
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	61da      	str	r2, [r3, #28]
      break;
 8003436:	e043      	b.n	80034c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68b9      	ldr	r1, [r7, #8]
 800343e:	4618      	mov	r0, r3
 8003440:	f000 fbb8 	bl	8003bb4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0208 	orr.w	r2, r2, #8
 8003452:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0204 	bic.w	r2, r2, #4
 8003462:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	691a      	ldr	r2, [r3, #16]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003476:	e023      	b.n	80034c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68b9      	ldr	r1, [r7, #8]
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fbfc 	bl	8003c7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003492:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034a2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	021a      	lsls	r2, r3, #8
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80034b8:	e002      	b.n	80034c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	75fb      	strb	r3, [r7, #23]
      break;
 80034be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop

080034d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034de:	2300      	movs	r3, #0
 80034e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <HAL_TIM_ConfigClockSource+0x1c>
 80034ec:	2302      	movs	r3, #2
 80034ee:	e0b6      	b.n	800365e <HAL_TIM_ConfigClockSource+0x18a>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800350e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003512:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800351a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800352c:	d03e      	beq.n	80035ac <HAL_TIM_ConfigClockSource+0xd8>
 800352e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003532:	f200 8087 	bhi.w	8003644 <HAL_TIM_ConfigClockSource+0x170>
 8003536:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800353a:	f000 8086 	beq.w	800364a <HAL_TIM_ConfigClockSource+0x176>
 800353e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003542:	d87f      	bhi.n	8003644 <HAL_TIM_ConfigClockSource+0x170>
 8003544:	2b70      	cmp	r3, #112	@ 0x70
 8003546:	d01a      	beq.n	800357e <HAL_TIM_ConfigClockSource+0xaa>
 8003548:	2b70      	cmp	r3, #112	@ 0x70
 800354a:	d87b      	bhi.n	8003644 <HAL_TIM_ConfigClockSource+0x170>
 800354c:	2b60      	cmp	r3, #96	@ 0x60
 800354e:	d050      	beq.n	80035f2 <HAL_TIM_ConfigClockSource+0x11e>
 8003550:	2b60      	cmp	r3, #96	@ 0x60
 8003552:	d877      	bhi.n	8003644 <HAL_TIM_ConfigClockSource+0x170>
 8003554:	2b50      	cmp	r3, #80	@ 0x50
 8003556:	d03c      	beq.n	80035d2 <HAL_TIM_ConfigClockSource+0xfe>
 8003558:	2b50      	cmp	r3, #80	@ 0x50
 800355a:	d873      	bhi.n	8003644 <HAL_TIM_ConfigClockSource+0x170>
 800355c:	2b40      	cmp	r3, #64	@ 0x40
 800355e:	d058      	beq.n	8003612 <HAL_TIM_ConfigClockSource+0x13e>
 8003560:	2b40      	cmp	r3, #64	@ 0x40
 8003562:	d86f      	bhi.n	8003644 <HAL_TIM_ConfigClockSource+0x170>
 8003564:	2b30      	cmp	r3, #48	@ 0x30
 8003566:	d064      	beq.n	8003632 <HAL_TIM_ConfigClockSource+0x15e>
 8003568:	2b30      	cmp	r3, #48	@ 0x30
 800356a:	d86b      	bhi.n	8003644 <HAL_TIM_ConfigClockSource+0x170>
 800356c:	2b20      	cmp	r3, #32
 800356e:	d060      	beq.n	8003632 <HAL_TIM_ConfigClockSource+0x15e>
 8003570:	2b20      	cmp	r3, #32
 8003572:	d867      	bhi.n	8003644 <HAL_TIM_ConfigClockSource+0x170>
 8003574:	2b00      	cmp	r3, #0
 8003576:	d05c      	beq.n	8003632 <HAL_TIM_ConfigClockSource+0x15e>
 8003578:	2b10      	cmp	r3, #16
 800357a:	d05a      	beq.n	8003632 <HAL_TIM_ConfigClockSource+0x15e>
 800357c:	e062      	b.n	8003644 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800358e:	f000 fc55 	bl	8003e3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80035a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	609a      	str	r2, [r3, #8]
      break;
 80035aa:	e04f      	b.n	800364c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035bc:	f000 fc3e 	bl	8003e3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035ce:	609a      	str	r2, [r3, #8]
      break;
 80035d0:	e03c      	b.n	800364c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035de:	461a      	mov	r2, r3
 80035e0:	f000 fbb2 	bl	8003d48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2150      	movs	r1, #80	@ 0x50
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 fc0b 	bl	8003e06 <TIM_ITRx_SetConfig>
      break;
 80035f0:	e02c      	b.n	800364c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035fe:	461a      	mov	r2, r3
 8003600:	f000 fbd1 	bl	8003da6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2160      	movs	r1, #96	@ 0x60
 800360a:	4618      	mov	r0, r3
 800360c:	f000 fbfb 	bl	8003e06 <TIM_ITRx_SetConfig>
      break;
 8003610:	e01c      	b.n	800364c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800361e:	461a      	mov	r2, r3
 8003620:	f000 fb92 	bl	8003d48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2140      	movs	r1, #64	@ 0x40
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fbeb 	bl	8003e06 <TIM_ITRx_SetConfig>
      break;
 8003630:	e00c      	b.n	800364c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4619      	mov	r1, r3
 800363c:	4610      	mov	r0, r2
 800363e:	f000 fbe2 	bl	8003e06 <TIM_ITRx_SetConfig>
      break;
 8003642:	e003      	b.n	800364c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	73fb      	strb	r3, [r7, #15]
      break;
 8003648:	e000      	b.n	800364c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800364a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800365c:	7bfb      	ldrb	r3, [r7, #15]
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
	...

08003668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a40      	ldr	r2, [pc, #256]	@ (800377c <TIM_Base_SetConfig+0x114>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d013      	beq.n	80036a8 <TIM_Base_SetConfig+0x40>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003686:	d00f      	beq.n	80036a8 <TIM_Base_SetConfig+0x40>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a3d      	ldr	r2, [pc, #244]	@ (8003780 <TIM_Base_SetConfig+0x118>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d00b      	beq.n	80036a8 <TIM_Base_SetConfig+0x40>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a3c      	ldr	r2, [pc, #240]	@ (8003784 <TIM_Base_SetConfig+0x11c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d007      	beq.n	80036a8 <TIM_Base_SetConfig+0x40>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a3b      	ldr	r2, [pc, #236]	@ (8003788 <TIM_Base_SetConfig+0x120>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d003      	beq.n	80036a8 <TIM_Base_SetConfig+0x40>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a3a      	ldr	r2, [pc, #232]	@ (800378c <TIM_Base_SetConfig+0x124>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d108      	bne.n	80036ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a2f      	ldr	r2, [pc, #188]	@ (800377c <TIM_Base_SetConfig+0x114>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d01f      	beq.n	8003702 <TIM_Base_SetConfig+0x9a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036c8:	d01b      	beq.n	8003702 <TIM_Base_SetConfig+0x9a>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a2c      	ldr	r2, [pc, #176]	@ (8003780 <TIM_Base_SetConfig+0x118>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d017      	beq.n	8003702 <TIM_Base_SetConfig+0x9a>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a2b      	ldr	r2, [pc, #172]	@ (8003784 <TIM_Base_SetConfig+0x11c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d013      	beq.n	8003702 <TIM_Base_SetConfig+0x9a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a2a      	ldr	r2, [pc, #168]	@ (8003788 <TIM_Base_SetConfig+0x120>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d00f      	beq.n	8003702 <TIM_Base_SetConfig+0x9a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a29      	ldr	r2, [pc, #164]	@ (800378c <TIM_Base_SetConfig+0x124>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d00b      	beq.n	8003702 <TIM_Base_SetConfig+0x9a>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a28      	ldr	r2, [pc, #160]	@ (8003790 <TIM_Base_SetConfig+0x128>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d007      	beq.n	8003702 <TIM_Base_SetConfig+0x9a>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a27      	ldr	r2, [pc, #156]	@ (8003794 <TIM_Base_SetConfig+0x12c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d003      	beq.n	8003702 <TIM_Base_SetConfig+0x9a>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a26      	ldr	r2, [pc, #152]	@ (8003798 <TIM_Base_SetConfig+0x130>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d108      	bne.n	8003714 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	4313      	orrs	r3, r2
 8003712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	4313      	orrs	r3, r2
 8003720:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a10      	ldr	r2, [pc, #64]	@ (800377c <TIM_Base_SetConfig+0x114>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d00f      	beq.n	8003760 <TIM_Base_SetConfig+0xf8>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a12      	ldr	r2, [pc, #72]	@ (800378c <TIM_Base_SetConfig+0x124>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d00b      	beq.n	8003760 <TIM_Base_SetConfig+0xf8>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a11      	ldr	r2, [pc, #68]	@ (8003790 <TIM_Base_SetConfig+0x128>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d007      	beq.n	8003760 <TIM_Base_SetConfig+0xf8>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a10      	ldr	r2, [pc, #64]	@ (8003794 <TIM_Base_SetConfig+0x12c>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d003      	beq.n	8003760 <TIM_Base_SetConfig+0xf8>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a0f      	ldr	r2, [pc, #60]	@ (8003798 <TIM_Base_SetConfig+0x130>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d103      	bne.n	8003768 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	615a      	str	r2, [r3, #20]
}
 800376e:	bf00      	nop
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40012c00 	.word	0x40012c00
 8003780:	40000400 	.word	0x40000400
 8003784:	40000800 	.word	0x40000800
 8003788:	40000c00 	.word	0x40000c00
 800378c:	40013400 	.word	0x40013400
 8003790:	40014000 	.word	0x40014000
 8003794:	40014400 	.word	0x40014400
 8003798:	40014800 	.word	0x40014800

0800379c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800379c:	b480      	push	{r7}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	f023 0201 	bic.w	r2, r3, #1
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f023 0303 	bic.w	r3, r3, #3
 80037d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	4313      	orrs	r3, r2
 80037e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f023 0302 	bic.w	r3, r3, #2
 80037e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a2c      	ldr	r2, [pc, #176]	@ (80038a8 <TIM_OC1_SetConfig+0x10c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d00f      	beq.n	800381c <TIM_OC1_SetConfig+0x80>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a2b      	ldr	r2, [pc, #172]	@ (80038ac <TIM_OC1_SetConfig+0x110>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d00b      	beq.n	800381c <TIM_OC1_SetConfig+0x80>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a2a      	ldr	r2, [pc, #168]	@ (80038b0 <TIM_OC1_SetConfig+0x114>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d007      	beq.n	800381c <TIM_OC1_SetConfig+0x80>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a29      	ldr	r2, [pc, #164]	@ (80038b4 <TIM_OC1_SetConfig+0x118>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d003      	beq.n	800381c <TIM_OC1_SetConfig+0x80>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a28      	ldr	r2, [pc, #160]	@ (80038b8 <TIM_OC1_SetConfig+0x11c>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d10c      	bne.n	8003836 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f023 0308 	bic.w	r3, r3, #8
 8003822:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	4313      	orrs	r3, r2
 800382c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f023 0304 	bic.w	r3, r3, #4
 8003834:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a1b      	ldr	r2, [pc, #108]	@ (80038a8 <TIM_OC1_SetConfig+0x10c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d00f      	beq.n	800385e <TIM_OC1_SetConfig+0xc2>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a1a      	ldr	r2, [pc, #104]	@ (80038ac <TIM_OC1_SetConfig+0x110>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d00b      	beq.n	800385e <TIM_OC1_SetConfig+0xc2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a19      	ldr	r2, [pc, #100]	@ (80038b0 <TIM_OC1_SetConfig+0x114>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d007      	beq.n	800385e <TIM_OC1_SetConfig+0xc2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a18      	ldr	r2, [pc, #96]	@ (80038b4 <TIM_OC1_SetConfig+0x118>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d003      	beq.n	800385e <TIM_OC1_SetConfig+0xc2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a17      	ldr	r2, [pc, #92]	@ (80038b8 <TIM_OC1_SetConfig+0x11c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d111      	bne.n	8003882 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003864:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800386c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	4313      	orrs	r3, r2
 8003876:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	621a      	str	r2, [r3, #32]
}
 800389c:	bf00      	nop
 800389e:	371c      	adds	r7, #28
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	40012c00 	.word	0x40012c00
 80038ac:	40013400 	.word	0x40013400
 80038b0:	40014000 	.word	0x40014000
 80038b4:	40014400 	.word	0x40014400
 80038b8:	40014800 	.word	0x40014800

080038bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038bc:	b480      	push	{r7}
 80038be:	b087      	sub	sp, #28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	f023 0210 	bic.w	r2, r3, #16
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	021b      	lsls	r3, r3, #8
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4313      	orrs	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	f023 0320 	bic.w	r3, r3, #32
 800390a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	4313      	orrs	r3, r2
 8003916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a28      	ldr	r2, [pc, #160]	@ (80039bc <TIM_OC2_SetConfig+0x100>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d003      	beq.n	8003928 <TIM_OC2_SetConfig+0x6c>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a27      	ldr	r2, [pc, #156]	@ (80039c0 <TIM_OC2_SetConfig+0x104>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d10d      	bne.n	8003944 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800392e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	4313      	orrs	r3, r2
 800393a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003942:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a1d      	ldr	r2, [pc, #116]	@ (80039bc <TIM_OC2_SetConfig+0x100>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d00f      	beq.n	800396c <TIM_OC2_SetConfig+0xb0>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a1c      	ldr	r2, [pc, #112]	@ (80039c0 <TIM_OC2_SetConfig+0x104>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d00b      	beq.n	800396c <TIM_OC2_SetConfig+0xb0>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a1b      	ldr	r2, [pc, #108]	@ (80039c4 <TIM_OC2_SetConfig+0x108>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d007      	beq.n	800396c <TIM_OC2_SetConfig+0xb0>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a1a      	ldr	r2, [pc, #104]	@ (80039c8 <TIM_OC2_SetConfig+0x10c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d003      	beq.n	800396c <TIM_OC2_SetConfig+0xb0>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a19      	ldr	r2, [pc, #100]	@ (80039cc <TIM_OC2_SetConfig+0x110>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d113      	bne.n	8003994 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003972:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800397a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	4313      	orrs	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	621a      	str	r2, [r3, #32]
}
 80039ae:	bf00      	nop
 80039b0:	371c      	adds	r7, #28
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40012c00 	.word	0x40012c00
 80039c0:	40013400 	.word	0x40013400
 80039c4:	40014000 	.word	0x40014000
 80039c8:	40014400 	.word	0x40014400
 80039cc:	40014800 	.word	0x40014800

080039d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b087      	sub	sp, #28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f023 0303 	bic.w	r3, r3, #3
 8003a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	021b      	lsls	r3, r3, #8
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a27      	ldr	r2, [pc, #156]	@ (8003acc <TIM_OC3_SetConfig+0xfc>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d003      	beq.n	8003a3a <TIM_OC3_SetConfig+0x6a>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a26      	ldr	r2, [pc, #152]	@ (8003ad0 <TIM_OC3_SetConfig+0x100>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d10d      	bne.n	8003a56 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	021b      	lsls	r3, r3, #8
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a1c      	ldr	r2, [pc, #112]	@ (8003acc <TIM_OC3_SetConfig+0xfc>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d00f      	beq.n	8003a7e <TIM_OC3_SetConfig+0xae>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a1b      	ldr	r2, [pc, #108]	@ (8003ad0 <TIM_OC3_SetConfig+0x100>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d00b      	beq.n	8003a7e <TIM_OC3_SetConfig+0xae>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a1a      	ldr	r2, [pc, #104]	@ (8003ad4 <TIM_OC3_SetConfig+0x104>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d007      	beq.n	8003a7e <TIM_OC3_SetConfig+0xae>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a19      	ldr	r2, [pc, #100]	@ (8003ad8 <TIM_OC3_SetConfig+0x108>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d003      	beq.n	8003a7e <TIM_OC3_SetConfig+0xae>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a18      	ldr	r2, [pc, #96]	@ (8003adc <TIM_OC3_SetConfig+0x10c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d113      	bne.n	8003aa6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	621a      	str	r2, [r3, #32]
}
 8003ac0:	bf00      	nop
 8003ac2:	371c      	adds	r7, #28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	40012c00 	.word	0x40012c00
 8003ad0:	40013400 	.word	0x40013400
 8003ad4:	40014000 	.word	0x40014000
 8003ad8:	40014400 	.word	0x40014400
 8003adc:	40014800 	.word	0x40014800

08003ae0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	021b      	lsls	r3, r3, #8
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	031b      	lsls	r3, r3, #12
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a18      	ldr	r2, [pc, #96]	@ (8003ba0 <TIM_OC4_SetConfig+0xc0>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d00f      	beq.n	8003b64 <TIM_OC4_SetConfig+0x84>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a17      	ldr	r2, [pc, #92]	@ (8003ba4 <TIM_OC4_SetConfig+0xc4>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d00b      	beq.n	8003b64 <TIM_OC4_SetConfig+0x84>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a16      	ldr	r2, [pc, #88]	@ (8003ba8 <TIM_OC4_SetConfig+0xc8>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d007      	beq.n	8003b64 <TIM_OC4_SetConfig+0x84>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a15      	ldr	r2, [pc, #84]	@ (8003bac <TIM_OC4_SetConfig+0xcc>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d003      	beq.n	8003b64 <TIM_OC4_SetConfig+0x84>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a14      	ldr	r2, [pc, #80]	@ (8003bb0 <TIM_OC4_SetConfig+0xd0>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d109      	bne.n	8003b78 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	019b      	lsls	r3, r3, #6
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	621a      	str	r2, [r3, #32]
}
 8003b92:	bf00      	nop
 8003b94:	371c      	adds	r7, #28
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	40012c00 	.word	0x40012c00
 8003ba4:	40013400 	.word	0x40013400
 8003ba8:	40014000 	.word	0x40014000
 8003bac:	40014400 	.word	0x40014400
 8003bb0:	40014800 	.word	0x40014800

08003bb4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003be2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003bf8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	041b      	lsls	r3, r3, #16
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a17      	ldr	r2, [pc, #92]	@ (8003c68 <TIM_OC5_SetConfig+0xb4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00f      	beq.n	8003c2e <TIM_OC5_SetConfig+0x7a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a16      	ldr	r2, [pc, #88]	@ (8003c6c <TIM_OC5_SetConfig+0xb8>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d00b      	beq.n	8003c2e <TIM_OC5_SetConfig+0x7a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a15      	ldr	r2, [pc, #84]	@ (8003c70 <TIM_OC5_SetConfig+0xbc>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d007      	beq.n	8003c2e <TIM_OC5_SetConfig+0x7a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a14      	ldr	r2, [pc, #80]	@ (8003c74 <TIM_OC5_SetConfig+0xc0>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d003      	beq.n	8003c2e <TIM_OC5_SetConfig+0x7a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a13      	ldr	r2, [pc, #76]	@ (8003c78 <TIM_OC5_SetConfig+0xc4>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d109      	bne.n	8003c42 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c34:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	021b      	lsls	r3, r3, #8
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	621a      	str	r2, [r3, #32]
}
 8003c5c:	bf00      	nop
 8003c5e:	371c      	adds	r7, #28
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	40012c00 	.word	0x40012c00
 8003c6c:	40013400 	.word	0x40013400
 8003c70:	40014000 	.word	0x40014000
 8003c74:	40014400 	.word	0x40014400
 8003c78:	40014800 	.word	0x40014800

08003c7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003caa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	021b      	lsls	r3, r3, #8
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003cc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	051b      	lsls	r3, r3, #20
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a18      	ldr	r2, [pc, #96]	@ (8003d34 <TIM_OC6_SetConfig+0xb8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d00f      	beq.n	8003cf8 <TIM_OC6_SetConfig+0x7c>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a17      	ldr	r2, [pc, #92]	@ (8003d38 <TIM_OC6_SetConfig+0xbc>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d00b      	beq.n	8003cf8 <TIM_OC6_SetConfig+0x7c>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a16      	ldr	r2, [pc, #88]	@ (8003d3c <TIM_OC6_SetConfig+0xc0>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d007      	beq.n	8003cf8 <TIM_OC6_SetConfig+0x7c>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a15      	ldr	r2, [pc, #84]	@ (8003d40 <TIM_OC6_SetConfig+0xc4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d003      	beq.n	8003cf8 <TIM_OC6_SetConfig+0x7c>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a14      	ldr	r2, [pc, #80]	@ (8003d44 <TIM_OC6_SetConfig+0xc8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d109      	bne.n	8003d0c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	029b      	lsls	r3, r3, #10
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	621a      	str	r2, [r3, #32]
}
 8003d26:	bf00      	nop
 8003d28:	371c      	adds	r7, #28
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	40012c00 	.word	0x40012c00
 8003d38:	40013400 	.word	0x40013400
 8003d3c:	40014000 	.word	0x40014000
 8003d40:	40014400 	.word	0x40014400
 8003d44:	40014800 	.word	0x40014800

08003d48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	f023 0201 	bic.w	r2, r3, #1
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	011b      	lsls	r3, r3, #4
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f023 030a 	bic.w	r3, r3, #10
 8003d84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	621a      	str	r2, [r3, #32]
}
 8003d9a:	bf00      	nop
 8003d9c:	371c      	adds	r7, #28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b087      	sub	sp, #28
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	60f8      	str	r0, [r7, #12]
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	f023 0210 	bic.w	r2, r3, #16
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003dd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	031b      	lsls	r3, r3, #12
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003de2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	621a      	str	r2, [r3, #32]
}
 8003dfa:	bf00      	nop
 8003dfc:	371c      	adds	r7, #28
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b085      	sub	sp, #20
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
 8003e0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f043 0307 	orr.w	r3, r3, #7
 8003e28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	609a      	str	r2, [r3, #8]
}
 8003e30:	bf00      	nop
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	021a      	lsls	r2, r3, #8
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	609a      	str	r2, [r3, #8]
}
 8003e70:	bf00      	nop
 8003e72:	371c      	adds	r7, #28
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b087      	sub	sp, #28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	f003 031f 	and.w	r3, r3, #31
 8003e8e:	2201      	movs	r2, #1
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6a1a      	ldr	r2, [r3, #32]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	43db      	mvns	r3, r3
 8003e9e:	401a      	ands	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6a1a      	ldr	r2, [r3, #32]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	f003 031f 	and.w	r3, r3, #31
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	621a      	str	r2, [r3, #32]
}
 8003eba:	bf00      	nop
 8003ebc:	371c      	adds	r7, #28
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
	...

08003ec8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d101      	bne.n	8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003edc:	2302      	movs	r3, #2
 8003ede:	e068      	b.n	8003fb2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2202      	movs	r2, #2
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a2e      	ldr	r2, [pc, #184]	@ (8003fc0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d004      	beq.n	8003f14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a2d      	ldr	r2, [pc, #180]	@ (8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d108      	bne.n	8003f26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003f1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a1e      	ldr	r2, [pc, #120]	@ (8003fc0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d01d      	beq.n	8003f86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f52:	d018      	beq.n	8003f86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a1b      	ldr	r2, [pc, #108]	@ (8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d013      	beq.n	8003f86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a1a      	ldr	r2, [pc, #104]	@ (8003fcc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d00e      	beq.n	8003f86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a18      	ldr	r2, [pc, #96]	@ (8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d009      	beq.n	8003f86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a13      	ldr	r2, [pc, #76]	@ (8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d004      	beq.n	8003f86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a14      	ldr	r2, [pc, #80]	@ (8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d10c      	bne.n	8003fa0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	40012c00 	.word	0x40012c00
 8003fc4:	40013400 	.word	0x40013400
 8003fc8:	40000400 	.word	0x40000400
 8003fcc:	40000800 	.word	0x40000800
 8003fd0:	40000c00 	.word	0x40000c00
 8003fd4:	40014000 	.word	0x40014000

08003fd8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d101      	bne.n	8003ff4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	e065      	b.n	80040c0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	4313      	orrs	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	4313      	orrs	r3, r2
 8004016:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	4313      	orrs	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4313      	orrs	r3, r2
 8004032:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	4313      	orrs	r3, r2
 800404e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	041b      	lsls	r3, r3, #16
 800406a:	4313      	orrs	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a16      	ldr	r2, [pc, #88]	@ (80040cc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d004      	beq.n	8004082 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a14      	ldr	r2, [pc, #80]	@ (80040d0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d115      	bne.n	80040ae <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408c:	051b      	lsls	r3, r3, #20
 800408e:	4313      	orrs	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	69db      	ldr	r3, [r3, #28]
 800409c:	4313      	orrs	r3, r2
 800409e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3714      	adds	r7, #20
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	40012c00 	.word	0x40012c00
 80040d0:	40013400 	.word	0x40013400

080040d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e040      	b.n	8004168 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d106      	bne.n	80040fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7fc fece 	bl	8000e98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2224      	movs	r2, #36	@ 0x24
 8004100:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0201 	bic.w	r2, r2, #1
 8004110:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 fec0 	bl	8004ea0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 fc05 	bl	8004930 <UART_SetConfig>
 8004126:	4603      	mov	r3, r0
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e01b      	b.n	8004168 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800413e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689a      	ldr	r2, [r3, #8]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800414e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0201 	orr.w	r2, r2, #1
 800415e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 ff3f 	bl	8004fe4 <UART_CheckIdleState>
 8004166:	4603      	mov	r3, r0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b08a      	sub	sp, #40	@ 0x28
 8004174:	af02      	add	r7, sp, #8
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	603b      	str	r3, [r7, #0]
 800417c:	4613      	mov	r3, r2
 800417e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004184:	2b20      	cmp	r3, #32
 8004186:	d177      	bne.n	8004278 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d002      	beq.n	8004194 <HAL_UART_Transmit+0x24>
 800418e:	88fb      	ldrh	r3, [r7, #6]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d101      	bne.n	8004198 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e070      	b.n	800427a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2221      	movs	r2, #33	@ 0x21
 80041a4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041a6:	f7fd f85d 	bl	8001264 <HAL_GetTick>
 80041aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	88fa      	ldrh	r2, [r7, #6]
 80041b0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	88fa      	ldrh	r2, [r7, #6]
 80041b8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041c4:	d108      	bne.n	80041d8 <HAL_UART_Transmit+0x68>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d104      	bne.n	80041d8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80041ce:	2300      	movs	r3, #0
 80041d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	61bb      	str	r3, [r7, #24]
 80041d6:	e003      	b.n	80041e0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041dc:	2300      	movs	r3, #0
 80041de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041e0:	e02f      	b.n	8004242 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2200      	movs	r2, #0
 80041ea:	2180      	movs	r1, #128	@ 0x80
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 ffa1 	bl	8005134 <UART_WaitOnFlagUntilTimeout>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d004      	beq.n	8004202 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2220      	movs	r2, #32
 80041fc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e03b      	b.n	800427a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10b      	bne.n	8004220 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	881a      	ldrh	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004214:	b292      	uxth	r2, r2
 8004216:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	3302      	adds	r3, #2
 800421c:	61bb      	str	r3, [r7, #24]
 800421e:	e007      	b.n	8004230 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	781a      	ldrb	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	3301      	adds	r3, #1
 800422e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004236:	b29b      	uxth	r3, r3
 8004238:	3b01      	subs	r3, #1
 800423a:	b29a      	uxth	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1c9      	bne.n	80041e2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2200      	movs	r2, #0
 8004256:	2140      	movs	r1, #64	@ 0x40
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 ff6b 	bl	8005134 <UART_WaitOnFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d004      	beq.n	800426e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2220      	movs	r2, #32
 8004268:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e005      	b.n	800427a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2220      	movs	r2, #32
 8004272:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004274:	2300      	movs	r3, #0
 8004276:	e000      	b.n	800427a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004278:	2302      	movs	r3, #2
  }
}
 800427a:	4618      	mov	r0, r3
 800427c:	3720      	adds	r7, #32
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
	...

08004284 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b08a      	sub	sp, #40	@ 0x28
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	4613      	mov	r3, r2
 8004290:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004298:	2b20      	cmp	r3, #32
 800429a:	d137      	bne.n	800430c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <HAL_UART_Receive_IT+0x24>
 80042a2:	88fb      	ldrh	r3, [r7, #6]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d101      	bne.n	80042ac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e030      	b.n	800430e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a18      	ldr	r2, [pc, #96]	@ (8004318 <HAL_UART_Receive_IT+0x94>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d01f      	beq.n	80042fc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d018      	beq.n	80042fc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	e853 3f00 	ldrex	r3, [r3]
 80042d6:	613b      	str	r3, [r7, #16]
   return(result);
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80042de:	627b      	str	r3, [r7, #36]	@ 0x24
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	461a      	mov	r2, r3
 80042e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e8:	623b      	str	r3, [r7, #32]
 80042ea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ec:	69f9      	ldr	r1, [r7, #28]
 80042ee:	6a3a      	ldr	r2, [r7, #32]
 80042f0:	e841 2300 	strex	r3, r2, [r1]
 80042f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e6      	bne.n	80042ca <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80042fc:	88fb      	ldrh	r3, [r7, #6]
 80042fe:	461a      	mov	r2, r3
 8004300:	68b9      	ldr	r1, [r7, #8]
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 ff7e 	bl	8005204 <UART_Start_Receive_IT>
 8004308:	4603      	mov	r3, r0
 800430a:	e000      	b.n	800430e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800430c:	2302      	movs	r3, #2
  }
}
 800430e:	4618      	mov	r0, r3
 8004310:	3728      	adds	r7, #40	@ 0x28
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	40008000 	.word	0x40008000

0800431c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b0ba      	sub	sp, #232	@ 0xe8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004342:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004346:	f640 030f 	movw	r3, #2063	@ 0x80f
 800434a:	4013      	ands	r3, r2
 800434c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004350:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004354:	2b00      	cmp	r3, #0
 8004356:	d115      	bne.n	8004384 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800435c:	f003 0320 	and.w	r3, r3, #32
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00f      	beq.n	8004384 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004368:	f003 0320 	and.w	r3, r3, #32
 800436c:	2b00      	cmp	r3, #0
 800436e:	d009      	beq.n	8004384 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 82ae 	beq.w	80048d6 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	4798      	blx	r3
      }
      return;
 8004382:	e2a8      	b.n	80048d6 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004384:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 8117 	beq.w	80045bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800438e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d106      	bne.n	80043a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800439a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800439e:	4b85      	ldr	r3, [pc, #532]	@ (80045b4 <HAL_UART_IRQHandler+0x298>)
 80043a0:	4013      	ands	r3, r2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f000 810a 	beq.w	80045bc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80043a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d011      	beq.n	80043d8 <HAL_UART_IRQHandler+0xbc>
 80043b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00b      	beq.n	80043d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2201      	movs	r2, #1
 80043c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043ce:	f043 0201 	orr.w	r2, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d011      	beq.n	8004408 <HAL_UART_IRQHandler+0xec>
 80043e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00b      	beq.n	8004408 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2202      	movs	r2, #2
 80043f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043fe:	f043 0204 	orr.w	r2, r3, #4
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	d011      	beq.n	8004438 <HAL_UART_IRQHandler+0x11c>
 8004414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00b      	beq.n	8004438 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2204      	movs	r2, #4
 8004426:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800442e:	f043 0202 	orr.w	r2, r3, #2
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800443c:	f003 0308 	and.w	r3, r3, #8
 8004440:	2b00      	cmp	r3, #0
 8004442:	d017      	beq.n	8004474 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004448:	f003 0320 	and.w	r3, r3, #32
 800444c:	2b00      	cmp	r3, #0
 800444e:	d105      	bne.n	800445c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004450:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004454:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00b      	beq.n	8004474 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2208      	movs	r2, #8
 8004462:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800446a:	f043 0208 	orr.w	r2, r3, #8
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004478:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800447c:	2b00      	cmp	r3, #0
 800447e:	d012      	beq.n	80044a6 <HAL_UART_IRQHandler+0x18a>
 8004480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004484:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00c      	beq.n	80044a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004494:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800449c:	f043 0220 	orr.w	r2, r3, #32
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 8214 	beq.w	80048da <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80044b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044b6:	f003 0320 	and.w	r3, r3, #32
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00d      	beq.n	80044da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80044be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044c2:	f003 0320 	and.w	r3, r3, #32
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d007      	beq.n	80044da <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ee:	2b40      	cmp	r3, #64	@ 0x40
 80044f0:	d005      	beq.n	80044fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80044f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044f6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d04f      	beq.n	800459e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 ff46 	bl	8005390 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800450e:	2b40      	cmp	r3, #64	@ 0x40
 8004510:	d141      	bne.n	8004596 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	3308      	adds	r3, #8
 8004518:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004520:	e853 3f00 	ldrex	r3, [r3]
 8004524:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004528:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800452c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004530:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3308      	adds	r3, #8
 800453a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800453e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004542:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004546:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800454a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800454e:	e841 2300 	strex	r3, r2, [r1]
 8004552:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004556:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1d9      	bne.n	8004512 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004562:	2b00      	cmp	r3, #0
 8004564:	d013      	beq.n	800458e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800456a:	4a13      	ldr	r2, [pc, #76]	@ (80045b8 <HAL_UART_IRQHandler+0x29c>)
 800456c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004572:	4618      	mov	r0, r3
 8004574:	f7fc ffd1 	bl	800151a <HAL_DMA_Abort_IT>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d017      	beq.n	80045ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004588:	4610      	mov	r0, r2
 800458a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800458c:	e00f      	b.n	80045ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f9b8 	bl	8004904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004594:	e00b      	b.n	80045ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f9b4 	bl	8004904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800459c:	e007      	b.n	80045ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f9b0 	bl	8004904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80045ac:	e195      	b.n	80048da <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ae:	bf00      	nop
    return;
 80045b0:	e193      	b.n	80048da <HAL_UART_IRQHandler+0x5be>
 80045b2:	bf00      	nop
 80045b4:	04000120 	.word	0x04000120
 80045b8:	08005459 	.word	0x08005459

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	f040 814e 	bne.w	8004862 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80045c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045ca:	f003 0310 	and.w	r3, r3, #16
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 8147 	beq.w	8004862 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80045d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045d8:	f003 0310 	and.w	r3, r3, #16
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 8140 	beq.w	8004862 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2210      	movs	r2, #16
 80045e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045f4:	2b40      	cmp	r3, #64	@ 0x40
 80045f6:	f040 80b8 	bne.w	800476a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004606:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 8167 	beq.w	80048de <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004616:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800461a:	429a      	cmp	r2, r3
 800461c:	f080 815f 	bcs.w	80048de <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004626:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0320 	and.w	r3, r3, #32
 8004636:	2b00      	cmp	r3, #0
 8004638:	f040 8086 	bne.w	8004748 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004644:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004648:	e853 3f00 	ldrex	r3, [r3]
 800464c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004650:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004654:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004658:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	461a      	mov	r2, r3
 8004662:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004666:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800466a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004672:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004676:	e841 2300 	strex	r3, r2, [r1]
 800467a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800467e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1da      	bne.n	800463c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	3308      	adds	r3, #8
 800468c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004690:	e853 3f00 	ldrex	r3, [r3]
 8004694:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004696:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004698:	f023 0301 	bic.w	r3, r3, #1
 800469c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	3308      	adds	r3, #8
 80046a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80046aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80046ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80046b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80046b6:	e841 2300 	strex	r3, r2, [r1]
 80046ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80046bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1e1      	bne.n	8004686 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	3308      	adds	r3, #8
 80046c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046cc:	e853 3f00 	ldrex	r3, [r3]
 80046d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80046d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	3308      	adds	r3, #8
 80046e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80046e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80046e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80046ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80046ee:	e841 2300 	strex	r3, r2, [r1]
 80046f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80046f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1e3      	bne.n	80046c2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2220      	movs	r2, #32
 80046fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004710:	e853 3f00 	ldrex	r3, [r3]
 8004714:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004716:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004718:	f023 0310 	bic.w	r3, r3, #16
 800471c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	461a      	mov	r2, r3
 8004726:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800472a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800472c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004730:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004732:	e841 2300 	strex	r3, r2, [r1]
 8004736:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004738:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1e4      	bne.n	8004708 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004742:	4618      	mov	r0, r3
 8004744:	f7fc feab 	bl	800149e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2202      	movs	r2, #2
 800474c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800475a:	b29b      	uxth	r3, r3
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	b29b      	uxth	r3, r3
 8004760:	4619      	mov	r1, r3
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f8d8 	bl	8004918 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004768:	e0b9      	b.n	80048de <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004776:	b29b      	uxth	r3, r3
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004784:	b29b      	uxth	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 80ab 	beq.w	80048e2 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800478c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 80a6 	beq.w	80048e2 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800479e:	e853 3f00 	ldrex	r3, [r3]
 80047a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80047a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	461a      	mov	r2, r3
 80047b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80047b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80047ba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047c0:	e841 2300 	strex	r3, r2, [r1]
 80047c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1e4      	bne.n	8004796 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3308      	adds	r3, #8
 80047d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d6:	e853 3f00 	ldrex	r3, [r3]
 80047da:	623b      	str	r3, [r7, #32]
   return(result);
 80047dc:	6a3b      	ldr	r3, [r7, #32]
 80047de:	f023 0301 	bic.w	r3, r3, #1
 80047e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3308      	adds	r3, #8
 80047ec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80047f0:	633a      	str	r2, [r7, #48]	@ 0x30
 80047f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047f8:	e841 2300 	strex	r3, r2, [r1]
 80047fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1e3      	bne.n	80047cc <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2220      	movs	r2, #32
 8004808:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	e853 3f00 	ldrex	r3, [r3]
 8004824:	60fb      	str	r3, [r7, #12]
   return(result);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f023 0310 	bic.w	r3, r3, #16
 800482c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	461a      	mov	r2, r3
 8004836:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800483a:	61fb      	str	r3, [r7, #28]
 800483c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483e:	69b9      	ldr	r1, [r7, #24]
 8004840:	69fa      	ldr	r2, [r7, #28]
 8004842:	e841 2300 	strex	r3, r2, [r1]
 8004846:	617b      	str	r3, [r7, #20]
   return(result);
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1e4      	bne.n	8004818 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2202      	movs	r2, #2
 8004852:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004854:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004858:	4619      	mov	r1, r3
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f85c 	bl	8004918 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004860:	e03f      	b.n	80048e2 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004866:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00e      	beq.n	800488c <HAL_UART_IRQHandler+0x570>
 800486e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004872:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d008      	beq.n	800488c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004882:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 ffe3 	bl	8005850 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800488a:	e02d      	b.n	80048e8 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800488c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00e      	beq.n	80048b6 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800489c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d008      	beq.n	80048b6 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d01c      	beq.n	80048e6 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	4798      	blx	r3
    }
    return;
 80048b4:	e017      	b.n	80048e6 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80048b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d012      	beq.n	80048e8 <HAL_UART_IRQHandler+0x5cc>
 80048c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00c      	beq.n	80048e8 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 fdd8 	bl	8005484 <UART_EndTransmit_IT>
    return;
 80048d4:	e008      	b.n	80048e8 <HAL_UART_IRQHandler+0x5cc>
      return;
 80048d6:	bf00      	nop
 80048d8:	e006      	b.n	80048e8 <HAL_UART_IRQHandler+0x5cc>
    return;
 80048da:	bf00      	nop
 80048dc:	e004      	b.n	80048e8 <HAL_UART_IRQHandler+0x5cc>
      return;
 80048de:	bf00      	nop
 80048e0:	e002      	b.n	80048e8 <HAL_UART_IRQHandler+0x5cc>
      return;
 80048e2:	bf00      	nop
 80048e4:	e000      	b.n	80048e8 <HAL_UART_IRQHandler+0x5cc>
    return;
 80048e6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80048e8:	37e8      	adds	r7, #232	@ 0xe8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop

080048f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	460b      	mov	r3, r1
 8004922:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004934:	b08a      	sub	sp, #40	@ 0x28
 8004936:	af00      	add	r7, sp, #0
 8004938:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800493a:	2300      	movs	r3, #0
 800493c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	689a      	ldr	r2, [r3, #8]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	431a      	orrs	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	431a      	orrs	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	69db      	ldr	r3, [r3, #28]
 8004954:	4313      	orrs	r3, r2
 8004956:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	4ba4      	ldr	r3, [pc, #656]	@ (8004bf0 <UART_SetConfig+0x2c0>)
 8004960:	4013      	ands	r3, r2
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	6812      	ldr	r2, [r2, #0]
 8004966:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004968:	430b      	orrs	r3, r1
 800496a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a99      	ldr	r2, [pc, #612]	@ (8004bf4 <UART_SetConfig+0x2c4>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d004      	beq.n	800499c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004998:	4313      	orrs	r3, r2
 800499a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049ac:	430a      	orrs	r2, r1
 80049ae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a90      	ldr	r2, [pc, #576]	@ (8004bf8 <UART_SetConfig+0x2c8>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d126      	bne.n	8004a08 <UART_SetConfig+0xd8>
 80049ba:	4b90      	ldr	r3, [pc, #576]	@ (8004bfc <UART_SetConfig+0x2cc>)
 80049bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c0:	f003 0303 	and.w	r3, r3, #3
 80049c4:	2b03      	cmp	r3, #3
 80049c6:	d81b      	bhi.n	8004a00 <UART_SetConfig+0xd0>
 80049c8:	a201      	add	r2, pc, #4	@ (adr r2, 80049d0 <UART_SetConfig+0xa0>)
 80049ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ce:	bf00      	nop
 80049d0:	080049e1 	.word	0x080049e1
 80049d4:	080049f1 	.word	0x080049f1
 80049d8:	080049e9 	.word	0x080049e9
 80049dc:	080049f9 	.word	0x080049f9
 80049e0:	2301      	movs	r3, #1
 80049e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049e6:	e116      	b.n	8004c16 <UART_SetConfig+0x2e6>
 80049e8:	2302      	movs	r3, #2
 80049ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ee:	e112      	b.n	8004c16 <UART_SetConfig+0x2e6>
 80049f0:	2304      	movs	r3, #4
 80049f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049f6:	e10e      	b.n	8004c16 <UART_SetConfig+0x2e6>
 80049f8:	2308      	movs	r3, #8
 80049fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049fe:	e10a      	b.n	8004c16 <UART_SetConfig+0x2e6>
 8004a00:	2310      	movs	r3, #16
 8004a02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a06:	e106      	b.n	8004c16 <UART_SetConfig+0x2e6>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a7c      	ldr	r2, [pc, #496]	@ (8004c00 <UART_SetConfig+0x2d0>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d138      	bne.n	8004a84 <UART_SetConfig+0x154>
 8004a12:	4b7a      	ldr	r3, [pc, #488]	@ (8004bfc <UART_SetConfig+0x2cc>)
 8004a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a18:	f003 030c 	and.w	r3, r3, #12
 8004a1c:	2b0c      	cmp	r3, #12
 8004a1e:	d82d      	bhi.n	8004a7c <UART_SetConfig+0x14c>
 8004a20:	a201      	add	r2, pc, #4	@ (adr r2, 8004a28 <UART_SetConfig+0xf8>)
 8004a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a26:	bf00      	nop
 8004a28:	08004a5d 	.word	0x08004a5d
 8004a2c:	08004a7d 	.word	0x08004a7d
 8004a30:	08004a7d 	.word	0x08004a7d
 8004a34:	08004a7d 	.word	0x08004a7d
 8004a38:	08004a6d 	.word	0x08004a6d
 8004a3c:	08004a7d 	.word	0x08004a7d
 8004a40:	08004a7d 	.word	0x08004a7d
 8004a44:	08004a7d 	.word	0x08004a7d
 8004a48:	08004a65 	.word	0x08004a65
 8004a4c:	08004a7d 	.word	0x08004a7d
 8004a50:	08004a7d 	.word	0x08004a7d
 8004a54:	08004a7d 	.word	0x08004a7d
 8004a58:	08004a75 	.word	0x08004a75
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a62:	e0d8      	b.n	8004c16 <UART_SetConfig+0x2e6>
 8004a64:	2302      	movs	r3, #2
 8004a66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a6a:	e0d4      	b.n	8004c16 <UART_SetConfig+0x2e6>
 8004a6c:	2304      	movs	r3, #4
 8004a6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a72:	e0d0      	b.n	8004c16 <UART_SetConfig+0x2e6>
 8004a74:	2308      	movs	r3, #8
 8004a76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a7a:	e0cc      	b.n	8004c16 <UART_SetConfig+0x2e6>
 8004a7c:	2310      	movs	r3, #16
 8004a7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a82:	e0c8      	b.n	8004c16 <UART_SetConfig+0x2e6>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a5e      	ldr	r2, [pc, #376]	@ (8004c04 <UART_SetConfig+0x2d4>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d125      	bne.n	8004ada <UART_SetConfig+0x1aa>
 8004a8e:	4b5b      	ldr	r3, [pc, #364]	@ (8004bfc <UART_SetConfig+0x2cc>)
 8004a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a94:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004a98:	2b30      	cmp	r3, #48	@ 0x30
 8004a9a:	d016      	beq.n	8004aca <UART_SetConfig+0x19a>
 8004a9c:	2b30      	cmp	r3, #48	@ 0x30
 8004a9e:	d818      	bhi.n	8004ad2 <UART_SetConfig+0x1a2>
 8004aa0:	2b20      	cmp	r3, #32
 8004aa2:	d00a      	beq.n	8004aba <UART_SetConfig+0x18a>
 8004aa4:	2b20      	cmp	r3, #32
 8004aa6:	d814      	bhi.n	8004ad2 <UART_SetConfig+0x1a2>
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d002      	beq.n	8004ab2 <UART_SetConfig+0x182>
 8004aac:	2b10      	cmp	r3, #16
 8004aae:	d008      	beq.n	8004ac2 <UART_SetConfig+0x192>
 8004ab0:	e00f      	b.n	8004ad2 <UART_SetConfig+0x1a2>
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ab8:	e0ad      	b.n	8004c16 <UART_SetConfig+0x2e6>
 8004aba:	2302      	movs	r3, #2
 8004abc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ac0:	e0a9      	b.n	8004c16 <UART_SetConfig+0x2e6>
 8004ac2:	2304      	movs	r3, #4
 8004ac4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ac8:	e0a5      	b.n	8004c16 <UART_SetConfig+0x2e6>
 8004aca:	2308      	movs	r3, #8
 8004acc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ad0:	e0a1      	b.n	8004c16 <UART_SetConfig+0x2e6>
 8004ad2:	2310      	movs	r3, #16
 8004ad4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ad8:	e09d      	b.n	8004c16 <UART_SetConfig+0x2e6>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a4a      	ldr	r2, [pc, #296]	@ (8004c08 <UART_SetConfig+0x2d8>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d125      	bne.n	8004b30 <UART_SetConfig+0x200>
 8004ae4:	4b45      	ldr	r3, [pc, #276]	@ (8004bfc <UART_SetConfig+0x2cc>)
 8004ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004aee:	2bc0      	cmp	r3, #192	@ 0xc0
 8004af0:	d016      	beq.n	8004b20 <UART_SetConfig+0x1f0>
 8004af2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004af4:	d818      	bhi.n	8004b28 <UART_SetConfig+0x1f8>
 8004af6:	2b80      	cmp	r3, #128	@ 0x80
 8004af8:	d00a      	beq.n	8004b10 <UART_SetConfig+0x1e0>
 8004afa:	2b80      	cmp	r3, #128	@ 0x80
 8004afc:	d814      	bhi.n	8004b28 <UART_SetConfig+0x1f8>
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d002      	beq.n	8004b08 <UART_SetConfig+0x1d8>
 8004b02:	2b40      	cmp	r3, #64	@ 0x40
 8004b04:	d008      	beq.n	8004b18 <UART_SetConfig+0x1e8>
 8004b06:	e00f      	b.n	8004b28 <UART_SetConfig+0x1f8>
 8004b08:	2300      	movs	r3, #0
 8004b0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b0e:	e082      	b.n	8004c16 <UART_SetConfig+0x2e6>
 8004b10:	2302      	movs	r3, #2
 8004b12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b16:	e07e      	b.n	8004c16 <UART_SetConfig+0x2e6>
 8004b18:	2304      	movs	r3, #4
 8004b1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b1e:	e07a      	b.n	8004c16 <UART_SetConfig+0x2e6>
 8004b20:	2308      	movs	r3, #8
 8004b22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b26:	e076      	b.n	8004c16 <UART_SetConfig+0x2e6>
 8004b28:	2310      	movs	r3, #16
 8004b2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b2e:	e072      	b.n	8004c16 <UART_SetConfig+0x2e6>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a35      	ldr	r2, [pc, #212]	@ (8004c0c <UART_SetConfig+0x2dc>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d12a      	bne.n	8004b90 <UART_SetConfig+0x260>
 8004b3a:	4b30      	ldr	r3, [pc, #192]	@ (8004bfc <UART_SetConfig+0x2cc>)
 8004b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b48:	d01a      	beq.n	8004b80 <UART_SetConfig+0x250>
 8004b4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b4e:	d81b      	bhi.n	8004b88 <UART_SetConfig+0x258>
 8004b50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b54:	d00c      	beq.n	8004b70 <UART_SetConfig+0x240>
 8004b56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b5a:	d815      	bhi.n	8004b88 <UART_SetConfig+0x258>
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <UART_SetConfig+0x238>
 8004b60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b64:	d008      	beq.n	8004b78 <UART_SetConfig+0x248>
 8004b66:	e00f      	b.n	8004b88 <UART_SetConfig+0x258>
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b6e:	e052      	b.n	8004c16 <UART_SetConfig+0x2e6>
 8004b70:	2302      	movs	r3, #2
 8004b72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b76:	e04e      	b.n	8004c16 <UART_SetConfig+0x2e6>
 8004b78:	2304      	movs	r3, #4
 8004b7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b7e:	e04a      	b.n	8004c16 <UART_SetConfig+0x2e6>
 8004b80:	2308      	movs	r3, #8
 8004b82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b86:	e046      	b.n	8004c16 <UART_SetConfig+0x2e6>
 8004b88:	2310      	movs	r3, #16
 8004b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b8e:	e042      	b.n	8004c16 <UART_SetConfig+0x2e6>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a17      	ldr	r2, [pc, #92]	@ (8004bf4 <UART_SetConfig+0x2c4>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d13a      	bne.n	8004c10 <UART_SetConfig+0x2e0>
 8004b9a:	4b18      	ldr	r3, [pc, #96]	@ (8004bfc <UART_SetConfig+0x2cc>)
 8004b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ba4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ba8:	d01a      	beq.n	8004be0 <UART_SetConfig+0x2b0>
 8004baa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004bae:	d81b      	bhi.n	8004be8 <UART_SetConfig+0x2b8>
 8004bb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bb4:	d00c      	beq.n	8004bd0 <UART_SetConfig+0x2a0>
 8004bb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bba:	d815      	bhi.n	8004be8 <UART_SetConfig+0x2b8>
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d003      	beq.n	8004bc8 <UART_SetConfig+0x298>
 8004bc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bc4:	d008      	beq.n	8004bd8 <UART_SetConfig+0x2a8>
 8004bc6:	e00f      	b.n	8004be8 <UART_SetConfig+0x2b8>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bce:	e022      	b.n	8004c16 <UART_SetConfig+0x2e6>
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bd6:	e01e      	b.n	8004c16 <UART_SetConfig+0x2e6>
 8004bd8:	2304      	movs	r3, #4
 8004bda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bde:	e01a      	b.n	8004c16 <UART_SetConfig+0x2e6>
 8004be0:	2308      	movs	r3, #8
 8004be2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004be6:	e016      	b.n	8004c16 <UART_SetConfig+0x2e6>
 8004be8:	2310      	movs	r3, #16
 8004bea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bee:	e012      	b.n	8004c16 <UART_SetConfig+0x2e6>
 8004bf0:	efff69f3 	.word	0xefff69f3
 8004bf4:	40008000 	.word	0x40008000
 8004bf8:	40013800 	.word	0x40013800
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	40004400 	.word	0x40004400
 8004c04:	40004800 	.word	0x40004800
 8004c08:	40004c00 	.word	0x40004c00
 8004c0c:	40005000 	.word	0x40005000
 8004c10:	2310      	movs	r3, #16
 8004c12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a9f      	ldr	r2, [pc, #636]	@ (8004e98 <UART_SetConfig+0x568>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d17a      	bne.n	8004d16 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c20:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d824      	bhi.n	8004c72 <UART_SetConfig+0x342>
 8004c28:	a201      	add	r2, pc, #4	@ (adr r2, 8004c30 <UART_SetConfig+0x300>)
 8004c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2e:	bf00      	nop
 8004c30:	08004c55 	.word	0x08004c55
 8004c34:	08004c73 	.word	0x08004c73
 8004c38:	08004c5d 	.word	0x08004c5d
 8004c3c:	08004c73 	.word	0x08004c73
 8004c40:	08004c63 	.word	0x08004c63
 8004c44:	08004c73 	.word	0x08004c73
 8004c48:	08004c73 	.word	0x08004c73
 8004c4c:	08004c73 	.word	0x08004c73
 8004c50:	08004c6b 	.word	0x08004c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c54:	f7fd fc24 	bl	80024a0 <HAL_RCC_GetPCLK1Freq>
 8004c58:	61f8      	str	r0, [r7, #28]
        break;
 8004c5a:	e010      	b.n	8004c7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c5c:	4b8f      	ldr	r3, [pc, #572]	@ (8004e9c <UART_SetConfig+0x56c>)
 8004c5e:	61fb      	str	r3, [r7, #28]
        break;
 8004c60:	e00d      	b.n	8004c7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c62:	f7fd fb85 	bl	8002370 <HAL_RCC_GetSysClockFreq>
 8004c66:	61f8      	str	r0, [r7, #28]
        break;
 8004c68:	e009      	b.n	8004c7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c6e:	61fb      	str	r3, [r7, #28]
        break;
 8004c70:	e005      	b.n	8004c7e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004c7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 80fb 	beq.w	8004e7c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	4413      	add	r3, r2
 8004c90:	69fa      	ldr	r2, [r7, #28]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d305      	bcc.n	8004ca2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c9c:	69fa      	ldr	r2, [r7, #28]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d903      	bls.n	8004caa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004ca8:	e0e8      	b.n	8004e7c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	2200      	movs	r2, #0
 8004cae:	461c      	mov	r4, r3
 8004cb0:	4615      	mov	r5, r2
 8004cb2:	f04f 0200 	mov.w	r2, #0
 8004cb6:	f04f 0300 	mov.w	r3, #0
 8004cba:	022b      	lsls	r3, r5, #8
 8004cbc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004cc0:	0222      	lsls	r2, r4, #8
 8004cc2:	68f9      	ldr	r1, [r7, #12]
 8004cc4:	6849      	ldr	r1, [r1, #4]
 8004cc6:	0849      	lsrs	r1, r1, #1
 8004cc8:	2000      	movs	r0, #0
 8004cca:	4688      	mov	r8, r1
 8004ccc:	4681      	mov	r9, r0
 8004cce:	eb12 0a08 	adds.w	sl, r2, r8
 8004cd2:	eb43 0b09 	adc.w	fp, r3, r9
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	603b      	str	r3, [r7, #0]
 8004cde:	607a      	str	r2, [r7, #4]
 8004ce0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ce4:	4650      	mov	r0, sl
 8004ce6:	4659      	mov	r1, fp
 8004ce8:	f7fb fac2 	bl	8000270 <__aeabi_uldivmod>
 8004cec:	4602      	mov	r2, r0
 8004cee:	460b      	mov	r3, r1
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cfa:	d308      	bcc.n	8004d0e <UART_SetConfig+0x3de>
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d02:	d204      	bcs.n	8004d0e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	60da      	str	r2, [r3, #12]
 8004d0c:	e0b6      	b.n	8004e7c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d14:	e0b2      	b.n	8004e7c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d1e:	d15e      	bne.n	8004dde <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004d20:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d828      	bhi.n	8004d7a <UART_SetConfig+0x44a>
 8004d28:	a201      	add	r2, pc, #4	@ (adr r2, 8004d30 <UART_SetConfig+0x400>)
 8004d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2e:	bf00      	nop
 8004d30:	08004d55 	.word	0x08004d55
 8004d34:	08004d5d 	.word	0x08004d5d
 8004d38:	08004d65 	.word	0x08004d65
 8004d3c:	08004d7b 	.word	0x08004d7b
 8004d40:	08004d6b 	.word	0x08004d6b
 8004d44:	08004d7b 	.word	0x08004d7b
 8004d48:	08004d7b 	.word	0x08004d7b
 8004d4c:	08004d7b 	.word	0x08004d7b
 8004d50:	08004d73 	.word	0x08004d73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d54:	f7fd fba4 	bl	80024a0 <HAL_RCC_GetPCLK1Freq>
 8004d58:	61f8      	str	r0, [r7, #28]
        break;
 8004d5a:	e014      	b.n	8004d86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d5c:	f7fd fbb6 	bl	80024cc <HAL_RCC_GetPCLK2Freq>
 8004d60:	61f8      	str	r0, [r7, #28]
        break;
 8004d62:	e010      	b.n	8004d86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d64:	4b4d      	ldr	r3, [pc, #308]	@ (8004e9c <UART_SetConfig+0x56c>)
 8004d66:	61fb      	str	r3, [r7, #28]
        break;
 8004d68:	e00d      	b.n	8004d86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d6a:	f7fd fb01 	bl	8002370 <HAL_RCC_GetSysClockFreq>
 8004d6e:	61f8      	str	r0, [r7, #28]
        break;
 8004d70:	e009      	b.n	8004d86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d76:	61fb      	str	r3, [r7, #28]
        break;
 8004d78:	e005      	b.n	8004d86 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004d84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d077      	beq.n	8004e7c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	005a      	lsls	r2, r3, #1
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	085b      	lsrs	r3, r3, #1
 8004d96:	441a      	add	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	2b0f      	cmp	r3, #15
 8004da6:	d916      	bls.n	8004dd6 <UART_SetConfig+0x4a6>
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dae:	d212      	bcs.n	8004dd6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	f023 030f 	bic.w	r3, r3, #15
 8004db8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	085b      	lsrs	r3, r3, #1
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	f003 0307 	and.w	r3, r3, #7
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	8afb      	ldrh	r3, [r7, #22]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	8afa      	ldrh	r2, [r7, #22]
 8004dd2:	60da      	str	r2, [r3, #12]
 8004dd4:	e052      	b.n	8004e7c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004ddc:	e04e      	b.n	8004e7c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004dde:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004de2:	2b08      	cmp	r3, #8
 8004de4:	d827      	bhi.n	8004e36 <UART_SetConfig+0x506>
 8004de6:	a201      	add	r2, pc, #4	@ (adr r2, 8004dec <UART_SetConfig+0x4bc>)
 8004de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dec:	08004e11 	.word	0x08004e11
 8004df0:	08004e19 	.word	0x08004e19
 8004df4:	08004e21 	.word	0x08004e21
 8004df8:	08004e37 	.word	0x08004e37
 8004dfc:	08004e27 	.word	0x08004e27
 8004e00:	08004e37 	.word	0x08004e37
 8004e04:	08004e37 	.word	0x08004e37
 8004e08:	08004e37 	.word	0x08004e37
 8004e0c:	08004e2f 	.word	0x08004e2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e10:	f7fd fb46 	bl	80024a0 <HAL_RCC_GetPCLK1Freq>
 8004e14:	61f8      	str	r0, [r7, #28]
        break;
 8004e16:	e014      	b.n	8004e42 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e18:	f7fd fb58 	bl	80024cc <HAL_RCC_GetPCLK2Freq>
 8004e1c:	61f8      	str	r0, [r7, #28]
        break;
 8004e1e:	e010      	b.n	8004e42 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e20:	4b1e      	ldr	r3, [pc, #120]	@ (8004e9c <UART_SetConfig+0x56c>)
 8004e22:	61fb      	str	r3, [r7, #28]
        break;
 8004e24:	e00d      	b.n	8004e42 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e26:	f7fd faa3 	bl	8002370 <HAL_RCC_GetSysClockFreq>
 8004e2a:	61f8      	str	r0, [r7, #28]
        break;
 8004e2c:	e009      	b.n	8004e42 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e32:	61fb      	str	r3, [r7, #28]
        break;
 8004e34:	e005      	b.n	8004e42 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004e36:	2300      	movs	r3, #0
 8004e38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004e40:	bf00      	nop
    }

    if (pclk != 0U)
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d019      	beq.n	8004e7c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	085a      	lsrs	r2, r3, #1
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	441a      	add	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	2b0f      	cmp	r3, #15
 8004e60:	d909      	bls.n	8004e76 <UART_SetConfig+0x546>
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e68:	d205      	bcs.n	8004e76 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	60da      	str	r2, [r3, #12]
 8004e74:	e002      	b.n	8004e7c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004e88:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3728      	adds	r7, #40	@ 0x28
 8004e90:	46bd      	mov	sp, r7
 8004e92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e96:	bf00      	nop
 8004e98:	40008000 	.word	0x40008000
 8004e9c:	00f42400 	.word	0x00f42400

08004ea0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eac:	f003 0308 	and.w	r3, r3, #8
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00a      	beq.n	8004eca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00a      	beq.n	8004eec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00a      	beq.n	8004f0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f12:	f003 0304 	and.w	r3, r3, #4
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00a      	beq.n	8004f30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f34:	f003 0310 	and.w	r3, r3, #16
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00a      	beq.n	8004f52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f56:	f003 0320 	and.w	r3, r3, #32
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00a      	beq.n	8004f74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	430a      	orrs	r2, r1
 8004f72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d01a      	beq.n	8004fb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f9e:	d10a      	bne.n	8004fb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00a      	beq.n	8004fd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	605a      	str	r2, [r3, #4]
  }
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b098      	sub	sp, #96	@ 0x60
 8004fe8:	af02      	add	r7, sp, #8
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ff4:	f7fc f936 	bl	8001264 <HAL_GetTick>
 8004ff8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0308 	and.w	r3, r3, #8
 8005004:	2b08      	cmp	r3, #8
 8005006:	d12e      	bne.n	8005066 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005008:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005010:	2200      	movs	r2, #0
 8005012:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f88c 	bl	8005134 <UART_WaitOnFlagUntilTimeout>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d021      	beq.n	8005066 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800502a:	e853 3f00 	ldrex	r3, [r3]
 800502e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005032:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005036:	653b      	str	r3, [r7, #80]	@ 0x50
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	461a      	mov	r2, r3
 800503e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005040:	647b      	str	r3, [r7, #68]	@ 0x44
 8005042:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005044:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005046:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005048:	e841 2300 	strex	r3, r2, [r1]
 800504c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800504e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1e6      	bne.n	8005022 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2220      	movs	r2, #32
 8005058:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e062      	b.n	800512c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0304 	and.w	r3, r3, #4
 8005070:	2b04      	cmp	r3, #4
 8005072:	d149      	bne.n	8005108 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005074:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800507c:	2200      	movs	r2, #0
 800507e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f856 	bl	8005134 <UART_WaitOnFlagUntilTimeout>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d03c      	beq.n	8005108 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005096:	e853 3f00 	ldrex	r3, [r3]
 800509a:	623b      	str	r3, [r7, #32]
   return(result);
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	461a      	mov	r2, r3
 80050aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80050ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050b4:	e841 2300 	strex	r3, r2, [r1]
 80050b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1e6      	bne.n	800508e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3308      	adds	r3, #8
 80050c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	e853 3f00 	ldrex	r3, [r3]
 80050ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 0301 	bic.w	r3, r3, #1
 80050d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	3308      	adds	r3, #8
 80050de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050e0:	61fa      	str	r2, [r7, #28]
 80050e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e4:	69b9      	ldr	r1, [r7, #24]
 80050e6:	69fa      	ldr	r2, [r7, #28]
 80050e8:	e841 2300 	strex	r3, r2, [r1]
 80050ec:	617b      	str	r3, [r7, #20]
   return(result);
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1e5      	bne.n	80050c0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e011      	b.n	800512c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2220      	movs	r2, #32
 800510c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2220      	movs	r2, #32
 8005112:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3758      	adds	r7, #88	@ 0x58
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	603b      	str	r3, [r7, #0]
 8005140:	4613      	mov	r3, r2
 8005142:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005144:	e049      	b.n	80051da <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514c:	d045      	beq.n	80051da <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800514e:	f7fc f889 	bl	8001264 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	429a      	cmp	r2, r3
 800515c:	d302      	bcc.n	8005164 <UART_WaitOnFlagUntilTimeout+0x30>
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e048      	b.n	80051fa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0304 	and.w	r3, r3, #4
 8005172:	2b00      	cmp	r3, #0
 8005174:	d031      	beq.n	80051da <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	69db      	ldr	r3, [r3, #28]
 800517c:	f003 0308 	and.w	r3, r3, #8
 8005180:	2b08      	cmp	r3, #8
 8005182:	d110      	bne.n	80051a6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2208      	movs	r2, #8
 800518a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 f8ff 	bl	8005390 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2208      	movs	r2, #8
 8005196:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e029      	b.n	80051fa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	69db      	ldr	r3, [r3, #28]
 80051ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051b4:	d111      	bne.n	80051da <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80051be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f000 f8e5 	bl	8005390 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2220      	movs	r2, #32
 80051ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e00f      	b.n	80051fa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69da      	ldr	r2, [r3, #28]
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	4013      	ands	r3, r2
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	bf0c      	ite	eq
 80051ea:	2301      	moveq	r3, #1
 80051ec:	2300      	movne	r3, #0
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	461a      	mov	r2, r3
 80051f2:	79fb      	ldrb	r3, [r7, #7]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d0a6      	beq.n	8005146 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
	...

08005204 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005204:	b480      	push	{r7}
 8005206:	b097      	sub	sp, #92	@ 0x5c
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	4613      	mov	r3, r2
 8005210:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	88fa      	ldrh	r2, [r7, #6]
 800521c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	88fa      	ldrh	r2, [r7, #6]
 8005224:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005236:	d10e      	bne.n	8005256 <UART_Start_Receive_IT+0x52>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d105      	bne.n	800524c <UART_Start_Receive_IT+0x48>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005246:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800524a:	e02d      	b.n	80052a8 <UART_Start_Receive_IT+0xa4>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	22ff      	movs	r2, #255	@ 0xff
 8005250:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005254:	e028      	b.n	80052a8 <UART_Start_Receive_IT+0xa4>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10d      	bne.n	800527a <UART_Start_Receive_IT+0x76>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d104      	bne.n	8005270 <UART_Start_Receive_IT+0x6c>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	22ff      	movs	r2, #255	@ 0xff
 800526a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800526e:	e01b      	b.n	80052a8 <UART_Start_Receive_IT+0xa4>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	227f      	movs	r2, #127	@ 0x7f
 8005274:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005278:	e016      	b.n	80052a8 <UART_Start_Receive_IT+0xa4>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005282:	d10d      	bne.n	80052a0 <UART_Start_Receive_IT+0x9c>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d104      	bne.n	8005296 <UART_Start_Receive_IT+0x92>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	227f      	movs	r2, #127	@ 0x7f
 8005290:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005294:	e008      	b.n	80052a8 <UART_Start_Receive_IT+0xa4>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	223f      	movs	r2, #63	@ 0x3f
 800529a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800529e:	e003      	b.n	80052a8 <UART_Start_Receive_IT+0xa4>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2222      	movs	r2, #34	@ 0x22
 80052b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	3308      	adds	r3, #8
 80052be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052c2:	e853 3f00 	ldrex	r3, [r3]
 80052c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ca:	f043 0301 	orr.w	r3, r3, #1
 80052ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3308      	adds	r3, #8
 80052d6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80052d8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80052da:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052dc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80052de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052e0:	e841 2300 	strex	r3, r2, [r1]
 80052e4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80052e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1e5      	bne.n	80052b8 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052f4:	d107      	bne.n	8005306 <UART_Start_Receive_IT+0x102>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d103      	bne.n	8005306 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4a21      	ldr	r2, [pc, #132]	@ (8005388 <UART_Start_Receive_IT+0x184>)
 8005302:	669a      	str	r2, [r3, #104]	@ 0x68
 8005304:	e002      	b.n	800530c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4a20      	ldr	r2, [pc, #128]	@ (800538c <UART_Start_Receive_IT+0x188>)
 800530a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d019      	beq.n	8005348 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800531c:	e853 3f00 	ldrex	r3, [r3]
 8005320:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005324:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005328:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	461a      	mov	r2, r3
 8005330:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005332:	637b      	str	r3, [r7, #52]	@ 0x34
 8005334:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005336:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005338:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800533a:	e841 2300 	strex	r3, r2, [r1]
 800533e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1e6      	bne.n	8005314 <UART_Start_Receive_IT+0x110>
 8005346:	e018      	b.n	800537a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	e853 3f00 	ldrex	r3, [r3]
 8005354:	613b      	str	r3, [r7, #16]
   return(result);
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f043 0320 	orr.w	r3, r3, #32
 800535c:	653b      	str	r3, [r7, #80]	@ 0x50
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	461a      	mov	r2, r3
 8005364:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005366:	623b      	str	r3, [r7, #32]
 8005368:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536a:	69f9      	ldr	r1, [r7, #28]
 800536c:	6a3a      	ldr	r2, [r7, #32]
 800536e:	e841 2300 	strex	r3, r2, [r1]
 8005372:	61bb      	str	r3, [r7, #24]
   return(result);
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1e6      	bne.n	8005348 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	375c      	adds	r7, #92	@ 0x5c
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	08005695 	.word	0x08005695
 800538c:	080054d9 	.word	0x080054d9

08005390 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005390:	b480      	push	{r7}
 8005392:	b095      	sub	sp, #84	@ 0x54
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053a0:	e853 3f00 	ldrex	r3, [r3]
 80053a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	461a      	mov	r2, r3
 80053b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80053b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053be:	e841 2300 	strex	r3, r2, [r1]
 80053c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1e6      	bne.n	8005398 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	3308      	adds	r3, #8
 80053d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	f023 0301 	bic.w	r3, r3, #1
 80053e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	3308      	adds	r3, #8
 80053e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053f2:	e841 2300 	strex	r3, r2, [r1]
 80053f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1e5      	bne.n	80053ca <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005402:	2b01      	cmp	r3, #1
 8005404:	d118      	bne.n	8005438 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	e853 3f00 	ldrex	r3, [r3]
 8005412:	60bb      	str	r3, [r7, #8]
   return(result);
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f023 0310 	bic.w	r3, r3, #16
 800541a:	647b      	str	r3, [r7, #68]	@ 0x44
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	461a      	mov	r2, r3
 8005422:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005424:	61bb      	str	r3, [r7, #24]
 8005426:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005428:	6979      	ldr	r1, [r7, #20]
 800542a:	69ba      	ldr	r2, [r7, #24]
 800542c:	e841 2300 	strex	r3, r2, [r1]
 8005430:	613b      	str	r3, [r7, #16]
   return(result);
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1e6      	bne.n	8005406 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2220      	movs	r2, #32
 800543c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800544c:	bf00      	nop
 800544e:	3754      	adds	r7, #84	@ 0x54
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005464:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f7ff fa44 	bl	8004904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800547c:	bf00      	nop
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b088      	sub	sp, #32
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	e853 3f00 	ldrex	r3, [r3]
 8005498:	60bb      	str	r3, [r7, #8]
   return(result);
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054a0:	61fb      	str	r3, [r7, #28]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	461a      	mov	r2, r3
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	61bb      	str	r3, [r7, #24]
 80054ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ae:	6979      	ldr	r1, [r7, #20]
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	e841 2300 	strex	r3, r2, [r1]
 80054b6:	613b      	str	r3, [r7, #16]
   return(result);
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1e6      	bne.n	800548c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2220      	movs	r2, #32
 80054c2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7ff fa10 	bl	80048f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054d0:	bf00      	nop
 80054d2:	3720      	adds	r7, #32
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b09c      	sub	sp, #112	@ 0x70
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80054e6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054f0:	2b22      	cmp	r3, #34	@ 0x22
 80054f2:	f040 80be 	bne.w	8005672 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80054fc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005500:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005504:	b2d9      	uxtb	r1, r3
 8005506:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800550a:	b2da      	uxtb	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005510:	400a      	ands	r2, r1
 8005512:	b2d2      	uxtb	r2, r2
 8005514:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800551a:	1c5a      	adds	r2, r3, #1
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005526:	b29b      	uxth	r3, r3
 8005528:	3b01      	subs	r3, #1
 800552a:	b29a      	uxth	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005538:	b29b      	uxth	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	f040 80a3 	bne.w	8005686 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005546:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005548:	e853 3f00 	ldrex	r3, [r3]
 800554c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800554e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005550:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005554:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	461a      	mov	r2, r3
 800555c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800555e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005560:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005562:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005564:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005566:	e841 2300 	strex	r3, r2, [r1]
 800556a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800556c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1e6      	bne.n	8005540 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3308      	adds	r3, #8
 8005578:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005584:	f023 0301 	bic.w	r3, r3, #1
 8005588:	667b      	str	r3, [r7, #100]	@ 0x64
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	3308      	adds	r3, #8
 8005590:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005592:	647a      	str	r2, [r7, #68]	@ 0x44
 8005594:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005596:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005598:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800559a:	e841 2300 	strex	r3, r2, [r1]
 800559e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1e5      	bne.n	8005572 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2220      	movs	r2, #32
 80055aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a34      	ldr	r2, [pc, #208]	@ (8005690 <UART_RxISR_8BIT+0x1b8>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d01f      	beq.n	8005604 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d018      	beq.n	8005604 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055da:	e853 3f00 	ldrex	r3, [r3]
 80055de:	623b      	str	r3, [r7, #32]
   return(result);
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80055e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	461a      	mov	r2, r3
 80055ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80055f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055f8:	e841 2300 	strex	r3, r2, [r1]
 80055fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1e6      	bne.n	80055d2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005608:	2b01      	cmp	r3, #1
 800560a:	d12e      	bne.n	800566a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	e853 3f00 	ldrex	r3, [r3]
 800561e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f023 0310 	bic.w	r3, r3, #16
 8005626:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	461a      	mov	r2, r3
 800562e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005630:	61fb      	str	r3, [r7, #28]
 8005632:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005634:	69b9      	ldr	r1, [r7, #24]
 8005636:	69fa      	ldr	r2, [r7, #28]
 8005638:	e841 2300 	strex	r3, r2, [r1]
 800563c:	617b      	str	r3, [r7, #20]
   return(result);
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1e6      	bne.n	8005612 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	f003 0310 	and.w	r3, r3, #16
 800564e:	2b10      	cmp	r3, #16
 8005650:	d103      	bne.n	800565a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2210      	movs	r2, #16
 8005658:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005660:	4619      	mov	r1, r3
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7ff f958 	bl	8004918 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005668:	e00d      	b.n	8005686 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f7fb fafc 	bl	8000c68 <HAL_UART_RxCpltCallback>
}
 8005670:	e009      	b.n	8005686 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	8b1b      	ldrh	r3, [r3, #24]
 8005678:	b29a      	uxth	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0208 	orr.w	r2, r2, #8
 8005682:	b292      	uxth	r2, r2
 8005684:	831a      	strh	r2, [r3, #24]
}
 8005686:	bf00      	nop
 8005688:	3770      	adds	r7, #112	@ 0x70
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	40008000 	.word	0x40008000

08005694 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b09c      	sub	sp, #112	@ 0x70
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80056a2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056ac:	2b22      	cmp	r3, #34	@ 0x22
 80056ae:	f040 80be 	bne.w	800582e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80056b8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80056c2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80056c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80056ca:	4013      	ands	r3, r2
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056d6:	1c9a      	adds	r2, r3, #2
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	3b01      	subs	r3, #1
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f040 80a3 	bne.w	8005842 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005702:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005704:	e853 3f00 	ldrex	r3, [r3]
 8005708:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800570a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800570c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005710:	667b      	str	r3, [r7, #100]	@ 0x64
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	461a      	mov	r2, r3
 8005718:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800571a:	657b      	str	r3, [r7, #84]	@ 0x54
 800571c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005720:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005722:	e841 2300 	strex	r3, r2, [r1]
 8005726:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005728:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1e6      	bne.n	80056fc <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	3308      	adds	r3, #8
 8005734:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005738:	e853 3f00 	ldrex	r3, [r3]
 800573c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800573e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005740:	f023 0301 	bic.w	r3, r3, #1
 8005744:	663b      	str	r3, [r7, #96]	@ 0x60
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	3308      	adds	r3, #8
 800574c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800574e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005750:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005752:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005754:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005756:	e841 2300 	strex	r3, r2, [r1]
 800575a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800575c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1e5      	bne.n	800572e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2220      	movs	r2, #32
 8005766:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a34      	ldr	r2, [pc, #208]	@ (800584c <UART_RxISR_16BIT+0x1b8>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d01f      	beq.n	80057c0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d018      	beq.n	80057c0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	e853 3f00 	ldrex	r3, [r3]
 800579a:	61fb      	str	r3, [r7, #28]
   return(result);
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80057a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	461a      	mov	r2, r3
 80057aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057ae:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057b4:	e841 2300 	strex	r3, r2, [r1]
 80057b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1e6      	bne.n	800578e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d12e      	bne.n	8005826 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	e853 3f00 	ldrex	r3, [r3]
 80057da:	60bb      	str	r3, [r7, #8]
   return(result);
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	f023 0310 	bic.w	r3, r3, #16
 80057e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	461a      	mov	r2, r3
 80057ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057ec:	61bb      	str	r3, [r7, #24]
 80057ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f0:	6979      	ldr	r1, [r7, #20]
 80057f2:	69ba      	ldr	r2, [r7, #24]
 80057f4:	e841 2300 	strex	r3, r2, [r1]
 80057f8:	613b      	str	r3, [r7, #16]
   return(result);
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1e6      	bne.n	80057ce <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	f003 0310 	and.w	r3, r3, #16
 800580a:	2b10      	cmp	r3, #16
 800580c:	d103      	bne.n	8005816 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2210      	movs	r2, #16
 8005814:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800581c:	4619      	mov	r1, r3
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7ff f87a 	bl	8004918 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005824:	e00d      	b.n	8005842 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7fb fa1e 	bl	8000c68 <HAL_UART_RxCpltCallback>
}
 800582c:	e009      	b.n	8005842 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	8b1b      	ldrh	r3, [r3, #24]
 8005834:	b29a      	uxth	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f042 0208 	orr.w	r2, r2, #8
 800583e:	b292      	uxth	r2, r2
 8005840:	831a      	strh	r2, [r3, #24]
}
 8005842:	bf00      	nop
 8005844:	3770      	adds	r7, #112	@ 0x70
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	40008000 	.word	0x40008000

08005850 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <_strtol_l.constprop.0>:
 8005864:	2b24      	cmp	r3, #36	@ 0x24
 8005866:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800586a:	4686      	mov	lr, r0
 800586c:	4690      	mov	r8, r2
 800586e:	d801      	bhi.n	8005874 <_strtol_l.constprop.0+0x10>
 8005870:	2b01      	cmp	r3, #1
 8005872:	d106      	bne.n	8005882 <_strtol_l.constprop.0+0x1e>
 8005874:	f000 fa00 	bl	8005c78 <__errno>
 8005878:	2316      	movs	r3, #22
 800587a:	6003      	str	r3, [r0, #0]
 800587c:	2000      	movs	r0, #0
 800587e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005882:	4834      	ldr	r0, [pc, #208]	@ (8005954 <_strtol_l.constprop.0+0xf0>)
 8005884:	460d      	mov	r5, r1
 8005886:	462a      	mov	r2, r5
 8005888:	f815 4b01 	ldrb.w	r4, [r5], #1
 800588c:	5d06      	ldrb	r6, [r0, r4]
 800588e:	f016 0608 	ands.w	r6, r6, #8
 8005892:	d1f8      	bne.n	8005886 <_strtol_l.constprop.0+0x22>
 8005894:	2c2d      	cmp	r4, #45	@ 0x2d
 8005896:	d12d      	bne.n	80058f4 <_strtol_l.constprop.0+0x90>
 8005898:	782c      	ldrb	r4, [r5, #0]
 800589a:	2601      	movs	r6, #1
 800589c:	1c95      	adds	r5, r2, #2
 800589e:	f033 0210 	bics.w	r2, r3, #16
 80058a2:	d109      	bne.n	80058b8 <_strtol_l.constprop.0+0x54>
 80058a4:	2c30      	cmp	r4, #48	@ 0x30
 80058a6:	d12a      	bne.n	80058fe <_strtol_l.constprop.0+0x9a>
 80058a8:	782a      	ldrb	r2, [r5, #0]
 80058aa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80058ae:	2a58      	cmp	r2, #88	@ 0x58
 80058b0:	d125      	bne.n	80058fe <_strtol_l.constprop.0+0x9a>
 80058b2:	786c      	ldrb	r4, [r5, #1]
 80058b4:	2310      	movs	r3, #16
 80058b6:	3502      	adds	r5, #2
 80058b8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80058bc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80058c0:	2200      	movs	r2, #0
 80058c2:	fbbc f9f3 	udiv	r9, ip, r3
 80058c6:	4610      	mov	r0, r2
 80058c8:	fb03 ca19 	mls	sl, r3, r9, ip
 80058cc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80058d0:	2f09      	cmp	r7, #9
 80058d2:	d81b      	bhi.n	800590c <_strtol_l.constprop.0+0xa8>
 80058d4:	463c      	mov	r4, r7
 80058d6:	42a3      	cmp	r3, r4
 80058d8:	dd27      	ble.n	800592a <_strtol_l.constprop.0+0xc6>
 80058da:	1c57      	adds	r7, r2, #1
 80058dc:	d007      	beq.n	80058ee <_strtol_l.constprop.0+0x8a>
 80058de:	4581      	cmp	r9, r0
 80058e0:	d320      	bcc.n	8005924 <_strtol_l.constprop.0+0xc0>
 80058e2:	d101      	bne.n	80058e8 <_strtol_l.constprop.0+0x84>
 80058e4:	45a2      	cmp	sl, r4
 80058e6:	db1d      	blt.n	8005924 <_strtol_l.constprop.0+0xc0>
 80058e8:	fb00 4003 	mla	r0, r0, r3, r4
 80058ec:	2201      	movs	r2, #1
 80058ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058f2:	e7eb      	b.n	80058cc <_strtol_l.constprop.0+0x68>
 80058f4:	2c2b      	cmp	r4, #43	@ 0x2b
 80058f6:	bf04      	itt	eq
 80058f8:	782c      	ldrbeq	r4, [r5, #0]
 80058fa:	1c95      	addeq	r5, r2, #2
 80058fc:	e7cf      	b.n	800589e <_strtol_l.constprop.0+0x3a>
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1da      	bne.n	80058b8 <_strtol_l.constprop.0+0x54>
 8005902:	2c30      	cmp	r4, #48	@ 0x30
 8005904:	bf0c      	ite	eq
 8005906:	2308      	moveq	r3, #8
 8005908:	230a      	movne	r3, #10
 800590a:	e7d5      	b.n	80058b8 <_strtol_l.constprop.0+0x54>
 800590c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005910:	2f19      	cmp	r7, #25
 8005912:	d801      	bhi.n	8005918 <_strtol_l.constprop.0+0xb4>
 8005914:	3c37      	subs	r4, #55	@ 0x37
 8005916:	e7de      	b.n	80058d6 <_strtol_l.constprop.0+0x72>
 8005918:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800591c:	2f19      	cmp	r7, #25
 800591e:	d804      	bhi.n	800592a <_strtol_l.constprop.0+0xc6>
 8005920:	3c57      	subs	r4, #87	@ 0x57
 8005922:	e7d8      	b.n	80058d6 <_strtol_l.constprop.0+0x72>
 8005924:	f04f 32ff 	mov.w	r2, #4294967295
 8005928:	e7e1      	b.n	80058ee <_strtol_l.constprop.0+0x8a>
 800592a:	1c53      	adds	r3, r2, #1
 800592c:	d108      	bne.n	8005940 <_strtol_l.constprop.0+0xdc>
 800592e:	2322      	movs	r3, #34	@ 0x22
 8005930:	f8ce 3000 	str.w	r3, [lr]
 8005934:	4660      	mov	r0, ip
 8005936:	f1b8 0f00 	cmp.w	r8, #0
 800593a:	d0a0      	beq.n	800587e <_strtol_l.constprop.0+0x1a>
 800593c:	1e69      	subs	r1, r5, #1
 800593e:	e006      	b.n	800594e <_strtol_l.constprop.0+0xea>
 8005940:	b106      	cbz	r6, 8005944 <_strtol_l.constprop.0+0xe0>
 8005942:	4240      	negs	r0, r0
 8005944:	f1b8 0f00 	cmp.w	r8, #0
 8005948:	d099      	beq.n	800587e <_strtol_l.constprop.0+0x1a>
 800594a:	2a00      	cmp	r2, #0
 800594c:	d1f6      	bne.n	800593c <_strtol_l.constprop.0+0xd8>
 800594e:	f8c8 1000 	str.w	r1, [r8]
 8005952:	e794      	b.n	800587e <_strtol_l.constprop.0+0x1a>
 8005954:	08006c69 	.word	0x08006c69

08005958 <strtol>:
 8005958:	4613      	mov	r3, r2
 800595a:	460a      	mov	r2, r1
 800595c:	4601      	mov	r1, r0
 800595e:	4802      	ldr	r0, [pc, #8]	@ (8005968 <strtol+0x10>)
 8005960:	6800      	ldr	r0, [r0, #0]
 8005962:	f7ff bf7f 	b.w	8005864 <_strtol_l.constprop.0>
 8005966:	bf00      	nop
 8005968:	20000018 	.word	0x20000018

0800596c <std>:
 800596c:	2300      	movs	r3, #0
 800596e:	b510      	push	{r4, lr}
 8005970:	4604      	mov	r4, r0
 8005972:	e9c0 3300 	strd	r3, r3, [r0]
 8005976:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800597a:	6083      	str	r3, [r0, #8]
 800597c:	8181      	strh	r1, [r0, #12]
 800597e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005980:	81c2      	strh	r2, [r0, #14]
 8005982:	6183      	str	r3, [r0, #24]
 8005984:	4619      	mov	r1, r3
 8005986:	2208      	movs	r2, #8
 8005988:	305c      	adds	r0, #92	@ 0x5c
 800598a:	f000 f926 	bl	8005bda <memset>
 800598e:	4b0d      	ldr	r3, [pc, #52]	@ (80059c4 <std+0x58>)
 8005990:	6263      	str	r3, [r4, #36]	@ 0x24
 8005992:	4b0d      	ldr	r3, [pc, #52]	@ (80059c8 <std+0x5c>)
 8005994:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005996:	4b0d      	ldr	r3, [pc, #52]	@ (80059cc <std+0x60>)
 8005998:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800599a:	4b0d      	ldr	r3, [pc, #52]	@ (80059d0 <std+0x64>)
 800599c:	6323      	str	r3, [r4, #48]	@ 0x30
 800599e:	4b0d      	ldr	r3, [pc, #52]	@ (80059d4 <std+0x68>)
 80059a0:	6224      	str	r4, [r4, #32]
 80059a2:	429c      	cmp	r4, r3
 80059a4:	d006      	beq.n	80059b4 <std+0x48>
 80059a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80059aa:	4294      	cmp	r4, r2
 80059ac:	d002      	beq.n	80059b4 <std+0x48>
 80059ae:	33d0      	adds	r3, #208	@ 0xd0
 80059b0:	429c      	cmp	r4, r3
 80059b2:	d105      	bne.n	80059c0 <std+0x54>
 80059b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80059b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059bc:	f000 b986 	b.w	8005ccc <__retarget_lock_init_recursive>
 80059c0:	bd10      	pop	{r4, pc}
 80059c2:	bf00      	nop
 80059c4:	08005b55 	.word	0x08005b55
 80059c8:	08005b77 	.word	0x08005b77
 80059cc:	08005baf 	.word	0x08005baf
 80059d0:	08005bd3 	.word	0x08005bd3
 80059d4:	20000218 	.word	0x20000218

080059d8 <stdio_exit_handler>:
 80059d8:	4a02      	ldr	r2, [pc, #8]	@ (80059e4 <stdio_exit_handler+0xc>)
 80059da:	4903      	ldr	r1, [pc, #12]	@ (80059e8 <stdio_exit_handler+0x10>)
 80059dc:	4803      	ldr	r0, [pc, #12]	@ (80059ec <stdio_exit_handler+0x14>)
 80059de:	f000 b869 	b.w	8005ab4 <_fwalk_sglue>
 80059e2:	bf00      	nop
 80059e4:	2000000c 	.word	0x2000000c
 80059e8:	0800681d 	.word	0x0800681d
 80059ec:	2000001c 	.word	0x2000001c

080059f0 <cleanup_stdio>:
 80059f0:	6841      	ldr	r1, [r0, #4]
 80059f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005a24 <cleanup_stdio+0x34>)
 80059f4:	4299      	cmp	r1, r3
 80059f6:	b510      	push	{r4, lr}
 80059f8:	4604      	mov	r4, r0
 80059fa:	d001      	beq.n	8005a00 <cleanup_stdio+0x10>
 80059fc:	f000 ff0e 	bl	800681c <_fflush_r>
 8005a00:	68a1      	ldr	r1, [r4, #8]
 8005a02:	4b09      	ldr	r3, [pc, #36]	@ (8005a28 <cleanup_stdio+0x38>)
 8005a04:	4299      	cmp	r1, r3
 8005a06:	d002      	beq.n	8005a0e <cleanup_stdio+0x1e>
 8005a08:	4620      	mov	r0, r4
 8005a0a:	f000 ff07 	bl	800681c <_fflush_r>
 8005a0e:	68e1      	ldr	r1, [r4, #12]
 8005a10:	4b06      	ldr	r3, [pc, #24]	@ (8005a2c <cleanup_stdio+0x3c>)
 8005a12:	4299      	cmp	r1, r3
 8005a14:	d004      	beq.n	8005a20 <cleanup_stdio+0x30>
 8005a16:	4620      	mov	r0, r4
 8005a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a1c:	f000 befe 	b.w	800681c <_fflush_r>
 8005a20:	bd10      	pop	{r4, pc}
 8005a22:	bf00      	nop
 8005a24:	20000218 	.word	0x20000218
 8005a28:	20000280 	.word	0x20000280
 8005a2c:	200002e8 	.word	0x200002e8

08005a30 <global_stdio_init.part.0>:
 8005a30:	b510      	push	{r4, lr}
 8005a32:	4b0b      	ldr	r3, [pc, #44]	@ (8005a60 <global_stdio_init.part.0+0x30>)
 8005a34:	4c0b      	ldr	r4, [pc, #44]	@ (8005a64 <global_stdio_init.part.0+0x34>)
 8005a36:	4a0c      	ldr	r2, [pc, #48]	@ (8005a68 <global_stdio_init.part.0+0x38>)
 8005a38:	601a      	str	r2, [r3, #0]
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	2104      	movs	r1, #4
 8005a40:	f7ff ff94 	bl	800596c <std>
 8005a44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005a48:	2201      	movs	r2, #1
 8005a4a:	2109      	movs	r1, #9
 8005a4c:	f7ff ff8e 	bl	800596c <std>
 8005a50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005a54:	2202      	movs	r2, #2
 8005a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a5a:	2112      	movs	r1, #18
 8005a5c:	f7ff bf86 	b.w	800596c <std>
 8005a60:	20000350 	.word	0x20000350
 8005a64:	20000218 	.word	0x20000218
 8005a68:	080059d9 	.word	0x080059d9

08005a6c <__sfp_lock_acquire>:
 8005a6c:	4801      	ldr	r0, [pc, #4]	@ (8005a74 <__sfp_lock_acquire+0x8>)
 8005a6e:	f000 b92e 	b.w	8005cce <__retarget_lock_acquire_recursive>
 8005a72:	bf00      	nop
 8005a74:	20000359 	.word	0x20000359

08005a78 <__sfp_lock_release>:
 8005a78:	4801      	ldr	r0, [pc, #4]	@ (8005a80 <__sfp_lock_release+0x8>)
 8005a7a:	f000 b929 	b.w	8005cd0 <__retarget_lock_release_recursive>
 8005a7e:	bf00      	nop
 8005a80:	20000359 	.word	0x20000359

08005a84 <__sinit>:
 8005a84:	b510      	push	{r4, lr}
 8005a86:	4604      	mov	r4, r0
 8005a88:	f7ff fff0 	bl	8005a6c <__sfp_lock_acquire>
 8005a8c:	6a23      	ldr	r3, [r4, #32]
 8005a8e:	b11b      	cbz	r3, 8005a98 <__sinit+0x14>
 8005a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a94:	f7ff bff0 	b.w	8005a78 <__sfp_lock_release>
 8005a98:	4b04      	ldr	r3, [pc, #16]	@ (8005aac <__sinit+0x28>)
 8005a9a:	6223      	str	r3, [r4, #32]
 8005a9c:	4b04      	ldr	r3, [pc, #16]	@ (8005ab0 <__sinit+0x2c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1f5      	bne.n	8005a90 <__sinit+0xc>
 8005aa4:	f7ff ffc4 	bl	8005a30 <global_stdio_init.part.0>
 8005aa8:	e7f2      	b.n	8005a90 <__sinit+0xc>
 8005aaa:	bf00      	nop
 8005aac:	080059f1 	.word	0x080059f1
 8005ab0:	20000350 	.word	0x20000350

08005ab4 <_fwalk_sglue>:
 8005ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ab8:	4607      	mov	r7, r0
 8005aba:	4688      	mov	r8, r1
 8005abc:	4614      	mov	r4, r2
 8005abe:	2600      	movs	r6, #0
 8005ac0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ac4:	f1b9 0901 	subs.w	r9, r9, #1
 8005ac8:	d505      	bpl.n	8005ad6 <_fwalk_sglue+0x22>
 8005aca:	6824      	ldr	r4, [r4, #0]
 8005acc:	2c00      	cmp	r4, #0
 8005ace:	d1f7      	bne.n	8005ac0 <_fwalk_sglue+0xc>
 8005ad0:	4630      	mov	r0, r6
 8005ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ad6:	89ab      	ldrh	r3, [r5, #12]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d907      	bls.n	8005aec <_fwalk_sglue+0x38>
 8005adc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	d003      	beq.n	8005aec <_fwalk_sglue+0x38>
 8005ae4:	4629      	mov	r1, r5
 8005ae6:	4638      	mov	r0, r7
 8005ae8:	47c0      	blx	r8
 8005aea:	4306      	orrs	r6, r0
 8005aec:	3568      	adds	r5, #104	@ 0x68
 8005aee:	e7e9      	b.n	8005ac4 <_fwalk_sglue+0x10>

08005af0 <iprintf>:
 8005af0:	b40f      	push	{r0, r1, r2, r3}
 8005af2:	b507      	push	{r0, r1, r2, lr}
 8005af4:	4906      	ldr	r1, [pc, #24]	@ (8005b10 <iprintf+0x20>)
 8005af6:	ab04      	add	r3, sp, #16
 8005af8:	6808      	ldr	r0, [r1, #0]
 8005afa:	f853 2b04 	ldr.w	r2, [r3], #4
 8005afe:	6881      	ldr	r1, [r0, #8]
 8005b00:	9301      	str	r3, [sp, #4]
 8005b02:	f000 fb61 	bl	80061c8 <_vfiprintf_r>
 8005b06:	b003      	add	sp, #12
 8005b08:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b0c:	b004      	add	sp, #16
 8005b0e:	4770      	bx	lr
 8005b10:	20000018 	.word	0x20000018

08005b14 <siprintf>:
 8005b14:	b40e      	push	{r1, r2, r3}
 8005b16:	b500      	push	{lr}
 8005b18:	b09c      	sub	sp, #112	@ 0x70
 8005b1a:	ab1d      	add	r3, sp, #116	@ 0x74
 8005b1c:	9002      	str	r0, [sp, #8]
 8005b1e:	9006      	str	r0, [sp, #24]
 8005b20:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005b24:	4809      	ldr	r0, [pc, #36]	@ (8005b4c <siprintf+0x38>)
 8005b26:	9107      	str	r1, [sp, #28]
 8005b28:	9104      	str	r1, [sp, #16]
 8005b2a:	4909      	ldr	r1, [pc, #36]	@ (8005b50 <siprintf+0x3c>)
 8005b2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b30:	9105      	str	r1, [sp, #20]
 8005b32:	6800      	ldr	r0, [r0, #0]
 8005b34:	9301      	str	r3, [sp, #4]
 8005b36:	a902      	add	r1, sp, #8
 8005b38:	f000 fa20 	bl	8005f7c <_svfiprintf_r>
 8005b3c:	9b02      	ldr	r3, [sp, #8]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	701a      	strb	r2, [r3, #0]
 8005b42:	b01c      	add	sp, #112	@ 0x70
 8005b44:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b48:	b003      	add	sp, #12
 8005b4a:	4770      	bx	lr
 8005b4c:	20000018 	.word	0x20000018
 8005b50:	ffff0208 	.word	0xffff0208

08005b54 <__sread>:
 8005b54:	b510      	push	{r4, lr}
 8005b56:	460c      	mov	r4, r1
 8005b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b5c:	f000 f868 	bl	8005c30 <_read_r>
 8005b60:	2800      	cmp	r0, #0
 8005b62:	bfab      	itete	ge
 8005b64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005b66:	89a3      	ldrhlt	r3, [r4, #12]
 8005b68:	181b      	addge	r3, r3, r0
 8005b6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005b6e:	bfac      	ite	ge
 8005b70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005b72:	81a3      	strhlt	r3, [r4, #12]
 8005b74:	bd10      	pop	{r4, pc}

08005b76 <__swrite>:
 8005b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b7a:	461f      	mov	r7, r3
 8005b7c:	898b      	ldrh	r3, [r1, #12]
 8005b7e:	05db      	lsls	r3, r3, #23
 8005b80:	4605      	mov	r5, r0
 8005b82:	460c      	mov	r4, r1
 8005b84:	4616      	mov	r6, r2
 8005b86:	d505      	bpl.n	8005b94 <__swrite+0x1e>
 8005b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f000 f83c 	bl	8005c0c <_lseek_r>
 8005b94:	89a3      	ldrh	r3, [r4, #12]
 8005b96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b9e:	81a3      	strh	r3, [r4, #12]
 8005ba0:	4632      	mov	r2, r6
 8005ba2:	463b      	mov	r3, r7
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005baa:	f000 b853 	b.w	8005c54 <_write_r>

08005bae <__sseek>:
 8005bae:	b510      	push	{r4, lr}
 8005bb0:	460c      	mov	r4, r1
 8005bb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bb6:	f000 f829 	bl	8005c0c <_lseek_r>
 8005bba:	1c43      	adds	r3, r0, #1
 8005bbc:	89a3      	ldrh	r3, [r4, #12]
 8005bbe:	bf15      	itete	ne
 8005bc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005bc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005bc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005bca:	81a3      	strheq	r3, [r4, #12]
 8005bcc:	bf18      	it	ne
 8005bce:	81a3      	strhne	r3, [r4, #12]
 8005bd0:	bd10      	pop	{r4, pc}

08005bd2 <__sclose>:
 8005bd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bd6:	f000 b809 	b.w	8005bec <_close_r>

08005bda <memset>:
 8005bda:	4402      	add	r2, r0
 8005bdc:	4603      	mov	r3, r0
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d100      	bne.n	8005be4 <memset+0xa>
 8005be2:	4770      	bx	lr
 8005be4:	f803 1b01 	strb.w	r1, [r3], #1
 8005be8:	e7f9      	b.n	8005bde <memset+0x4>
	...

08005bec <_close_r>:
 8005bec:	b538      	push	{r3, r4, r5, lr}
 8005bee:	4d06      	ldr	r5, [pc, #24]	@ (8005c08 <_close_r+0x1c>)
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	4604      	mov	r4, r0
 8005bf4:	4608      	mov	r0, r1
 8005bf6:	602b      	str	r3, [r5, #0]
 8005bf8:	f7fb fa25 	bl	8001046 <_close>
 8005bfc:	1c43      	adds	r3, r0, #1
 8005bfe:	d102      	bne.n	8005c06 <_close_r+0x1a>
 8005c00:	682b      	ldr	r3, [r5, #0]
 8005c02:	b103      	cbz	r3, 8005c06 <_close_r+0x1a>
 8005c04:	6023      	str	r3, [r4, #0]
 8005c06:	bd38      	pop	{r3, r4, r5, pc}
 8005c08:	20000354 	.word	0x20000354

08005c0c <_lseek_r>:
 8005c0c:	b538      	push	{r3, r4, r5, lr}
 8005c0e:	4d07      	ldr	r5, [pc, #28]	@ (8005c2c <_lseek_r+0x20>)
 8005c10:	4604      	mov	r4, r0
 8005c12:	4608      	mov	r0, r1
 8005c14:	4611      	mov	r1, r2
 8005c16:	2200      	movs	r2, #0
 8005c18:	602a      	str	r2, [r5, #0]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	f7fb fa3a 	bl	8001094 <_lseek>
 8005c20:	1c43      	adds	r3, r0, #1
 8005c22:	d102      	bne.n	8005c2a <_lseek_r+0x1e>
 8005c24:	682b      	ldr	r3, [r5, #0]
 8005c26:	b103      	cbz	r3, 8005c2a <_lseek_r+0x1e>
 8005c28:	6023      	str	r3, [r4, #0]
 8005c2a:	bd38      	pop	{r3, r4, r5, pc}
 8005c2c:	20000354 	.word	0x20000354

08005c30 <_read_r>:
 8005c30:	b538      	push	{r3, r4, r5, lr}
 8005c32:	4d07      	ldr	r5, [pc, #28]	@ (8005c50 <_read_r+0x20>)
 8005c34:	4604      	mov	r4, r0
 8005c36:	4608      	mov	r0, r1
 8005c38:	4611      	mov	r1, r2
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	602a      	str	r2, [r5, #0]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	f7fb f9c8 	bl	8000fd4 <_read>
 8005c44:	1c43      	adds	r3, r0, #1
 8005c46:	d102      	bne.n	8005c4e <_read_r+0x1e>
 8005c48:	682b      	ldr	r3, [r5, #0]
 8005c4a:	b103      	cbz	r3, 8005c4e <_read_r+0x1e>
 8005c4c:	6023      	str	r3, [r4, #0]
 8005c4e:	bd38      	pop	{r3, r4, r5, pc}
 8005c50:	20000354 	.word	0x20000354

08005c54 <_write_r>:
 8005c54:	b538      	push	{r3, r4, r5, lr}
 8005c56:	4d07      	ldr	r5, [pc, #28]	@ (8005c74 <_write_r+0x20>)
 8005c58:	4604      	mov	r4, r0
 8005c5a:	4608      	mov	r0, r1
 8005c5c:	4611      	mov	r1, r2
 8005c5e:	2200      	movs	r2, #0
 8005c60:	602a      	str	r2, [r5, #0]
 8005c62:	461a      	mov	r2, r3
 8005c64:	f7fb f9d3 	bl	800100e <_write>
 8005c68:	1c43      	adds	r3, r0, #1
 8005c6a:	d102      	bne.n	8005c72 <_write_r+0x1e>
 8005c6c:	682b      	ldr	r3, [r5, #0]
 8005c6e:	b103      	cbz	r3, 8005c72 <_write_r+0x1e>
 8005c70:	6023      	str	r3, [r4, #0]
 8005c72:	bd38      	pop	{r3, r4, r5, pc}
 8005c74:	20000354 	.word	0x20000354

08005c78 <__errno>:
 8005c78:	4b01      	ldr	r3, [pc, #4]	@ (8005c80 <__errno+0x8>)
 8005c7a:	6818      	ldr	r0, [r3, #0]
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	20000018 	.word	0x20000018

08005c84 <__libc_init_array>:
 8005c84:	b570      	push	{r4, r5, r6, lr}
 8005c86:	4d0d      	ldr	r5, [pc, #52]	@ (8005cbc <__libc_init_array+0x38>)
 8005c88:	4c0d      	ldr	r4, [pc, #52]	@ (8005cc0 <__libc_init_array+0x3c>)
 8005c8a:	1b64      	subs	r4, r4, r5
 8005c8c:	10a4      	asrs	r4, r4, #2
 8005c8e:	2600      	movs	r6, #0
 8005c90:	42a6      	cmp	r6, r4
 8005c92:	d109      	bne.n	8005ca8 <__libc_init_array+0x24>
 8005c94:	4d0b      	ldr	r5, [pc, #44]	@ (8005cc4 <__libc_init_array+0x40>)
 8005c96:	4c0c      	ldr	r4, [pc, #48]	@ (8005cc8 <__libc_init_array+0x44>)
 8005c98:	f000 ff6e 	bl	8006b78 <_init>
 8005c9c:	1b64      	subs	r4, r4, r5
 8005c9e:	10a4      	asrs	r4, r4, #2
 8005ca0:	2600      	movs	r6, #0
 8005ca2:	42a6      	cmp	r6, r4
 8005ca4:	d105      	bne.n	8005cb2 <__libc_init_array+0x2e>
 8005ca6:	bd70      	pop	{r4, r5, r6, pc}
 8005ca8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cac:	4798      	blx	r3
 8005cae:	3601      	adds	r6, #1
 8005cb0:	e7ee      	b.n	8005c90 <__libc_init_array+0xc>
 8005cb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cb6:	4798      	blx	r3
 8005cb8:	3601      	adds	r6, #1
 8005cba:	e7f2      	b.n	8005ca2 <__libc_init_array+0x1e>
 8005cbc:	08006da4 	.word	0x08006da4
 8005cc0:	08006da4 	.word	0x08006da4
 8005cc4:	08006da4 	.word	0x08006da4
 8005cc8:	08006da8 	.word	0x08006da8

08005ccc <__retarget_lock_init_recursive>:
 8005ccc:	4770      	bx	lr

08005cce <__retarget_lock_acquire_recursive>:
 8005cce:	4770      	bx	lr

08005cd0 <__retarget_lock_release_recursive>:
 8005cd0:	4770      	bx	lr
	...

08005cd4 <_free_r>:
 8005cd4:	b538      	push	{r3, r4, r5, lr}
 8005cd6:	4605      	mov	r5, r0
 8005cd8:	2900      	cmp	r1, #0
 8005cda:	d041      	beq.n	8005d60 <_free_r+0x8c>
 8005cdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ce0:	1f0c      	subs	r4, r1, #4
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	bfb8      	it	lt
 8005ce6:	18e4      	addlt	r4, r4, r3
 8005ce8:	f000 f8e0 	bl	8005eac <__malloc_lock>
 8005cec:	4a1d      	ldr	r2, [pc, #116]	@ (8005d64 <_free_r+0x90>)
 8005cee:	6813      	ldr	r3, [r2, #0]
 8005cf0:	b933      	cbnz	r3, 8005d00 <_free_r+0x2c>
 8005cf2:	6063      	str	r3, [r4, #4]
 8005cf4:	6014      	str	r4, [r2, #0]
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cfc:	f000 b8dc 	b.w	8005eb8 <__malloc_unlock>
 8005d00:	42a3      	cmp	r3, r4
 8005d02:	d908      	bls.n	8005d16 <_free_r+0x42>
 8005d04:	6820      	ldr	r0, [r4, #0]
 8005d06:	1821      	adds	r1, r4, r0
 8005d08:	428b      	cmp	r3, r1
 8005d0a:	bf01      	itttt	eq
 8005d0c:	6819      	ldreq	r1, [r3, #0]
 8005d0e:	685b      	ldreq	r3, [r3, #4]
 8005d10:	1809      	addeq	r1, r1, r0
 8005d12:	6021      	streq	r1, [r4, #0]
 8005d14:	e7ed      	b.n	8005cf2 <_free_r+0x1e>
 8005d16:	461a      	mov	r2, r3
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	b10b      	cbz	r3, 8005d20 <_free_r+0x4c>
 8005d1c:	42a3      	cmp	r3, r4
 8005d1e:	d9fa      	bls.n	8005d16 <_free_r+0x42>
 8005d20:	6811      	ldr	r1, [r2, #0]
 8005d22:	1850      	adds	r0, r2, r1
 8005d24:	42a0      	cmp	r0, r4
 8005d26:	d10b      	bne.n	8005d40 <_free_r+0x6c>
 8005d28:	6820      	ldr	r0, [r4, #0]
 8005d2a:	4401      	add	r1, r0
 8005d2c:	1850      	adds	r0, r2, r1
 8005d2e:	4283      	cmp	r3, r0
 8005d30:	6011      	str	r1, [r2, #0]
 8005d32:	d1e0      	bne.n	8005cf6 <_free_r+0x22>
 8005d34:	6818      	ldr	r0, [r3, #0]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	6053      	str	r3, [r2, #4]
 8005d3a:	4408      	add	r0, r1
 8005d3c:	6010      	str	r0, [r2, #0]
 8005d3e:	e7da      	b.n	8005cf6 <_free_r+0x22>
 8005d40:	d902      	bls.n	8005d48 <_free_r+0x74>
 8005d42:	230c      	movs	r3, #12
 8005d44:	602b      	str	r3, [r5, #0]
 8005d46:	e7d6      	b.n	8005cf6 <_free_r+0x22>
 8005d48:	6820      	ldr	r0, [r4, #0]
 8005d4a:	1821      	adds	r1, r4, r0
 8005d4c:	428b      	cmp	r3, r1
 8005d4e:	bf04      	itt	eq
 8005d50:	6819      	ldreq	r1, [r3, #0]
 8005d52:	685b      	ldreq	r3, [r3, #4]
 8005d54:	6063      	str	r3, [r4, #4]
 8005d56:	bf04      	itt	eq
 8005d58:	1809      	addeq	r1, r1, r0
 8005d5a:	6021      	streq	r1, [r4, #0]
 8005d5c:	6054      	str	r4, [r2, #4]
 8005d5e:	e7ca      	b.n	8005cf6 <_free_r+0x22>
 8005d60:	bd38      	pop	{r3, r4, r5, pc}
 8005d62:	bf00      	nop
 8005d64:	20000360 	.word	0x20000360

08005d68 <sbrk_aligned>:
 8005d68:	b570      	push	{r4, r5, r6, lr}
 8005d6a:	4e0f      	ldr	r6, [pc, #60]	@ (8005da8 <sbrk_aligned+0x40>)
 8005d6c:	460c      	mov	r4, r1
 8005d6e:	6831      	ldr	r1, [r6, #0]
 8005d70:	4605      	mov	r5, r0
 8005d72:	b911      	cbnz	r1, 8005d7a <sbrk_aligned+0x12>
 8005d74:	f000 fe28 	bl	80069c8 <_sbrk_r>
 8005d78:	6030      	str	r0, [r6, #0]
 8005d7a:	4621      	mov	r1, r4
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	f000 fe23 	bl	80069c8 <_sbrk_r>
 8005d82:	1c43      	adds	r3, r0, #1
 8005d84:	d103      	bne.n	8005d8e <sbrk_aligned+0x26>
 8005d86:	f04f 34ff 	mov.w	r4, #4294967295
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	bd70      	pop	{r4, r5, r6, pc}
 8005d8e:	1cc4      	adds	r4, r0, #3
 8005d90:	f024 0403 	bic.w	r4, r4, #3
 8005d94:	42a0      	cmp	r0, r4
 8005d96:	d0f8      	beq.n	8005d8a <sbrk_aligned+0x22>
 8005d98:	1a21      	subs	r1, r4, r0
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	f000 fe14 	bl	80069c8 <_sbrk_r>
 8005da0:	3001      	adds	r0, #1
 8005da2:	d1f2      	bne.n	8005d8a <sbrk_aligned+0x22>
 8005da4:	e7ef      	b.n	8005d86 <sbrk_aligned+0x1e>
 8005da6:	bf00      	nop
 8005da8:	2000035c 	.word	0x2000035c

08005dac <_malloc_r>:
 8005dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005db0:	1ccd      	adds	r5, r1, #3
 8005db2:	f025 0503 	bic.w	r5, r5, #3
 8005db6:	3508      	adds	r5, #8
 8005db8:	2d0c      	cmp	r5, #12
 8005dba:	bf38      	it	cc
 8005dbc:	250c      	movcc	r5, #12
 8005dbe:	2d00      	cmp	r5, #0
 8005dc0:	4606      	mov	r6, r0
 8005dc2:	db01      	blt.n	8005dc8 <_malloc_r+0x1c>
 8005dc4:	42a9      	cmp	r1, r5
 8005dc6:	d904      	bls.n	8005dd2 <_malloc_r+0x26>
 8005dc8:	230c      	movs	r3, #12
 8005dca:	6033      	str	r3, [r6, #0]
 8005dcc:	2000      	movs	r0, #0
 8005dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ea8 <_malloc_r+0xfc>
 8005dd6:	f000 f869 	bl	8005eac <__malloc_lock>
 8005dda:	f8d8 3000 	ldr.w	r3, [r8]
 8005dde:	461c      	mov	r4, r3
 8005de0:	bb44      	cbnz	r4, 8005e34 <_malloc_r+0x88>
 8005de2:	4629      	mov	r1, r5
 8005de4:	4630      	mov	r0, r6
 8005de6:	f7ff ffbf 	bl	8005d68 <sbrk_aligned>
 8005dea:	1c43      	adds	r3, r0, #1
 8005dec:	4604      	mov	r4, r0
 8005dee:	d158      	bne.n	8005ea2 <_malloc_r+0xf6>
 8005df0:	f8d8 4000 	ldr.w	r4, [r8]
 8005df4:	4627      	mov	r7, r4
 8005df6:	2f00      	cmp	r7, #0
 8005df8:	d143      	bne.n	8005e82 <_malloc_r+0xd6>
 8005dfa:	2c00      	cmp	r4, #0
 8005dfc:	d04b      	beq.n	8005e96 <_malloc_r+0xea>
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	4639      	mov	r1, r7
 8005e02:	4630      	mov	r0, r6
 8005e04:	eb04 0903 	add.w	r9, r4, r3
 8005e08:	f000 fdde 	bl	80069c8 <_sbrk_r>
 8005e0c:	4581      	cmp	r9, r0
 8005e0e:	d142      	bne.n	8005e96 <_malloc_r+0xea>
 8005e10:	6821      	ldr	r1, [r4, #0]
 8005e12:	1a6d      	subs	r5, r5, r1
 8005e14:	4629      	mov	r1, r5
 8005e16:	4630      	mov	r0, r6
 8005e18:	f7ff ffa6 	bl	8005d68 <sbrk_aligned>
 8005e1c:	3001      	adds	r0, #1
 8005e1e:	d03a      	beq.n	8005e96 <_malloc_r+0xea>
 8005e20:	6823      	ldr	r3, [r4, #0]
 8005e22:	442b      	add	r3, r5
 8005e24:	6023      	str	r3, [r4, #0]
 8005e26:	f8d8 3000 	ldr.w	r3, [r8]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	bb62      	cbnz	r2, 8005e88 <_malloc_r+0xdc>
 8005e2e:	f8c8 7000 	str.w	r7, [r8]
 8005e32:	e00f      	b.n	8005e54 <_malloc_r+0xa8>
 8005e34:	6822      	ldr	r2, [r4, #0]
 8005e36:	1b52      	subs	r2, r2, r5
 8005e38:	d420      	bmi.n	8005e7c <_malloc_r+0xd0>
 8005e3a:	2a0b      	cmp	r2, #11
 8005e3c:	d917      	bls.n	8005e6e <_malloc_r+0xc2>
 8005e3e:	1961      	adds	r1, r4, r5
 8005e40:	42a3      	cmp	r3, r4
 8005e42:	6025      	str	r5, [r4, #0]
 8005e44:	bf18      	it	ne
 8005e46:	6059      	strne	r1, [r3, #4]
 8005e48:	6863      	ldr	r3, [r4, #4]
 8005e4a:	bf08      	it	eq
 8005e4c:	f8c8 1000 	streq.w	r1, [r8]
 8005e50:	5162      	str	r2, [r4, r5]
 8005e52:	604b      	str	r3, [r1, #4]
 8005e54:	4630      	mov	r0, r6
 8005e56:	f000 f82f 	bl	8005eb8 <__malloc_unlock>
 8005e5a:	f104 000b 	add.w	r0, r4, #11
 8005e5e:	1d23      	adds	r3, r4, #4
 8005e60:	f020 0007 	bic.w	r0, r0, #7
 8005e64:	1ac2      	subs	r2, r0, r3
 8005e66:	bf1c      	itt	ne
 8005e68:	1a1b      	subne	r3, r3, r0
 8005e6a:	50a3      	strne	r3, [r4, r2]
 8005e6c:	e7af      	b.n	8005dce <_malloc_r+0x22>
 8005e6e:	6862      	ldr	r2, [r4, #4]
 8005e70:	42a3      	cmp	r3, r4
 8005e72:	bf0c      	ite	eq
 8005e74:	f8c8 2000 	streq.w	r2, [r8]
 8005e78:	605a      	strne	r2, [r3, #4]
 8005e7a:	e7eb      	b.n	8005e54 <_malloc_r+0xa8>
 8005e7c:	4623      	mov	r3, r4
 8005e7e:	6864      	ldr	r4, [r4, #4]
 8005e80:	e7ae      	b.n	8005de0 <_malloc_r+0x34>
 8005e82:	463c      	mov	r4, r7
 8005e84:	687f      	ldr	r7, [r7, #4]
 8005e86:	e7b6      	b.n	8005df6 <_malloc_r+0x4a>
 8005e88:	461a      	mov	r2, r3
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	42a3      	cmp	r3, r4
 8005e8e:	d1fb      	bne.n	8005e88 <_malloc_r+0xdc>
 8005e90:	2300      	movs	r3, #0
 8005e92:	6053      	str	r3, [r2, #4]
 8005e94:	e7de      	b.n	8005e54 <_malloc_r+0xa8>
 8005e96:	230c      	movs	r3, #12
 8005e98:	6033      	str	r3, [r6, #0]
 8005e9a:	4630      	mov	r0, r6
 8005e9c:	f000 f80c 	bl	8005eb8 <__malloc_unlock>
 8005ea0:	e794      	b.n	8005dcc <_malloc_r+0x20>
 8005ea2:	6005      	str	r5, [r0, #0]
 8005ea4:	e7d6      	b.n	8005e54 <_malloc_r+0xa8>
 8005ea6:	bf00      	nop
 8005ea8:	20000360 	.word	0x20000360

08005eac <__malloc_lock>:
 8005eac:	4801      	ldr	r0, [pc, #4]	@ (8005eb4 <__malloc_lock+0x8>)
 8005eae:	f7ff bf0e 	b.w	8005cce <__retarget_lock_acquire_recursive>
 8005eb2:	bf00      	nop
 8005eb4:	20000358 	.word	0x20000358

08005eb8 <__malloc_unlock>:
 8005eb8:	4801      	ldr	r0, [pc, #4]	@ (8005ec0 <__malloc_unlock+0x8>)
 8005eba:	f7ff bf09 	b.w	8005cd0 <__retarget_lock_release_recursive>
 8005ebe:	bf00      	nop
 8005ec0:	20000358 	.word	0x20000358

08005ec4 <__ssputs_r>:
 8005ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ec8:	688e      	ldr	r6, [r1, #8]
 8005eca:	461f      	mov	r7, r3
 8005ecc:	42be      	cmp	r6, r7
 8005ece:	680b      	ldr	r3, [r1, #0]
 8005ed0:	4682      	mov	sl, r0
 8005ed2:	460c      	mov	r4, r1
 8005ed4:	4690      	mov	r8, r2
 8005ed6:	d82d      	bhi.n	8005f34 <__ssputs_r+0x70>
 8005ed8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005edc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005ee0:	d026      	beq.n	8005f30 <__ssputs_r+0x6c>
 8005ee2:	6965      	ldr	r5, [r4, #20]
 8005ee4:	6909      	ldr	r1, [r1, #16]
 8005ee6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005eea:	eba3 0901 	sub.w	r9, r3, r1
 8005eee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ef2:	1c7b      	adds	r3, r7, #1
 8005ef4:	444b      	add	r3, r9
 8005ef6:	106d      	asrs	r5, r5, #1
 8005ef8:	429d      	cmp	r5, r3
 8005efa:	bf38      	it	cc
 8005efc:	461d      	movcc	r5, r3
 8005efe:	0553      	lsls	r3, r2, #21
 8005f00:	d527      	bpl.n	8005f52 <__ssputs_r+0x8e>
 8005f02:	4629      	mov	r1, r5
 8005f04:	f7ff ff52 	bl	8005dac <_malloc_r>
 8005f08:	4606      	mov	r6, r0
 8005f0a:	b360      	cbz	r0, 8005f66 <__ssputs_r+0xa2>
 8005f0c:	6921      	ldr	r1, [r4, #16]
 8005f0e:	464a      	mov	r2, r9
 8005f10:	f000 fd6a 	bl	80069e8 <memcpy>
 8005f14:	89a3      	ldrh	r3, [r4, #12]
 8005f16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005f1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f1e:	81a3      	strh	r3, [r4, #12]
 8005f20:	6126      	str	r6, [r4, #16]
 8005f22:	6165      	str	r5, [r4, #20]
 8005f24:	444e      	add	r6, r9
 8005f26:	eba5 0509 	sub.w	r5, r5, r9
 8005f2a:	6026      	str	r6, [r4, #0]
 8005f2c:	60a5      	str	r5, [r4, #8]
 8005f2e:	463e      	mov	r6, r7
 8005f30:	42be      	cmp	r6, r7
 8005f32:	d900      	bls.n	8005f36 <__ssputs_r+0x72>
 8005f34:	463e      	mov	r6, r7
 8005f36:	6820      	ldr	r0, [r4, #0]
 8005f38:	4632      	mov	r2, r6
 8005f3a:	4641      	mov	r1, r8
 8005f3c:	f000 fd2a 	bl	8006994 <memmove>
 8005f40:	68a3      	ldr	r3, [r4, #8]
 8005f42:	1b9b      	subs	r3, r3, r6
 8005f44:	60a3      	str	r3, [r4, #8]
 8005f46:	6823      	ldr	r3, [r4, #0]
 8005f48:	4433      	add	r3, r6
 8005f4a:	6023      	str	r3, [r4, #0]
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f52:	462a      	mov	r2, r5
 8005f54:	f000 fd56 	bl	8006a04 <_realloc_r>
 8005f58:	4606      	mov	r6, r0
 8005f5a:	2800      	cmp	r0, #0
 8005f5c:	d1e0      	bne.n	8005f20 <__ssputs_r+0x5c>
 8005f5e:	6921      	ldr	r1, [r4, #16]
 8005f60:	4650      	mov	r0, sl
 8005f62:	f7ff feb7 	bl	8005cd4 <_free_r>
 8005f66:	230c      	movs	r3, #12
 8005f68:	f8ca 3000 	str.w	r3, [sl]
 8005f6c:	89a3      	ldrh	r3, [r4, #12]
 8005f6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f72:	81a3      	strh	r3, [r4, #12]
 8005f74:	f04f 30ff 	mov.w	r0, #4294967295
 8005f78:	e7e9      	b.n	8005f4e <__ssputs_r+0x8a>
	...

08005f7c <_svfiprintf_r>:
 8005f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f80:	4698      	mov	r8, r3
 8005f82:	898b      	ldrh	r3, [r1, #12]
 8005f84:	061b      	lsls	r3, r3, #24
 8005f86:	b09d      	sub	sp, #116	@ 0x74
 8005f88:	4607      	mov	r7, r0
 8005f8a:	460d      	mov	r5, r1
 8005f8c:	4614      	mov	r4, r2
 8005f8e:	d510      	bpl.n	8005fb2 <_svfiprintf_r+0x36>
 8005f90:	690b      	ldr	r3, [r1, #16]
 8005f92:	b973      	cbnz	r3, 8005fb2 <_svfiprintf_r+0x36>
 8005f94:	2140      	movs	r1, #64	@ 0x40
 8005f96:	f7ff ff09 	bl	8005dac <_malloc_r>
 8005f9a:	6028      	str	r0, [r5, #0]
 8005f9c:	6128      	str	r0, [r5, #16]
 8005f9e:	b930      	cbnz	r0, 8005fae <_svfiprintf_r+0x32>
 8005fa0:	230c      	movs	r3, #12
 8005fa2:	603b      	str	r3, [r7, #0]
 8005fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa8:	b01d      	add	sp, #116	@ 0x74
 8005faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fae:	2340      	movs	r3, #64	@ 0x40
 8005fb0:	616b      	str	r3, [r5, #20]
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fb6:	2320      	movs	r3, #32
 8005fb8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005fbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fc0:	2330      	movs	r3, #48	@ 0x30
 8005fc2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006160 <_svfiprintf_r+0x1e4>
 8005fc6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005fca:	f04f 0901 	mov.w	r9, #1
 8005fce:	4623      	mov	r3, r4
 8005fd0:	469a      	mov	sl, r3
 8005fd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fd6:	b10a      	cbz	r2, 8005fdc <_svfiprintf_r+0x60>
 8005fd8:	2a25      	cmp	r2, #37	@ 0x25
 8005fda:	d1f9      	bne.n	8005fd0 <_svfiprintf_r+0x54>
 8005fdc:	ebba 0b04 	subs.w	fp, sl, r4
 8005fe0:	d00b      	beq.n	8005ffa <_svfiprintf_r+0x7e>
 8005fe2:	465b      	mov	r3, fp
 8005fe4:	4622      	mov	r2, r4
 8005fe6:	4629      	mov	r1, r5
 8005fe8:	4638      	mov	r0, r7
 8005fea:	f7ff ff6b 	bl	8005ec4 <__ssputs_r>
 8005fee:	3001      	adds	r0, #1
 8005ff0:	f000 80a7 	beq.w	8006142 <_svfiprintf_r+0x1c6>
 8005ff4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ff6:	445a      	add	r2, fp
 8005ff8:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ffa:	f89a 3000 	ldrb.w	r3, [sl]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f000 809f 	beq.w	8006142 <_svfiprintf_r+0x1c6>
 8006004:	2300      	movs	r3, #0
 8006006:	f04f 32ff 	mov.w	r2, #4294967295
 800600a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800600e:	f10a 0a01 	add.w	sl, sl, #1
 8006012:	9304      	str	r3, [sp, #16]
 8006014:	9307      	str	r3, [sp, #28]
 8006016:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800601a:	931a      	str	r3, [sp, #104]	@ 0x68
 800601c:	4654      	mov	r4, sl
 800601e:	2205      	movs	r2, #5
 8006020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006024:	484e      	ldr	r0, [pc, #312]	@ (8006160 <_svfiprintf_r+0x1e4>)
 8006026:	f7fa f8d3 	bl	80001d0 <memchr>
 800602a:	9a04      	ldr	r2, [sp, #16]
 800602c:	b9d8      	cbnz	r0, 8006066 <_svfiprintf_r+0xea>
 800602e:	06d0      	lsls	r0, r2, #27
 8006030:	bf44      	itt	mi
 8006032:	2320      	movmi	r3, #32
 8006034:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006038:	0711      	lsls	r1, r2, #28
 800603a:	bf44      	itt	mi
 800603c:	232b      	movmi	r3, #43	@ 0x2b
 800603e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006042:	f89a 3000 	ldrb.w	r3, [sl]
 8006046:	2b2a      	cmp	r3, #42	@ 0x2a
 8006048:	d015      	beq.n	8006076 <_svfiprintf_r+0xfa>
 800604a:	9a07      	ldr	r2, [sp, #28]
 800604c:	4654      	mov	r4, sl
 800604e:	2000      	movs	r0, #0
 8006050:	f04f 0c0a 	mov.w	ip, #10
 8006054:	4621      	mov	r1, r4
 8006056:	f811 3b01 	ldrb.w	r3, [r1], #1
 800605a:	3b30      	subs	r3, #48	@ 0x30
 800605c:	2b09      	cmp	r3, #9
 800605e:	d94b      	bls.n	80060f8 <_svfiprintf_r+0x17c>
 8006060:	b1b0      	cbz	r0, 8006090 <_svfiprintf_r+0x114>
 8006062:	9207      	str	r2, [sp, #28]
 8006064:	e014      	b.n	8006090 <_svfiprintf_r+0x114>
 8006066:	eba0 0308 	sub.w	r3, r0, r8
 800606a:	fa09 f303 	lsl.w	r3, r9, r3
 800606e:	4313      	orrs	r3, r2
 8006070:	9304      	str	r3, [sp, #16]
 8006072:	46a2      	mov	sl, r4
 8006074:	e7d2      	b.n	800601c <_svfiprintf_r+0xa0>
 8006076:	9b03      	ldr	r3, [sp, #12]
 8006078:	1d19      	adds	r1, r3, #4
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	9103      	str	r1, [sp, #12]
 800607e:	2b00      	cmp	r3, #0
 8006080:	bfbb      	ittet	lt
 8006082:	425b      	neglt	r3, r3
 8006084:	f042 0202 	orrlt.w	r2, r2, #2
 8006088:	9307      	strge	r3, [sp, #28]
 800608a:	9307      	strlt	r3, [sp, #28]
 800608c:	bfb8      	it	lt
 800608e:	9204      	strlt	r2, [sp, #16]
 8006090:	7823      	ldrb	r3, [r4, #0]
 8006092:	2b2e      	cmp	r3, #46	@ 0x2e
 8006094:	d10a      	bne.n	80060ac <_svfiprintf_r+0x130>
 8006096:	7863      	ldrb	r3, [r4, #1]
 8006098:	2b2a      	cmp	r3, #42	@ 0x2a
 800609a:	d132      	bne.n	8006102 <_svfiprintf_r+0x186>
 800609c:	9b03      	ldr	r3, [sp, #12]
 800609e:	1d1a      	adds	r2, r3, #4
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	9203      	str	r2, [sp, #12]
 80060a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80060a8:	3402      	adds	r4, #2
 80060aa:	9305      	str	r3, [sp, #20]
 80060ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006170 <_svfiprintf_r+0x1f4>
 80060b0:	7821      	ldrb	r1, [r4, #0]
 80060b2:	2203      	movs	r2, #3
 80060b4:	4650      	mov	r0, sl
 80060b6:	f7fa f88b 	bl	80001d0 <memchr>
 80060ba:	b138      	cbz	r0, 80060cc <_svfiprintf_r+0x150>
 80060bc:	9b04      	ldr	r3, [sp, #16]
 80060be:	eba0 000a 	sub.w	r0, r0, sl
 80060c2:	2240      	movs	r2, #64	@ 0x40
 80060c4:	4082      	lsls	r2, r0
 80060c6:	4313      	orrs	r3, r2
 80060c8:	3401      	adds	r4, #1
 80060ca:	9304      	str	r3, [sp, #16]
 80060cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060d0:	4824      	ldr	r0, [pc, #144]	@ (8006164 <_svfiprintf_r+0x1e8>)
 80060d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80060d6:	2206      	movs	r2, #6
 80060d8:	f7fa f87a 	bl	80001d0 <memchr>
 80060dc:	2800      	cmp	r0, #0
 80060de:	d036      	beq.n	800614e <_svfiprintf_r+0x1d2>
 80060e0:	4b21      	ldr	r3, [pc, #132]	@ (8006168 <_svfiprintf_r+0x1ec>)
 80060e2:	bb1b      	cbnz	r3, 800612c <_svfiprintf_r+0x1b0>
 80060e4:	9b03      	ldr	r3, [sp, #12]
 80060e6:	3307      	adds	r3, #7
 80060e8:	f023 0307 	bic.w	r3, r3, #7
 80060ec:	3308      	adds	r3, #8
 80060ee:	9303      	str	r3, [sp, #12]
 80060f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060f2:	4433      	add	r3, r6
 80060f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80060f6:	e76a      	b.n	8005fce <_svfiprintf_r+0x52>
 80060f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80060fc:	460c      	mov	r4, r1
 80060fe:	2001      	movs	r0, #1
 8006100:	e7a8      	b.n	8006054 <_svfiprintf_r+0xd8>
 8006102:	2300      	movs	r3, #0
 8006104:	3401      	adds	r4, #1
 8006106:	9305      	str	r3, [sp, #20]
 8006108:	4619      	mov	r1, r3
 800610a:	f04f 0c0a 	mov.w	ip, #10
 800610e:	4620      	mov	r0, r4
 8006110:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006114:	3a30      	subs	r2, #48	@ 0x30
 8006116:	2a09      	cmp	r2, #9
 8006118:	d903      	bls.n	8006122 <_svfiprintf_r+0x1a6>
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0c6      	beq.n	80060ac <_svfiprintf_r+0x130>
 800611e:	9105      	str	r1, [sp, #20]
 8006120:	e7c4      	b.n	80060ac <_svfiprintf_r+0x130>
 8006122:	fb0c 2101 	mla	r1, ip, r1, r2
 8006126:	4604      	mov	r4, r0
 8006128:	2301      	movs	r3, #1
 800612a:	e7f0      	b.n	800610e <_svfiprintf_r+0x192>
 800612c:	ab03      	add	r3, sp, #12
 800612e:	9300      	str	r3, [sp, #0]
 8006130:	462a      	mov	r2, r5
 8006132:	4b0e      	ldr	r3, [pc, #56]	@ (800616c <_svfiprintf_r+0x1f0>)
 8006134:	a904      	add	r1, sp, #16
 8006136:	4638      	mov	r0, r7
 8006138:	f3af 8000 	nop.w
 800613c:	1c42      	adds	r2, r0, #1
 800613e:	4606      	mov	r6, r0
 8006140:	d1d6      	bne.n	80060f0 <_svfiprintf_r+0x174>
 8006142:	89ab      	ldrh	r3, [r5, #12]
 8006144:	065b      	lsls	r3, r3, #25
 8006146:	f53f af2d 	bmi.w	8005fa4 <_svfiprintf_r+0x28>
 800614a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800614c:	e72c      	b.n	8005fa8 <_svfiprintf_r+0x2c>
 800614e:	ab03      	add	r3, sp, #12
 8006150:	9300      	str	r3, [sp, #0]
 8006152:	462a      	mov	r2, r5
 8006154:	4b05      	ldr	r3, [pc, #20]	@ (800616c <_svfiprintf_r+0x1f0>)
 8006156:	a904      	add	r1, sp, #16
 8006158:	4638      	mov	r0, r7
 800615a:	f000 f9bb 	bl	80064d4 <_printf_i>
 800615e:	e7ed      	b.n	800613c <_svfiprintf_r+0x1c0>
 8006160:	08006d69 	.word	0x08006d69
 8006164:	08006d73 	.word	0x08006d73
 8006168:	00000000 	.word	0x00000000
 800616c:	08005ec5 	.word	0x08005ec5
 8006170:	08006d6f 	.word	0x08006d6f

08006174 <__sfputc_r>:
 8006174:	6893      	ldr	r3, [r2, #8]
 8006176:	3b01      	subs	r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	b410      	push	{r4}
 800617c:	6093      	str	r3, [r2, #8]
 800617e:	da08      	bge.n	8006192 <__sfputc_r+0x1e>
 8006180:	6994      	ldr	r4, [r2, #24]
 8006182:	42a3      	cmp	r3, r4
 8006184:	db01      	blt.n	800618a <__sfputc_r+0x16>
 8006186:	290a      	cmp	r1, #10
 8006188:	d103      	bne.n	8006192 <__sfputc_r+0x1e>
 800618a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800618e:	f000 bb6d 	b.w	800686c <__swbuf_r>
 8006192:	6813      	ldr	r3, [r2, #0]
 8006194:	1c58      	adds	r0, r3, #1
 8006196:	6010      	str	r0, [r2, #0]
 8006198:	7019      	strb	r1, [r3, #0]
 800619a:	4608      	mov	r0, r1
 800619c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <__sfputs_r>:
 80061a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061a4:	4606      	mov	r6, r0
 80061a6:	460f      	mov	r7, r1
 80061a8:	4614      	mov	r4, r2
 80061aa:	18d5      	adds	r5, r2, r3
 80061ac:	42ac      	cmp	r4, r5
 80061ae:	d101      	bne.n	80061b4 <__sfputs_r+0x12>
 80061b0:	2000      	movs	r0, #0
 80061b2:	e007      	b.n	80061c4 <__sfputs_r+0x22>
 80061b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061b8:	463a      	mov	r2, r7
 80061ba:	4630      	mov	r0, r6
 80061bc:	f7ff ffda 	bl	8006174 <__sfputc_r>
 80061c0:	1c43      	adds	r3, r0, #1
 80061c2:	d1f3      	bne.n	80061ac <__sfputs_r+0xa>
 80061c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080061c8 <_vfiprintf_r>:
 80061c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061cc:	460d      	mov	r5, r1
 80061ce:	b09d      	sub	sp, #116	@ 0x74
 80061d0:	4614      	mov	r4, r2
 80061d2:	4698      	mov	r8, r3
 80061d4:	4606      	mov	r6, r0
 80061d6:	b118      	cbz	r0, 80061e0 <_vfiprintf_r+0x18>
 80061d8:	6a03      	ldr	r3, [r0, #32]
 80061da:	b90b      	cbnz	r3, 80061e0 <_vfiprintf_r+0x18>
 80061dc:	f7ff fc52 	bl	8005a84 <__sinit>
 80061e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80061e2:	07d9      	lsls	r1, r3, #31
 80061e4:	d405      	bmi.n	80061f2 <_vfiprintf_r+0x2a>
 80061e6:	89ab      	ldrh	r3, [r5, #12]
 80061e8:	059a      	lsls	r2, r3, #22
 80061ea:	d402      	bmi.n	80061f2 <_vfiprintf_r+0x2a>
 80061ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80061ee:	f7ff fd6e 	bl	8005cce <__retarget_lock_acquire_recursive>
 80061f2:	89ab      	ldrh	r3, [r5, #12]
 80061f4:	071b      	lsls	r3, r3, #28
 80061f6:	d501      	bpl.n	80061fc <_vfiprintf_r+0x34>
 80061f8:	692b      	ldr	r3, [r5, #16]
 80061fa:	b99b      	cbnz	r3, 8006224 <_vfiprintf_r+0x5c>
 80061fc:	4629      	mov	r1, r5
 80061fe:	4630      	mov	r0, r6
 8006200:	f000 fb72 	bl	80068e8 <__swsetup_r>
 8006204:	b170      	cbz	r0, 8006224 <_vfiprintf_r+0x5c>
 8006206:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006208:	07dc      	lsls	r4, r3, #31
 800620a:	d504      	bpl.n	8006216 <_vfiprintf_r+0x4e>
 800620c:	f04f 30ff 	mov.w	r0, #4294967295
 8006210:	b01d      	add	sp, #116	@ 0x74
 8006212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006216:	89ab      	ldrh	r3, [r5, #12]
 8006218:	0598      	lsls	r0, r3, #22
 800621a:	d4f7      	bmi.n	800620c <_vfiprintf_r+0x44>
 800621c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800621e:	f7ff fd57 	bl	8005cd0 <__retarget_lock_release_recursive>
 8006222:	e7f3      	b.n	800620c <_vfiprintf_r+0x44>
 8006224:	2300      	movs	r3, #0
 8006226:	9309      	str	r3, [sp, #36]	@ 0x24
 8006228:	2320      	movs	r3, #32
 800622a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800622e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006232:	2330      	movs	r3, #48	@ 0x30
 8006234:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80063e4 <_vfiprintf_r+0x21c>
 8006238:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800623c:	f04f 0901 	mov.w	r9, #1
 8006240:	4623      	mov	r3, r4
 8006242:	469a      	mov	sl, r3
 8006244:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006248:	b10a      	cbz	r2, 800624e <_vfiprintf_r+0x86>
 800624a:	2a25      	cmp	r2, #37	@ 0x25
 800624c:	d1f9      	bne.n	8006242 <_vfiprintf_r+0x7a>
 800624e:	ebba 0b04 	subs.w	fp, sl, r4
 8006252:	d00b      	beq.n	800626c <_vfiprintf_r+0xa4>
 8006254:	465b      	mov	r3, fp
 8006256:	4622      	mov	r2, r4
 8006258:	4629      	mov	r1, r5
 800625a:	4630      	mov	r0, r6
 800625c:	f7ff ffa1 	bl	80061a2 <__sfputs_r>
 8006260:	3001      	adds	r0, #1
 8006262:	f000 80a7 	beq.w	80063b4 <_vfiprintf_r+0x1ec>
 8006266:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006268:	445a      	add	r2, fp
 800626a:	9209      	str	r2, [sp, #36]	@ 0x24
 800626c:	f89a 3000 	ldrb.w	r3, [sl]
 8006270:	2b00      	cmp	r3, #0
 8006272:	f000 809f 	beq.w	80063b4 <_vfiprintf_r+0x1ec>
 8006276:	2300      	movs	r3, #0
 8006278:	f04f 32ff 	mov.w	r2, #4294967295
 800627c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006280:	f10a 0a01 	add.w	sl, sl, #1
 8006284:	9304      	str	r3, [sp, #16]
 8006286:	9307      	str	r3, [sp, #28]
 8006288:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800628c:	931a      	str	r3, [sp, #104]	@ 0x68
 800628e:	4654      	mov	r4, sl
 8006290:	2205      	movs	r2, #5
 8006292:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006296:	4853      	ldr	r0, [pc, #332]	@ (80063e4 <_vfiprintf_r+0x21c>)
 8006298:	f7f9 ff9a 	bl	80001d0 <memchr>
 800629c:	9a04      	ldr	r2, [sp, #16]
 800629e:	b9d8      	cbnz	r0, 80062d8 <_vfiprintf_r+0x110>
 80062a0:	06d1      	lsls	r1, r2, #27
 80062a2:	bf44      	itt	mi
 80062a4:	2320      	movmi	r3, #32
 80062a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062aa:	0713      	lsls	r3, r2, #28
 80062ac:	bf44      	itt	mi
 80062ae:	232b      	movmi	r3, #43	@ 0x2b
 80062b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062b4:	f89a 3000 	ldrb.w	r3, [sl]
 80062b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80062ba:	d015      	beq.n	80062e8 <_vfiprintf_r+0x120>
 80062bc:	9a07      	ldr	r2, [sp, #28]
 80062be:	4654      	mov	r4, sl
 80062c0:	2000      	movs	r0, #0
 80062c2:	f04f 0c0a 	mov.w	ip, #10
 80062c6:	4621      	mov	r1, r4
 80062c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062cc:	3b30      	subs	r3, #48	@ 0x30
 80062ce:	2b09      	cmp	r3, #9
 80062d0:	d94b      	bls.n	800636a <_vfiprintf_r+0x1a2>
 80062d2:	b1b0      	cbz	r0, 8006302 <_vfiprintf_r+0x13a>
 80062d4:	9207      	str	r2, [sp, #28]
 80062d6:	e014      	b.n	8006302 <_vfiprintf_r+0x13a>
 80062d8:	eba0 0308 	sub.w	r3, r0, r8
 80062dc:	fa09 f303 	lsl.w	r3, r9, r3
 80062e0:	4313      	orrs	r3, r2
 80062e2:	9304      	str	r3, [sp, #16]
 80062e4:	46a2      	mov	sl, r4
 80062e6:	e7d2      	b.n	800628e <_vfiprintf_r+0xc6>
 80062e8:	9b03      	ldr	r3, [sp, #12]
 80062ea:	1d19      	adds	r1, r3, #4
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	9103      	str	r1, [sp, #12]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	bfbb      	ittet	lt
 80062f4:	425b      	neglt	r3, r3
 80062f6:	f042 0202 	orrlt.w	r2, r2, #2
 80062fa:	9307      	strge	r3, [sp, #28]
 80062fc:	9307      	strlt	r3, [sp, #28]
 80062fe:	bfb8      	it	lt
 8006300:	9204      	strlt	r2, [sp, #16]
 8006302:	7823      	ldrb	r3, [r4, #0]
 8006304:	2b2e      	cmp	r3, #46	@ 0x2e
 8006306:	d10a      	bne.n	800631e <_vfiprintf_r+0x156>
 8006308:	7863      	ldrb	r3, [r4, #1]
 800630a:	2b2a      	cmp	r3, #42	@ 0x2a
 800630c:	d132      	bne.n	8006374 <_vfiprintf_r+0x1ac>
 800630e:	9b03      	ldr	r3, [sp, #12]
 8006310:	1d1a      	adds	r2, r3, #4
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	9203      	str	r2, [sp, #12]
 8006316:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800631a:	3402      	adds	r4, #2
 800631c:	9305      	str	r3, [sp, #20]
 800631e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80063f4 <_vfiprintf_r+0x22c>
 8006322:	7821      	ldrb	r1, [r4, #0]
 8006324:	2203      	movs	r2, #3
 8006326:	4650      	mov	r0, sl
 8006328:	f7f9 ff52 	bl	80001d0 <memchr>
 800632c:	b138      	cbz	r0, 800633e <_vfiprintf_r+0x176>
 800632e:	9b04      	ldr	r3, [sp, #16]
 8006330:	eba0 000a 	sub.w	r0, r0, sl
 8006334:	2240      	movs	r2, #64	@ 0x40
 8006336:	4082      	lsls	r2, r0
 8006338:	4313      	orrs	r3, r2
 800633a:	3401      	adds	r4, #1
 800633c:	9304      	str	r3, [sp, #16]
 800633e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006342:	4829      	ldr	r0, [pc, #164]	@ (80063e8 <_vfiprintf_r+0x220>)
 8006344:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006348:	2206      	movs	r2, #6
 800634a:	f7f9 ff41 	bl	80001d0 <memchr>
 800634e:	2800      	cmp	r0, #0
 8006350:	d03f      	beq.n	80063d2 <_vfiprintf_r+0x20a>
 8006352:	4b26      	ldr	r3, [pc, #152]	@ (80063ec <_vfiprintf_r+0x224>)
 8006354:	bb1b      	cbnz	r3, 800639e <_vfiprintf_r+0x1d6>
 8006356:	9b03      	ldr	r3, [sp, #12]
 8006358:	3307      	adds	r3, #7
 800635a:	f023 0307 	bic.w	r3, r3, #7
 800635e:	3308      	adds	r3, #8
 8006360:	9303      	str	r3, [sp, #12]
 8006362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006364:	443b      	add	r3, r7
 8006366:	9309      	str	r3, [sp, #36]	@ 0x24
 8006368:	e76a      	b.n	8006240 <_vfiprintf_r+0x78>
 800636a:	fb0c 3202 	mla	r2, ip, r2, r3
 800636e:	460c      	mov	r4, r1
 8006370:	2001      	movs	r0, #1
 8006372:	e7a8      	b.n	80062c6 <_vfiprintf_r+0xfe>
 8006374:	2300      	movs	r3, #0
 8006376:	3401      	adds	r4, #1
 8006378:	9305      	str	r3, [sp, #20]
 800637a:	4619      	mov	r1, r3
 800637c:	f04f 0c0a 	mov.w	ip, #10
 8006380:	4620      	mov	r0, r4
 8006382:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006386:	3a30      	subs	r2, #48	@ 0x30
 8006388:	2a09      	cmp	r2, #9
 800638a:	d903      	bls.n	8006394 <_vfiprintf_r+0x1cc>
 800638c:	2b00      	cmp	r3, #0
 800638e:	d0c6      	beq.n	800631e <_vfiprintf_r+0x156>
 8006390:	9105      	str	r1, [sp, #20]
 8006392:	e7c4      	b.n	800631e <_vfiprintf_r+0x156>
 8006394:	fb0c 2101 	mla	r1, ip, r1, r2
 8006398:	4604      	mov	r4, r0
 800639a:	2301      	movs	r3, #1
 800639c:	e7f0      	b.n	8006380 <_vfiprintf_r+0x1b8>
 800639e:	ab03      	add	r3, sp, #12
 80063a0:	9300      	str	r3, [sp, #0]
 80063a2:	462a      	mov	r2, r5
 80063a4:	4b12      	ldr	r3, [pc, #72]	@ (80063f0 <_vfiprintf_r+0x228>)
 80063a6:	a904      	add	r1, sp, #16
 80063a8:	4630      	mov	r0, r6
 80063aa:	f3af 8000 	nop.w
 80063ae:	4607      	mov	r7, r0
 80063b0:	1c78      	adds	r0, r7, #1
 80063b2:	d1d6      	bne.n	8006362 <_vfiprintf_r+0x19a>
 80063b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063b6:	07d9      	lsls	r1, r3, #31
 80063b8:	d405      	bmi.n	80063c6 <_vfiprintf_r+0x1fe>
 80063ba:	89ab      	ldrh	r3, [r5, #12]
 80063bc:	059a      	lsls	r2, r3, #22
 80063be:	d402      	bmi.n	80063c6 <_vfiprintf_r+0x1fe>
 80063c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063c2:	f7ff fc85 	bl	8005cd0 <__retarget_lock_release_recursive>
 80063c6:	89ab      	ldrh	r3, [r5, #12]
 80063c8:	065b      	lsls	r3, r3, #25
 80063ca:	f53f af1f 	bmi.w	800620c <_vfiprintf_r+0x44>
 80063ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063d0:	e71e      	b.n	8006210 <_vfiprintf_r+0x48>
 80063d2:	ab03      	add	r3, sp, #12
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	462a      	mov	r2, r5
 80063d8:	4b05      	ldr	r3, [pc, #20]	@ (80063f0 <_vfiprintf_r+0x228>)
 80063da:	a904      	add	r1, sp, #16
 80063dc:	4630      	mov	r0, r6
 80063de:	f000 f879 	bl	80064d4 <_printf_i>
 80063e2:	e7e4      	b.n	80063ae <_vfiprintf_r+0x1e6>
 80063e4:	08006d69 	.word	0x08006d69
 80063e8:	08006d73 	.word	0x08006d73
 80063ec:	00000000 	.word	0x00000000
 80063f0:	080061a3 	.word	0x080061a3
 80063f4:	08006d6f 	.word	0x08006d6f

080063f8 <_printf_common>:
 80063f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063fc:	4616      	mov	r6, r2
 80063fe:	4698      	mov	r8, r3
 8006400:	688a      	ldr	r2, [r1, #8]
 8006402:	690b      	ldr	r3, [r1, #16]
 8006404:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006408:	4293      	cmp	r3, r2
 800640a:	bfb8      	it	lt
 800640c:	4613      	movlt	r3, r2
 800640e:	6033      	str	r3, [r6, #0]
 8006410:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006414:	4607      	mov	r7, r0
 8006416:	460c      	mov	r4, r1
 8006418:	b10a      	cbz	r2, 800641e <_printf_common+0x26>
 800641a:	3301      	adds	r3, #1
 800641c:	6033      	str	r3, [r6, #0]
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	0699      	lsls	r1, r3, #26
 8006422:	bf42      	ittt	mi
 8006424:	6833      	ldrmi	r3, [r6, #0]
 8006426:	3302      	addmi	r3, #2
 8006428:	6033      	strmi	r3, [r6, #0]
 800642a:	6825      	ldr	r5, [r4, #0]
 800642c:	f015 0506 	ands.w	r5, r5, #6
 8006430:	d106      	bne.n	8006440 <_printf_common+0x48>
 8006432:	f104 0a19 	add.w	sl, r4, #25
 8006436:	68e3      	ldr	r3, [r4, #12]
 8006438:	6832      	ldr	r2, [r6, #0]
 800643a:	1a9b      	subs	r3, r3, r2
 800643c:	42ab      	cmp	r3, r5
 800643e:	dc26      	bgt.n	800648e <_printf_common+0x96>
 8006440:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006444:	6822      	ldr	r2, [r4, #0]
 8006446:	3b00      	subs	r3, #0
 8006448:	bf18      	it	ne
 800644a:	2301      	movne	r3, #1
 800644c:	0692      	lsls	r2, r2, #26
 800644e:	d42b      	bmi.n	80064a8 <_printf_common+0xb0>
 8006450:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006454:	4641      	mov	r1, r8
 8006456:	4638      	mov	r0, r7
 8006458:	47c8      	blx	r9
 800645a:	3001      	adds	r0, #1
 800645c:	d01e      	beq.n	800649c <_printf_common+0xa4>
 800645e:	6823      	ldr	r3, [r4, #0]
 8006460:	6922      	ldr	r2, [r4, #16]
 8006462:	f003 0306 	and.w	r3, r3, #6
 8006466:	2b04      	cmp	r3, #4
 8006468:	bf02      	ittt	eq
 800646a:	68e5      	ldreq	r5, [r4, #12]
 800646c:	6833      	ldreq	r3, [r6, #0]
 800646e:	1aed      	subeq	r5, r5, r3
 8006470:	68a3      	ldr	r3, [r4, #8]
 8006472:	bf0c      	ite	eq
 8006474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006478:	2500      	movne	r5, #0
 800647a:	4293      	cmp	r3, r2
 800647c:	bfc4      	itt	gt
 800647e:	1a9b      	subgt	r3, r3, r2
 8006480:	18ed      	addgt	r5, r5, r3
 8006482:	2600      	movs	r6, #0
 8006484:	341a      	adds	r4, #26
 8006486:	42b5      	cmp	r5, r6
 8006488:	d11a      	bne.n	80064c0 <_printf_common+0xc8>
 800648a:	2000      	movs	r0, #0
 800648c:	e008      	b.n	80064a0 <_printf_common+0xa8>
 800648e:	2301      	movs	r3, #1
 8006490:	4652      	mov	r2, sl
 8006492:	4641      	mov	r1, r8
 8006494:	4638      	mov	r0, r7
 8006496:	47c8      	blx	r9
 8006498:	3001      	adds	r0, #1
 800649a:	d103      	bne.n	80064a4 <_printf_common+0xac>
 800649c:	f04f 30ff 	mov.w	r0, #4294967295
 80064a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064a4:	3501      	adds	r5, #1
 80064a6:	e7c6      	b.n	8006436 <_printf_common+0x3e>
 80064a8:	18e1      	adds	r1, r4, r3
 80064aa:	1c5a      	adds	r2, r3, #1
 80064ac:	2030      	movs	r0, #48	@ 0x30
 80064ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80064b2:	4422      	add	r2, r4
 80064b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80064b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80064bc:	3302      	adds	r3, #2
 80064be:	e7c7      	b.n	8006450 <_printf_common+0x58>
 80064c0:	2301      	movs	r3, #1
 80064c2:	4622      	mov	r2, r4
 80064c4:	4641      	mov	r1, r8
 80064c6:	4638      	mov	r0, r7
 80064c8:	47c8      	blx	r9
 80064ca:	3001      	adds	r0, #1
 80064cc:	d0e6      	beq.n	800649c <_printf_common+0xa4>
 80064ce:	3601      	adds	r6, #1
 80064d0:	e7d9      	b.n	8006486 <_printf_common+0x8e>
	...

080064d4 <_printf_i>:
 80064d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064d8:	7e0f      	ldrb	r7, [r1, #24]
 80064da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80064dc:	2f78      	cmp	r7, #120	@ 0x78
 80064de:	4691      	mov	r9, r2
 80064e0:	4680      	mov	r8, r0
 80064e2:	460c      	mov	r4, r1
 80064e4:	469a      	mov	sl, r3
 80064e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80064ea:	d807      	bhi.n	80064fc <_printf_i+0x28>
 80064ec:	2f62      	cmp	r7, #98	@ 0x62
 80064ee:	d80a      	bhi.n	8006506 <_printf_i+0x32>
 80064f0:	2f00      	cmp	r7, #0
 80064f2:	f000 80d2 	beq.w	800669a <_printf_i+0x1c6>
 80064f6:	2f58      	cmp	r7, #88	@ 0x58
 80064f8:	f000 80b9 	beq.w	800666e <_printf_i+0x19a>
 80064fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006500:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006504:	e03a      	b.n	800657c <_printf_i+0xa8>
 8006506:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800650a:	2b15      	cmp	r3, #21
 800650c:	d8f6      	bhi.n	80064fc <_printf_i+0x28>
 800650e:	a101      	add	r1, pc, #4	@ (adr r1, 8006514 <_printf_i+0x40>)
 8006510:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006514:	0800656d 	.word	0x0800656d
 8006518:	08006581 	.word	0x08006581
 800651c:	080064fd 	.word	0x080064fd
 8006520:	080064fd 	.word	0x080064fd
 8006524:	080064fd 	.word	0x080064fd
 8006528:	080064fd 	.word	0x080064fd
 800652c:	08006581 	.word	0x08006581
 8006530:	080064fd 	.word	0x080064fd
 8006534:	080064fd 	.word	0x080064fd
 8006538:	080064fd 	.word	0x080064fd
 800653c:	080064fd 	.word	0x080064fd
 8006540:	08006681 	.word	0x08006681
 8006544:	080065ab 	.word	0x080065ab
 8006548:	0800663b 	.word	0x0800663b
 800654c:	080064fd 	.word	0x080064fd
 8006550:	080064fd 	.word	0x080064fd
 8006554:	080066a3 	.word	0x080066a3
 8006558:	080064fd 	.word	0x080064fd
 800655c:	080065ab 	.word	0x080065ab
 8006560:	080064fd 	.word	0x080064fd
 8006564:	080064fd 	.word	0x080064fd
 8006568:	08006643 	.word	0x08006643
 800656c:	6833      	ldr	r3, [r6, #0]
 800656e:	1d1a      	adds	r2, r3, #4
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6032      	str	r2, [r6, #0]
 8006574:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006578:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800657c:	2301      	movs	r3, #1
 800657e:	e09d      	b.n	80066bc <_printf_i+0x1e8>
 8006580:	6833      	ldr	r3, [r6, #0]
 8006582:	6820      	ldr	r0, [r4, #0]
 8006584:	1d19      	adds	r1, r3, #4
 8006586:	6031      	str	r1, [r6, #0]
 8006588:	0606      	lsls	r6, r0, #24
 800658a:	d501      	bpl.n	8006590 <_printf_i+0xbc>
 800658c:	681d      	ldr	r5, [r3, #0]
 800658e:	e003      	b.n	8006598 <_printf_i+0xc4>
 8006590:	0645      	lsls	r5, r0, #25
 8006592:	d5fb      	bpl.n	800658c <_printf_i+0xb8>
 8006594:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006598:	2d00      	cmp	r5, #0
 800659a:	da03      	bge.n	80065a4 <_printf_i+0xd0>
 800659c:	232d      	movs	r3, #45	@ 0x2d
 800659e:	426d      	negs	r5, r5
 80065a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065a4:	4859      	ldr	r0, [pc, #356]	@ (800670c <_printf_i+0x238>)
 80065a6:	230a      	movs	r3, #10
 80065a8:	e011      	b.n	80065ce <_printf_i+0xfa>
 80065aa:	6821      	ldr	r1, [r4, #0]
 80065ac:	6833      	ldr	r3, [r6, #0]
 80065ae:	0608      	lsls	r0, r1, #24
 80065b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80065b4:	d402      	bmi.n	80065bc <_printf_i+0xe8>
 80065b6:	0649      	lsls	r1, r1, #25
 80065b8:	bf48      	it	mi
 80065ba:	b2ad      	uxthmi	r5, r5
 80065bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80065be:	4853      	ldr	r0, [pc, #332]	@ (800670c <_printf_i+0x238>)
 80065c0:	6033      	str	r3, [r6, #0]
 80065c2:	bf14      	ite	ne
 80065c4:	230a      	movne	r3, #10
 80065c6:	2308      	moveq	r3, #8
 80065c8:	2100      	movs	r1, #0
 80065ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80065ce:	6866      	ldr	r6, [r4, #4]
 80065d0:	60a6      	str	r6, [r4, #8]
 80065d2:	2e00      	cmp	r6, #0
 80065d4:	bfa2      	ittt	ge
 80065d6:	6821      	ldrge	r1, [r4, #0]
 80065d8:	f021 0104 	bicge.w	r1, r1, #4
 80065dc:	6021      	strge	r1, [r4, #0]
 80065de:	b90d      	cbnz	r5, 80065e4 <_printf_i+0x110>
 80065e0:	2e00      	cmp	r6, #0
 80065e2:	d04b      	beq.n	800667c <_printf_i+0x1a8>
 80065e4:	4616      	mov	r6, r2
 80065e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80065ea:	fb03 5711 	mls	r7, r3, r1, r5
 80065ee:	5dc7      	ldrb	r7, [r0, r7]
 80065f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80065f4:	462f      	mov	r7, r5
 80065f6:	42bb      	cmp	r3, r7
 80065f8:	460d      	mov	r5, r1
 80065fa:	d9f4      	bls.n	80065e6 <_printf_i+0x112>
 80065fc:	2b08      	cmp	r3, #8
 80065fe:	d10b      	bne.n	8006618 <_printf_i+0x144>
 8006600:	6823      	ldr	r3, [r4, #0]
 8006602:	07df      	lsls	r7, r3, #31
 8006604:	d508      	bpl.n	8006618 <_printf_i+0x144>
 8006606:	6923      	ldr	r3, [r4, #16]
 8006608:	6861      	ldr	r1, [r4, #4]
 800660a:	4299      	cmp	r1, r3
 800660c:	bfde      	ittt	le
 800660e:	2330      	movle	r3, #48	@ 0x30
 8006610:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006614:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006618:	1b92      	subs	r2, r2, r6
 800661a:	6122      	str	r2, [r4, #16]
 800661c:	f8cd a000 	str.w	sl, [sp]
 8006620:	464b      	mov	r3, r9
 8006622:	aa03      	add	r2, sp, #12
 8006624:	4621      	mov	r1, r4
 8006626:	4640      	mov	r0, r8
 8006628:	f7ff fee6 	bl	80063f8 <_printf_common>
 800662c:	3001      	adds	r0, #1
 800662e:	d14a      	bne.n	80066c6 <_printf_i+0x1f2>
 8006630:	f04f 30ff 	mov.w	r0, #4294967295
 8006634:	b004      	add	sp, #16
 8006636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800663a:	6823      	ldr	r3, [r4, #0]
 800663c:	f043 0320 	orr.w	r3, r3, #32
 8006640:	6023      	str	r3, [r4, #0]
 8006642:	4833      	ldr	r0, [pc, #204]	@ (8006710 <_printf_i+0x23c>)
 8006644:	2778      	movs	r7, #120	@ 0x78
 8006646:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800664a:	6823      	ldr	r3, [r4, #0]
 800664c:	6831      	ldr	r1, [r6, #0]
 800664e:	061f      	lsls	r7, r3, #24
 8006650:	f851 5b04 	ldr.w	r5, [r1], #4
 8006654:	d402      	bmi.n	800665c <_printf_i+0x188>
 8006656:	065f      	lsls	r7, r3, #25
 8006658:	bf48      	it	mi
 800665a:	b2ad      	uxthmi	r5, r5
 800665c:	6031      	str	r1, [r6, #0]
 800665e:	07d9      	lsls	r1, r3, #31
 8006660:	bf44      	itt	mi
 8006662:	f043 0320 	orrmi.w	r3, r3, #32
 8006666:	6023      	strmi	r3, [r4, #0]
 8006668:	b11d      	cbz	r5, 8006672 <_printf_i+0x19e>
 800666a:	2310      	movs	r3, #16
 800666c:	e7ac      	b.n	80065c8 <_printf_i+0xf4>
 800666e:	4827      	ldr	r0, [pc, #156]	@ (800670c <_printf_i+0x238>)
 8006670:	e7e9      	b.n	8006646 <_printf_i+0x172>
 8006672:	6823      	ldr	r3, [r4, #0]
 8006674:	f023 0320 	bic.w	r3, r3, #32
 8006678:	6023      	str	r3, [r4, #0]
 800667a:	e7f6      	b.n	800666a <_printf_i+0x196>
 800667c:	4616      	mov	r6, r2
 800667e:	e7bd      	b.n	80065fc <_printf_i+0x128>
 8006680:	6833      	ldr	r3, [r6, #0]
 8006682:	6825      	ldr	r5, [r4, #0]
 8006684:	6961      	ldr	r1, [r4, #20]
 8006686:	1d18      	adds	r0, r3, #4
 8006688:	6030      	str	r0, [r6, #0]
 800668a:	062e      	lsls	r6, r5, #24
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	d501      	bpl.n	8006694 <_printf_i+0x1c0>
 8006690:	6019      	str	r1, [r3, #0]
 8006692:	e002      	b.n	800669a <_printf_i+0x1c6>
 8006694:	0668      	lsls	r0, r5, #25
 8006696:	d5fb      	bpl.n	8006690 <_printf_i+0x1bc>
 8006698:	8019      	strh	r1, [r3, #0]
 800669a:	2300      	movs	r3, #0
 800669c:	6123      	str	r3, [r4, #16]
 800669e:	4616      	mov	r6, r2
 80066a0:	e7bc      	b.n	800661c <_printf_i+0x148>
 80066a2:	6833      	ldr	r3, [r6, #0]
 80066a4:	1d1a      	adds	r2, r3, #4
 80066a6:	6032      	str	r2, [r6, #0]
 80066a8:	681e      	ldr	r6, [r3, #0]
 80066aa:	6862      	ldr	r2, [r4, #4]
 80066ac:	2100      	movs	r1, #0
 80066ae:	4630      	mov	r0, r6
 80066b0:	f7f9 fd8e 	bl	80001d0 <memchr>
 80066b4:	b108      	cbz	r0, 80066ba <_printf_i+0x1e6>
 80066b6:	1b80      	subs	r0, r0, r6
 80066b8:	6060      	str	r0, [r4, #4]
 80066ba:	6863      	ldr	r3, [r4, #4]
 80066bc:	6123      	str	r3, [r4, #16]
 80066be:	2300      	movs	r3, #0
 80066c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066c4:	e7aa      	b.n	800661c <_printf_i+0x148>
 80066c6:	6923      	ldr	r3, [r4, #16]
 80066c8:	4632      	mov	r2, r6
 80066ca:	4649      	mov	r1, r9
 80066cc:	4640      	mov	r0, r8
 80066ce:	47d0      	blx	sl
 80066d0:	3001      	adds	r0, #1
 80066d2:	d0ad      	beq.n	8006630 <_printf_i+0x15c>
 80066d4:	6823      	ldr	r3, [r4, #0]
 80066d6:	079b      	lsls	r3, r3, #30
 80066d8:	d413      	bmi.n	8006702 <_printf_i+0x22e>
 80066da:	68e0      	ldr	r0, [r4, #12]
 80066dc:	9b03      	ldr	r3, [sp, #12]
 80066de:	4298      	cmp	r0, r3
 80066e0:	bfb8      	it	lt
 80066e2:	4618      	movlt	r0, r3
 80066e4:	e7a6      	b.n	8006634 <_printf_i+0x160>
 80066e6:	2301      	movs	r3, #1
 80066e8:	4632      	mov	r2, r6
 80066ea:	4649      	mov	r1, r9
 80066ec:	4640      	mov	r0, r8
 80066ee:	47d0      	blx	sl
 80066f0:	3001      	adds	r0, #1
 80066f2:	d09d      	beq.n	8006630 <_printf_i+0x15c>
 80066f4:	3501      	adds	r5, #1
 80066f6:	68e3      	ldr	r3, [r4, #12]
 80066f8:	9903      	ldr	r1, [sp, #12]
 80066fa:	1a5b      	subs	r3, r3, r1
 80066fc:	42ab      	cmp	r3, r5
 80066fe:	dcf2      	bgt.n	80066e6 <_printf_i+0x212>
 8006700:	e7eb      	b.n	80066da <_printf_i+0x206>
 8006702:	2500      	movs	r5, #0
 8006704:	f104 0619 	add.w	r6, r4, #25
 8006708:	e7f5      	b.n	80066f6 <_printf_i+0x222>
 800670a:	bf00      	nop
 800670c:	08006d7a 	.word	0x08006d7a
 8006710:	08006d8b 	.word	0x08006d8b

08006714 <__sflush_r>:
 8006714:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800671c:	0716      	lsls	r6, r2, #28
 800671e:	4605      	mov	r5, r0
 8006720:	460c      	mov	r4, r1
 8006722:	d454      	bmi.n	80067ce <__sflush_r+0xba>
 8006724:	684b      	ldr	r3, [r1, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	dc02      	bgt.n	8006730 <__sflush_r+0x1c>
 800672a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800672c:	2b00      	cmp	r3, #0
 800672e:	dd48      	ble.n	80067c2 <__sflush_r+0xae>
 8006730:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006732:	2e00      	cmp	r6, #0
 8006734:	d045      	beq.n	80067c2 <__sflush_r+0xae>
 8006736:	2300      	movs	r3, #0
 8006738:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800673c:	682f      	ldr	r7, [r5, #0]
 800673e:	6a21      	ldr	r1, [r4, #32]
 8006740:	602b      	str	r3, [r5, #0]
 8006742:	d030      	beq.n	80067a6 <__sflush_r+0x92>
 8006744:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006746:	89a3      	ldrh	r3, [r4, #12]
 8006748:	0759      	lsls	r1, r3, #29
 800674a:	d505      	bpl.n	8006758 <__sflush_r+0x44>
 800674c:	6863      	ldr	r3, [r4, #4]
 800674e:	1ad2      	subs	r2, r2, r3
 8006750:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006752:	b10b      	cbz	r3, 8006758 <__sflush_r+0x44>
 8006754:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006756:	1ad2      	subs	r2, r2, r3
 8006758:	2300      	movs	r3, #0
 800675a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800675c:	6a21      	ldr	r1, [r4, #32]
 800675e:	4628      	mov	r0, r5
 8006760:	47b0      	blx	r6
 8006762:	1c43      	adds	r3, r0, #1
 8006764:	89a3      	ldrh	r3, [r4, #12]
 8006766:	d106      	bne.n	8006776 <__sflush_r+0x62>
 8006768:	6829      	ldr	r1, [r5, #0]
 800676a:	291d      	cmp	r1, #29
 800676c:	d82b      	bhi.n	80067c6 <__sflush_r+0xb2>
 800676e:	4a2a      	ldr	r2, [pc, #168]	@ (8006818 <__sflush_r+0x104>)
 8006770:	410a      	asrs	r2, r1
 8006772:	07d6      	lsls	r6, r2, #31
 8006774:	d427      	bmi.n	80067c6 <__sflush_r+0xb2>
 8006776:	2200      	movs	r2, #0
 8006778:	6062      	str	r2, [r4, #4]
 800677a:	04d9      	lsls	r1, r3, #19
 800677c:	6922      	ldr	r2, [r4, #16]
 800677e:	6022      	str	r2, [r4, #0]
 8006780:	d504      	bpl.n	800678c <__sflush_r+0x78>
 8006782:	1c42      	adds	r2, r0, #1
 8006784:	d101      	bne.n	800678a <__sflush_r+0x76>
 8006786:	682b      	ldr	r3, [r5, #0]
 8006788:	b903      	cbnz	r3, 800678c <__sflush_r+0x78>
 800678a:	6560      	str	r0, [r4, #84]	@ 0x54
 800678c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800678e:	602f      	str	r7, [r5, #0]
 8006790:	b1b9      	cbz	r1, 80067c2 <__sflush_r+0xae>
 8006792:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006796:	4299      	cmp	r1, r3
 8006798:	d002      	beq.n	80067a0 <__sflush_r+0x8c>
 800679a:	4628      	mov	r0, r5
 800679c:	f7ff fa9a 	bl	8005cd4 <_free_r>
 80067a0:	2300      	movs	r3, #0
 80067a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80067a4:	e00d      	b.n	80067c2 <__sflush_r+0xae>
 80067a6:	2301      	movs	r3, #1
 80067a8:	4628      	mov	r0, r5
 80067aa:	47b0      	blx	r6
 80067ac:	4602      	mov	r2, r0
 80067ae:	1c50      	adds	r0, r2, #1
 80067b0:	d1c9      	bne.n	8006746 <__sflush_r+0x32>
 80067b2:	682b      	ldr	r3, [r5, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d0c6      	beq.n	8006746 <__sflush_r+0x32>
 80067b8:	2b1d      	cmp	r3, #29
 80067ba:	d001      	beq.n	80067c0 <__sflush_r+0xac>
 80067bc:	2b16      	cmp	r3, #22
 80067be:	d11e      	bne.n	80067fe <__sflush_r+0xea>
 80067c0:	602f      	str	r7, [r5, #0]
 80067c2:	2000      	movs	r0, #0
 80067c4:	e022      	b.n	800680c <__sflush_r+0xf8>
 80067c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067ca:	b21b      	sxth	r3, r3
 80067cc:	e01b      	b.n	8006806 <__sflush_r+0xf2>
 80067ce:	690f      	ldr	r7, [r1, #16]
 80067d0:	2f00      	cmp	r7, #0
 80067d2:	d0f6      	beq.n	80067c2 <__sflush_r+0xae>
 80067d4:	0793      	lsls	r3, r2, #30
 80067d6:	680e      	ldr	r6, [r1, #0]
 80067d8:	bf08      	it	eq
 80067da:	694b      	ldreq	r3, [r1, #20]
 80067dc:	600f      	str	r7, [r1, #0]
 80067de:	bf18      	it	ne
 80067e0:	2300      	movne	r3, #0
 80067e2:	eba6 0807 	sub.w	r8, r6, r7
 80067e6:	608b      	str	r3, [r1, #8]
 80067e8:	f1b8 0f00 	cmp.w	r8, #0
 80067ec:	dde9      	ble.n	80067c2 <__sflush_r+0xae>
 80067ee:	6a21      	ldr	r1, [r4, #32]
 80067f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80067f2:	4643      	mov	r3, r8
 80067f4:	463a      	mov	r2, r7
 80067f6:	4628      	mov	r0, r5
 80067f8:	47b0      	blx	r6
 80067fa:	2800      	cmp	r0, #0
 80067fc:	dc08      	bgt.n	8006810 <__sflush_r+0xfc>
 80067fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006802:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006806:	81a3      	strh	r3, [r4, #12]
 8006808:	f04f 30ff 	mov.w	r0, #4294967295
 800680c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006810:	4407      	add	r7, r0
 8006812:	eba8 0800 	sub.w	r8, r8, r0
 8006816:	e7e7      	b.n	80067e8 <__sflush_r+0xd4>
 8006818:	dfbffffe 	.word	0xdfbffffe

0800681c <_fflush_r>:
 800681c:	b538      	push	{r3, r4, r5, lr}
 800681e:	690b      	ldr	r3, [r1, #16]
 8006820:	4605      	mov	r5, r0
 8006822:	460c      	mov	r4, r1
 8006824:	b913      	cbnz	r3, 800682c <_fflush_r+0x10>
 8006826:	2500      	movs	r5, #0
 8006828:	4628      	mov	r0, r5
 800682a:	bd38      	pop	{r3, r4, r5, pc}
 800682c:	b118      	cbz	r0, 8006836 <_fflush_r+0x1a>
 800682e:	6a03      	ldr	r3, [r0, #32]
 8006830:	b90b      	cbnz	r3, 8006836 <_fflush_r+0x1a>
 8006832:	f7ff f927 	bl	8005a84 <__sinit>
 8006836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d0f3      	beq.n	8006826 <_fflush_r+0xa>
 800683e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006840:	07d0      	lsls	r0, r2, #31
 8006842:	d404      	bmi.n	800684e <_fflush_r+0x32>
 8006844:	0599      	lsls	r1, r3, #22
 8006846:	d402      	bmi.n	800684e <_fflush_r+0x32>
 8006848:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800684a:	f7ff fa40 	bl	8005cce <__retarget_lock_acquire_recursive>
 800684e:	4628      	mov	r0, r5
 8006850:	4621      	mov	r1, r4
 8006852:	f7ff ff5f 	bl	8006714 <__sflush_r>
 8006856:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006858:	07da      	lsls	r2, r3, #31
 800685a:	4605      	mov	r5, r0
 800685c:	d4e4      	bmi.n	8006828 <_fflush_r+0xc>
 800685e:	89a3      	ldrh	r3, [r4, #12]
 8006860:	059b      	lsls	r3, r3, #22
 8006862:	d4e1      	bmi.n	8006828 <_fflush_r+0xc>
 8006864:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006866:	f7ff fa33 	bl	8005cd0 <__retarget_lock_release_recursive>
 800686a:	e7dd      	b.n	8006828 <_fflush_r+0xc>

0800686c <__swbuf_r>:
 800686c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800686e:	460e      	mov	r6, r1
 8006870:	4614      	mov	r4, r2
 8006872:	4605      	mov	r5, r0
 8006874:	b118      	cbz	r0, 800687e <__swbuf_r+0x12>
 8006876:	6a03      	ldr	r3, [r0, #32]
 8006878:	b90b      	cbnz	r3, 800687e <__swbuf_r+0x12>
 800687a:	f7ff f903 	bl	8005a84 <__sinit>
 800687e:	69a3      	ldr	r3, [r4, #24]
 8006880:	60a3      	str	r3, [r4, #8]
 8006882:	89a3      	ldrh	r3, [r4, #12]
 8006884:	071a      	lsls	r2, r3, #28
 8006886:	d501      	bpl.n	800688c <__swbuf_r+0x20>
 8006888:	6923      	ldr	r3, [r4, #16]
 800688a:	b943      	cbnz	r3, 800689e <__swbuf_r+0x32>
 800688c:	4621      	mov	r1, r4
 800688e:	4628      	mov	r0, r5
 8006890:	f000 f82a 	bl	80068e8 <__swsetup_r>
 8006894:	b118      	cbz	r0, 800689e <__swbuf_r+0x32>
 8006896:	f04f 37ff 	mov.w	r7, #4294967295
 800689a:	4638      	mov	r0, r7
 800689c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800689e:	6823      	ldr	r3, [r4, #0]
 80068a0:	6922      	ldr	r2, [r4, #16]
 80068a2:	1a98      	subs	r0, r3, r2
 80068a4:	6963      	ldr	r3, [r4, #20]
 80068a6:	b2f6      	uxtb	r6, r6
 80068a8:	4283      	cmp	r3, r0
 80068aa:	4637      	mov	r7, r6
 80068ac:	dc05      	bgt.n	80068ba <__swbuf_r+0x4e>
 80068ae:	4621      	mov	r1, r4
 80068b0:	4628      	mov	r0, r5
 80068b2:	f7ff ffb3 	bl	800681c <_fflush_r>
 80068b6:	2800      	cmp	r0, #0
 80068b8:	d1ed      	bne.n	8006896 <__swbuf_r+0x2a>
 80068ba:	68a3      	ldr	r3, [r4, #8]
 80068bc:	3b01      	subs	r3, #1
 80068be:	60a3      	str	r3, [r4, #8]
 80068c0:	6823      	ldr	r3, [r4, #0]
 80068c2:	1c5a      	adds	r2, r3, #1
 80068c4:	6022      	str	r2, [r4, #0]
 80068c6:	701e      	strb	r6, [r3, #0]
 80068c8:	6962      	ldr	r2, [r4, #20]
 80068ca:	1c43      	adds	r3, r0, #1
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d004      	beq.n	80068da <__swbuf_r+0x6e>
 80068d0:	89a3      	ldrh	r3, [r4, #12]
 80068d2:	07db      	lsls	r3, r3, #31
 80068d4:	d5e1      	bpl.n	800689a <__swbuf_r+0x2e>
 80068d6:	2e0a      	cmp	r6, #10
 80068d8:	d1df      	bne.n	800689a <__swbuf_r+0x2e>
 80068da:	4621      	mov	r1, r4
 80068dc:	4628      	mov	r0, r5
 80068de:	f7ff ff9d 	bl	800681c <_fflush_r>
 80068e2:	2800      	cmp	r0, #0
 80068e4:	d0d9      	beq.n	800689a <__swbuf_r+0x2e>
 80068e6:	e7d6      	b.n	8006896 <__swbuf_r+0x2a>

080068e8 <__swsetup_r>:
 80068e8:	b538      	push	{r3, r4, r5, lr}
 80068ea:	4b29      	ldr	r3, [pc, #164]	@ (8006990 <__swsetup_r+0xa8>)
 80068ec:	4605      	mov	r5, r0
 80068ee:	6818      	ldr	r0, [r3, #0]
 80068f0:	460c      	mov	r4, r1
 80068f2:	b118      	cbz	r0, 80068fc <__swsetup_r+0x14>
 80068f4:	6a03      	ldr	r3, [r0, #32]
 80068f6:	b90b      	cbnz	r3, 80068fc <__swsetup_r+0x14>
 80068f8:	f7ff f8c4 	bl	8005a84 <__sinit>
 80068fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006900:	0719      	lsls	r1, r3, #28
 8006902:	d422      	bmi.n	800694a <__swsetup_r+0x62>
 8006904:	06da      	lsls	r2, r3, #27
 8006906:	d407      	bmi.n	8006918 <__swsetup_r+0x30>
 8006908:	2209      	movs	r2, #9
 800690a:	602a      	str	r2, [r5, #0]
 800690c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006910:	81a3      	strh	r3, [r4, #12]
 8006912:	f04f 30ff 	mov.w	r0, #4294967295
 8006916:	e033      	b.n	8006980 <__swsetup_r+0x98>
 8006918:	0758      	lsls	r0, r3, #29
 800691a:	d512      	bpl.n	8006942 <__swsetup_r+0x5a>
 800691c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800691e:	b141      	cbz	r1, 8006932 <__swsetup_r+0x4a>
 8006920:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006924:	4299      	cmp	r1, r3
 8006926:	d002      	beq.n	800692e <__swsetup_r+0x46>
 8006928:	4628      	mov	r0, r5
 800692a:	f7ff f9d3 	bl	8005cd4 <_free_r>
 800692e:	2300      	movs	r3, #0
 8006930:	6363      	str	r3, [r4, #52]	@ 0x34
 8006932:	89a3      	ldrh	r3, [r4, #12]
 8006934:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006938:	81a3      	strh	r3, [r4, #12]
 800693a:	2300      	movs	r3, #0
 800693c:	6063      	str	r3, [r4, #4]
 800693e:	6923      	ldr	r3, [r4, #16]
 8006940:	6023      	str	r3, [r4, #0]
 8006942:	89a3      	ldrh	r3, [r4, #12]
 8006944:	f043 0308 	orr.w	r3, r3, #8
 8006948:	81a3      	strh	r3, [r4, #12]
 800694a:	6923      	ldr	r3, [r4, #16]
 800694c:	b94b      	cbnz	r3, 8006962 <__swsetup_r+0x7a>
 800694e:	89a3      	ldrh	r3, [r4, #12]
 8006950:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006954:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006958:	d003      	beq.n	8006962 <__swsetup_r+0x7a>
 800695a:	4621      	mov	r1, r4
 800695c:	4628      	mov	r0, r5
 800695e:	f000 f8a5 	bl	8006aac <__smakebuf_r>
 8006962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006966:	f013 0201 	ands.w	r2, r3, #1
 800696a:	d00a      	beq.n	8006982 <__swsetup_r+0x9a>
 800696c:	2200      	movs	r2, #0
 800696e:	60a2      	str	r2, [r4, #8]
 8006970:	6962      	ldr	r2, [r4, #20]
 8006972:	4252      	negs	r2, r2
 8006974:	61a2      	str	r2, [r4, #24]
 8006976:	6922      	ldr	r2, [r4, #16]
 8006978:	b942      	cbnz	r2, 800698c <__swsetup_r+0xa4>
 800697a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800697e:	d1c5      	bne.n	800690c <__swsetup_r+0x24>
 8006980:	bd38      	pop	{r3, r4, r5, pc}
 8006982:	0799      	lsls	r1, r3, #30
 8006984:	bf58      	it	pl
 8006986:	6962      	ldrpl	r2, [r4, #20]
 8006988:	60a2      	str	r2, [r4, #8]
 800698a:	e7f4      	b.n	8006976 <__swsetup_r+0x8e>
 800698c:	2000      	movs	r0, #0
 800698e:	e7f7      	b.n	8006980 <__swsetup_r+0x98>
 8006990:	20000018 	.word	0x20000018

08006994 <memmove>:
 8006994:	4288      	cmp	r0, r1
 8006996:	b510      	push	{r4, lr}
 8006998:	eb01 0402 	add.w	r4, r1, r2
 800699c:	d902      	bls.n	80069a4 <memmove+0x10>
 800699e:	4284      	cmp	r4, r0
 80069a0:	4623      	mov	r3, r4
 80069a2:	d807      	bhi.n	80069b4 <memmove+0x20>
 80069a4:	1e43      	subs	r3, r0, #1
 80069a6:	42a1      	cmp	r1, r4
 80069a8:	d008      	beq.n	80069bc <memmove+0x28>
 80069aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069b2:	e7f8      	b.n	80069a6 <memmove+0x12>
 80069b4:	4402      	add	r2, r0
 80069b6:	4601      	mov	r1, r0
 80069b8:	428a      	cmp	r2, r1
 80069ba:	d100      	bne.n	80069be <memmove+0x2a>
 80069bc:	bd10      	pop	{r4, pc}
 80069be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80069c6:	e7f7      	b.n	80069b8 <memmove+0x24>

080069c8 <_sbrk_r>:
 80069c8:	b538      	push	{r3, r4, r5, lr}
 80069ca:	4d06      	ldr	r5, [pc, #24]	@ (80069e4 <_sbrk_r+0x1c>)
 80069cc:	2300      	movs	r3, #0
 80069ce:	4604      	mov	r4, r0
 80069d0:	4608      	mov	r0, r1
 80069d2:	602b      	str	r3, [r5, #0]
 80069d4:	f7fa fb6c 	bl	80010b0 <_sbrk>
 80069d8:	1c43      	adds	r3, r0, #1
 80069da:	d102      	bne.n	80069e2 <_sbrk_r+0x1a>
 80069dc:	682b      	ldr	r3, [r5, #0]
 80069de:	b103      	cbz	r3, 80069e2 <_sbrk_r+0x1a>
 80069e0:	6023      	str	r3, [r4, #0]
 80069e2:	bd38      	pop	{r3, r4, r5, pc}
 80069e4:	20000354 	.word	0x20000354

080069e8 <memcpy>:
 80069e8:	440a      	add	r2, r1
 80069ea:	4291      	cmp	r1, r2
 80069ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80069f0:	d100      	bne.n	80069f4 <memcpy+0xc>
 80069f2:	4770      	bx	lr
 80069f4:	b510      	push	{r4, lr}
 80069f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069fe:	4291      	cmp	r1, r2
 8006a00:	d1f9      	bne.n	80069f6 <memcpy+0xe>
 8006a02:	bd10      	pop	{r4, pc}

08006a04 <_realloc_r>:
 8006a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a08:	4680      	mov	r8, r0
 8006a0a:	4615      	mov	r5, r2
 8006a0c:	460c      	mov	r4, r1
 8006a0e:	b921      	cbnz	r1, 8006a1a <_realloc_r+0x16>
 8006a10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a14:	4611      	mov	r1, r2
 8006a16:	f7ff b9c9 	b.w	8005dac <_malloc_r>
 8006a1a:	b92a      	cbnz	r2, 8006a28 <_realloc_r+0x24>
 8006a1c:	f7ff f95a 	bl	8005cd4 <_free_r>
 8006a20:	2400      	movs	r4, #0
 8006a22:	4620      	mov	r0, r4
 8006a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a28:	f000 f89e 	bl	8006b68 <_malloc_usable_size_r>
 8006a2c:	4285      	cmp	r5, r0
 8006a2e:	4606      	mov	r6, r0
 8006a30:	d802      	bhi.n	8006a38 <_realloc_r+0x34>
 8006a32:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006a36:	d8f4      	bhi.n	8006a22 <_realloc_r+0x1e>
 8006a38:	4629      	mov	r1, r5
 8006a3a:	4640      	mov	r0, r8
 8006a3c:	f7ff f9b6 	bl	8005dac <_malloc_r>
 8006a40:	4607      	mov	r7, r0
 8006a42:	2800      	cmp	r0, #0
 8006a44:	d0ec      	beq.n	8006a20 <_realloc_r+0x1c>
 8006a46:	42b5      	cmp	r5, r6
 8006a48:	462a      	mov	r2, r5
 8006a4a:	4621      	mov	r1, r4
 8006a4c:	bf28      	it	cs
 8006a4e:	4632      	movcs	r2, r6
 8006a50:	f7ff ffca 	bl	80069e8 <memcpy>
 8006a54:	4621      	mov	r1, r4
 8006a56:	4640      	mov	r0, r8
 8006a58:	f7ff f93c 	bl	8005cd4 <_free_r>
 8006a5c:	463c      	mov	r4, r7
 8006a5e:	e7e0      	b.n	8006a22 <_realloc_r+0x1e>

08006a60 <__swhatbuf_r>:
 8006a60:	b570      	push	{r4, r5, r6, lr}
 8006a62:	460c      	mov	r4, r1
 8006a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a68:	2900      	cmp	r1, #0
 8006a6a:	b096      	sub	sp, #88	@ 0x58
 8006a6c:	4615      	mov	r5, r2
 8006a6e:	461e      	mov	r6, r3
 8006a70:	da0d      	bge.n	8006a8e <__swhatbuf_r+0x2e>
 8006a72:	89a3      	ldrh	r3, [r4, #12]
 8006a74:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006a78:	f04f 0100 	mov.w	r1, #0
 8006a7c:	bf14      	ite	ne
 8006a7e:	2340      	movne	r3, #64	@ 0x40
 8006a80:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006a84:	2000      	movs	r0, #0
 8006a86:	6031      	str	r1, [r6, #0]
 8006a88:	602b      	str	r3, [r5, #0]
 8006a8a:	b016      	add	sp, #88	@ 0x58
 8006a8c:	bd70      	pop	{r4, r5, r6, pc}
 8006a8e:	466a      	mov	r2, sp
 8006a90:	f000 f848 	bl	8006b24 <_fstat_r>
 8006a94:	2800      	cmp	r0, #0
 8006a96:	dbec      	blt.n	8006a72 <__swhatbuf_r+0x12>
 8006a98:	9901      	ldr	r1, [sp, #4]
 8006a9a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006a9e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006aa2:	4259      	negs	r1, r3
 8006aa4:	4159      	adcs	r1, r3
 8006aa6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006aaa:	e7eb      	b.n	8006a84 <__swhatbuf_r+0x24>

08006aac <__smakebuf_r>:
 8006aac:	898b      	ldrh	r3, [r1, #12]
 8006aae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ab0:	079d      	lsls	r5, r3, #30
 8006ab2:	4606      	mov	r6, r0
 8006ab4:	460c      	mov	r4, r1
 8006ab6:	d507      	bpl.n	8006ac8 <__smakebuf_r+0x1c>
 8006ab8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006abc:	6023      	str	r3, [r4, #0]
 8006abe:	6123      	str	r3, [r4, #16]
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	6163      	str	r3, [r4, #20]
 8006ac4:	b003      	add	sp, #12
 8006ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ac8:	ab01      	add	r3, sp, #4
 8006aca:	466a      	mov	r2, sp
 8006acc:	f7ff ffc8 	bl	8006a60 <__swhatbuf_r>
 8006ad0:	9f00      	ldr	r7, [sp, #0]
 8006ad2:	4605      	mov	r5, r0
 8006ad4:	4639      	mov	r1, r7
 8006ad6:	4630      	mov	r0, r6
 8006ad8:	f7ff f968 	bl	8005dac <_malloc_r>
 8006adc:	b948      	cbnz	r0, 8006af2 <__smakebuf_r+0x46>
 8006ade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ae2:	059a      	lsls	r2, r3, #22
 8006ae4:	d4ee      	bmi.n	8006ac4 <__smakebuf_r+0x18>
 8006ae6:	f023 0303 	bic.w	r3, r3, #3
 8006aea:	f043 0302 	orr.w	r3, r3, #2
 8006aee:	81a3      	strh	r3, [r4, #12]
 8006af0:	e7e2      	b.n	8006ab8 <__smakebuf_r+0xc>
 8006af2:	89a3      	ldrh	r3, [r4, #12]
 8006af4:	6020      	str	r0, [r4, #0]
 8006af6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006afa:	81a3      	strh	r3, [r4, #12]
 8006afc:	9b01      	ldr	r3, [sp, #4]
 8006afe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006b02:	b15b      	cbz	r3, 8006b1c <__smakebuf_r+0x70>
 8006b04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b08:	4630      	mov	r0, r6
 8006b0a:	f000 f81d 	bl	8006b48 <_isatty_r>
 8006b0e:	b128      	cbz	r0, 8006b1c <__smakebuf_r+0x70>
 8006b10:	89a3      	ldrh	r3, [r4, #12]
 8006b12:	f023 0303 	bic.w	r3, r3, #3
 8006b16:	f043 0301 	orr.w	r3, r3, #1
 8006b1a:	81a3      	strh	r3, [r4, #12]
 8006b1c:	89a3      	ldrh	r3, [r4, #12]
 8006b1e:	431d      	orrs	r5, r3
 8006b20:	81a5      	strh	r5, [r4, #12]
 8006b22:	e7cf      	b.n	8006ac4 <__smakebuf_r+0x18>

08006b24 <_fstat_r>:
 8006b24:	b538      	push	{r3, r4, r5, lr}
 8006b26:	4d07      	ldr	r5, [pc, #28]	@ (8006b44 <_fstat_r+0x20>)
 8006b28:	2300      	movs	r3, #0
 8006b2a:	4604      	mov	r4, r0
 8006b2c:	4608      	mov	r0, r1
 8006b2e:	4611      	mov	r1, r2
 8006b30:	602b      	str	r3, [r5, #0]
 8006b32:	f7fa fa94 	bl	800105e <_fstat>
 8006b36:	1c43      	adds	r3, r0, #1
 8006b38:	d102      	bne.n	8006b40 <_fstat_r+0x1c>
 8006b3a:	682b      	ldr	r3, [r5, #0]
 8006b3c:	b103      	cbz	r3, 8006b40 <_fstat_r+0x1c>
 8006b3e:	6023      	str	r3, [r4, #0]
 8006b40:	bd38      	pop	{r3, r4, r5, pc}
 8006b42:	bf00      	nop
 8006b44:	20000354 	.word	0x20000354

08006b48 <_isatty_r>:
 8006b48:	b538      	push	{r3, r4, r5, lr}
 8006b4a:	4d06      	ldr	r5, [pc, #24]	@ (8006b64 <_isatty_r+0x1c>)
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	4604      	mov	r4, r0
 8006b50:	4608      	mov	r0, r1
 8006b52:	602b      	str	r3, [r5, #0]
 8006b54:	f7fa fa93 	bl	800107e <_isatty>
 8006b58:	1c43      	adds	r3, r0, #1
 8006b5a:	d102      	bne.n	8006b62 <_isatty_r+0x1a>
 8006b5c:	682b      	ldr	r3, [r5, #0]
 8006b5e:	b103      	cbz	r3, 8006b62 <_isatty_r+0x1a>
 8006b60:	6023      	str	r3, [r4, #0]
 8006b62:	bd38      	pop	{r3, r4, r5, pc}
 8006b64:	20000354 	.word	0x20000354

08006b68 <_malloc_usable_size_r>:
 8006b68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b6c:	1f18      	subs	r0, r3, #4
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	bfbc      	itt	lt
 8006b72:	580b      	ldrlt	r3, [r1, r0]
 8006b74:	18c0      	addlt	r0, r0, r3
 8006b76:	4770      	bx	lr

08006b78 <_init>:
 8006b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b7a:	bf00      	nop
 8006b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b7e:	bc08      	pop	{r3}
 8006b80:	469e      	mov	lr, r3
 8006b82:	4770      	bx	lr

08006b84 <_fini>:
 8006b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b86:	bf00      	nop
 8006b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b8a:	bc08      	pop	{r3}
 8006b8c:	469e      	mov	lr, r3
 8006b8e:	4770      	bx	lr
