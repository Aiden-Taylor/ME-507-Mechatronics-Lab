
Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ab8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003c48  08003c48  00004c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ce8  08003ce8  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003ce8  08003ce8  00004ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cf0  08003cf0  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cf0  08003cf0  00004cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003cf4  08003cf4  00004cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003cf8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000068  08003d60  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08003d60  00005270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a1d3  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a82  00000000  00000000  0000f26b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  00010cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000932  00000000  00000000  000118f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027084  00000000  00000000  0001222a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d2d9  00000000  00000000  000392ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee702  00000000  00000000  00046587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00134c89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038b0  00000000  00000000  00134ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0013857c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003c30 	.word	0x08003c30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08003c30 	.word	0x08003c30

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f000 fb84 	bl	8000982 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f82d 	bl	80002d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 f985 	bl	800058c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000282:	f000 f87b 	bl	800037c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000286:	f000 f933 	bl	80004f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800028a:	2100      	movs	r1, #0
 800028c:	4810      	ldr	r0, [pc, #64]	@ (80002d0 <main+0x60>)
 800028e:	f001 fd85 	bl	8001d9c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000292:	2104      	movs	r1, #4
 8000294:	480e      	ldr	r0, [pc, #56]	@ (80002d0 <main+0x60>)
 8000296:	f001 fd81 	bl	8001d9c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */
    motor_t mot1 = {.duty    = 0,
 800029a:	4a0e      	ldr	r2, [pc, #56]	@ (80002d4 <main+0x64>)
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	ca07      	ldmia	r2, {r0, r1, r2}
 80002a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  {
    /* USER CODE END WHILE */


	      // Set the duty cycle
	      set_duty(&mot1, 42);
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	212a      	movs	r1, #42	@ 0x2a
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 f98d 	bl	80005c8 <set_duty>

	      HAL_Delay(1000);
 80002ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002b2:	f000 fbdb 	bl	8000a6c <HAL_Delay>
	      set_duty(&mot1, -42);
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	f06f 0129 	mvn.w	r1, #41	@ 0x29
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 f983 	bl	80005c8 <set_duty>
	      HAL_Delay(1000);
 80002c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002c6:	f000 fbd1 	bl	8000a6c <HAL_Delay>
	      set_duty(&mot1, 42);
 80002ca:	bf00      	nop
 80002cc:	e7ea      	b.n	80002a4 <main+0x34>
 80002ce:	bf00      	nop
 80002d0:	20000084 	.word	0x20000084
 80002d4:	08003c48 	.word	0x08003c48

080002d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b096      	sub	sp, #88	@ 0x58
 80002dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002de:	f107 0314 	add.w	r3, r7, #20
 80002e2:	2244      	movs	r2, #68	@ 0x44
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f002 fe89 	bl	8002ffe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ec:	463b      	mov	r3, r7
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
 80002f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002fa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80002fe:	f000 fe77 	bl	8000ff0 <HAL_PWREx_ControlVoltageScaling>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000308:	f000 f958 	bl	80005bc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800030c:	2310      	movs	r3, #16
 800030e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000310:	2301      	movs	r3, #1
 8000312:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000314:	2300      	movs	r3, #0
 8000316:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000318:	2360      	movs	r3, #96	@ 0x60
 800031a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800031c:	2302      	movs	r3, #2
 800031e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000320:	2301      	movs	r3, #1
 8000322:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000324:	2301      	movs	r3, #1
 8000326:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000328:	2328      	movs	r3, #40	@ 0x28
 800032a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800032c:	2307      	movs	r3, #7
 800032e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000330:	2302      	movs	r3, #2
 8000332:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000334:	2302      	movs	r3, #2
 8000336:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000338:	f107 0314 	add.w	r3, r7, #20
 800033c:	4618      	mov	r0, r3
 800033e:	f000 fead 	bl	800109c <HAL_RCC_OscConfig>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000348:	f000 f938 	bl	80005bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034c:	230f      	movs	r3, #15
 800034e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000350:	2303      	movs	r3, #3
 8000352:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000360:	463b      	mov	r3, r7
 8000362:	2104      	movs	r1, #4
 8000364:	4618      	mov	r0, r3
 8000366:	f001 fa75 	bl	8001854 <HAL_RCC_ClockConfig>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000370:	f000 f924 	bl	80005bc <Error_Handler>
  }
}
 8000374:	bf00      	nop
 8000376:	3758      	adds	r7, #88	@ 0x58
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}

0800037c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b09a      	sub	sp, #104	@ 0x68
 8000380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000382:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000390:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
 8000398:	605a      	str	r2, [r3, #4]
 800039a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800039c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	605a      	str	r2, [r3, #4]
 80003a6:	609a      	str	r2, [r3, #8]
 80003a8:	60da      	str	r2, [r3, #12]
 80003aa:	611a      	str	r2, [r3, #16]
 80003ac:	615a      	str	r2, [r3, #20]
 80003ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	222c      	movs	r2, #44	@ 0x2c
 80003b4:	2100      	movs	r1, #0
 80003b6:	4618      	mov	r0, r3
 80003b8:	f002 fe21 	bl	8002ffe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003bc:	4b4a      	ldr	r3, [pc, #296]	@ (80004e8 <MX_TIM1_Init+0x16c>)
 80003be:	4a4b      	ldr	r2, [pc, #300]	@ (80004ec <MX_TIM1_Init+0x170>)
 80003c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80003c2:	4b49      	ldr	r3, [pc, #292]	@ (80004e8 <MX_TIM1_Init+0x16c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003c8:	4b47      	ldr	r3, [pc, #284]	@ (80004e8 <MX_TIM1_Init+0x16c>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 265;
 80003ce:	4b46      	ldr	r3, [pc, #280]	@ (80004e8 <MX_TIM1_Init+0x16c>)
 80003d0:	f240 1209 	movw	r2, #265	@ 0x109
 80003d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003d6:	4b44      	ldr	r3, [pc, #272]	@ (80004e8 <MX_TIM1_Init+0x16c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003dc:	4b42      	ldr	r3, [pc, #264]	@ (80004e8 <MX_TIM1_Init+0x16c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003e2:	4b41      	ldr	r3, [pc, #260]	@ (80004e8 <MX_TIM1_Init+0x16c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003e8:	483f      	ldr	r0, [pc, #252]	@ (80004e8 <MX_TIM1_Init+0x16c>)
 80003ea:	f001 fc1f 	bl	8001c2c <HAL_TIM_Base_Init>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80003f4:	f000 f8e2 	bl	80005bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003fc:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003fe:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000402:	4619      	mov	r1, r3
 8000404:	4838      	ldr	r0, [pc, #224]	@ (80004e8 <MX_TIM1_Init+0x16c>)
 8000406:	f001 fee3 	bl	80021d0 <HAL_TIM_ConfigClockSource>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000410:	f000 f8d4 	bl	80005bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000414:	4834      	ldr	r0, [pc, #208]	@ (80004e8 <MX_TIM1_Init+0x16c>)
 8000416:	f001 fc60 	bl	8001cda <HAL_TIM_PWM_Init>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000420:	f000 f8cc 	bl	80005bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000424:	2300      	movs	r3, #0
 8000426:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000428:	2300      	movs	r3, #0
 800042a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800042c:	2300      	movs	r3, #0
 800042e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000430:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000434:	4619      	mov	r1, r3
 8000436:	482c      	ldr	r0, [pc, #176]	@ (80004e8 <MX_TIM1_Init+0x16c>)
 8000438:	f002 fbc4 	bl	8002bc4 <HAL_TIMEx_MasterConfigSynchronization>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000442:	f000 f8bb 	bl	80005bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000446:	2360      	movs	r3, #96	@ 0x60
 8000448:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 265;
 800044a:	f240 1309 	movw	r3, #265	@ 0x109
 800044e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000450:	2300      	movs	r3, #0
 8000452:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000454:	2300      	movs	r3, #0
 8000456:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000458:	2300      	movs	r3, #0
 800045a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800045c:	2300      	movs	r3, #0
 800045e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000460:	2300      	movs	r3, #0
 8000462:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000464:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000468:	2200      	movs	r2, #0
 800046a:	4619      	mov	r1, r3
 800046c:	481e      	ldr	r0, [pc, #120]	@ (80004e8 <MX_TIM1_Init+0x16c>)
 800046e:	f001 fd9b 	bl	8001fa8 <HAL_TIM_PWM_ConfigChannel>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000478:	f000 f8a0 	bl	80005bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800047c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000480:	2204      	movs	r2, #4
 8000482:	4619      	mov	r1, r3
 8000484:	4818      	ldr	r0, [pc, #96]	@ (80004e8 <MX_TIM1_Init+0x16c>)
 8000486:	f001 fd8f 	bl	8001fa8 <HAL_TIM_PWM_ConfigChannel>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000490:	f000 f894 	bl	80005bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000494:	2300      	movs	r3, #0
 8000496:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000498:	2300      	movs	r3, #0
 800049a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800049c:	2300      	movs	r3, #0
 800049e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004a0:	2300      	movs	r3, #0
 80004a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004a4:	2300      	movs	r3, #0
 80004a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80004b2:	2300      	movs	r3, #0
 80004b4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80004b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80004ba:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80004bc:	2300      	movs	r3, #0
 80004be:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004c0:	2300      	movs	r3, #0
 80004c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	4619      	mov	r1, r3
 80004c8:	4807      	ldr	r0, [pc, #28]	@ (80004e8 <MX_TIM1_Init+0x16c>)
 80004ca:	f002 fc03 	bl	8002cd4 <HAL_TIMEx_ConfigBreakDeadTime>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 80004d4:	f000 f872 	bl	80005bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004d8:	4803      	ldr	r0, [pc, #12]	@ (80004e8 <MX_TIM1_Init+0x16c>)
 80004da:	f000 f90d 	bl	80006f8 <HAL_TIM_MspPostInit>

}
 80004de:	bf00      	nop
 80004e0:	3768      	adds	r7, #104	@ 0x68
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000084 	.word	0x20000084
 80004ec:	40012c00 	.word	0x40012c00

080004f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b088      	sub	sp, #32
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004f6:	f107 0310 	add.w	r3, r7, #16
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800050e:	4b1e      	ldr	r3, [pc, #120]	@ (8000588 <MX_TIM2_Init+0x98>)
 8000510:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000514:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 610;
 8000516:	4b1c      	ldr	r3, [pc, #112]	@ (8000588 <MX_TIM2_Init+0x98>)
 8000518:	f240 2262 	movw	r2, #610	@ 0x262
 800051c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800051e:	4b1a      	ldr	r3, [pc, #104]	@ (8000588 <MX_TIM2_Init+0x98>)
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000524:	4b18      	ldr	r3, [pc, #96]	@ (8000588 <MX_TIM2_Init+0x98>)
 8000526:	f04f 32ff 	mov.w	r2, #4294967295
 800052a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800052c:	4b16      	ldr	r3, [pc, #88]	@ (8000588 <MX_TIM2_Init+0x98>)
 800052e:	2200      	movs	r2, #0
 8000530:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000532:	4b15      	ldr	r3, [pc, #84]	@ (8000588 <MX_TIM2_Init+0x98>)
 8000534:	2200      	movs	r2, #0
 8000536:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000538:	4813      	ldr	r0, [pc, #76]	@ (8000588 <MX_TIM2_Init+0x98>)
 800053a:	f001 fb77 	bl	8001c2c <HAL_TIM_Base_Init>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000544:	f000 f83a 	bl	80005bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000548:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800054c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800054e:	f107 0310 	add.w	r3, r7, #16
 8000552:	4619      	mov	r1, r3
 8000554:	480c      	ldr	r0, [pc, #48]	@ (8000588 <MX_TIM2_Init+0x98>)
 8000556:	f001 fe3b 	bl	80021d0 <HAL_TIM_ConfigClockSource>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000560:	f000 f82c 	bl	80005bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000568:	2300      	movs	r3, #0
 800056a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	4619      	mov	r1, r3
 8000570:	4805      	ldr	r0, [pc, #20]	@ (8000588 <MX_TIM2_Init+0x98>)
 8000572:	f002 fb27 	bl	8002bc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800057c:	f000 f81e 	bl	80005bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000580:	bf00      	nop
 8000582:	3720      	adds	r7, #32
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	200000d0 	.word	0x200000d0

0800058c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000592:	4b09      	ldr	r3, [pc, #36]	@ (80005b8 <MX_GPIO_Init+0x2c>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000596:	4a08      	ldr	r2, [pc, #32]	@ (80005b8 <MX_GPIO_Init+0x2c>)
 8000598:	f043 0301 	orr.w	r3, r3, #1
 800059c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800059e:	4b06      	ldr	r3, [pc, #24]	@ (80005b8 <MX_GPIO_Init+0x2c>)
 80005a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	40021000 	.word	0x40021000

080005bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c0:	b672      	cpsid	i
}
 80005c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c4:	bf00      	nop
 80005c6:	e7fd      	b.n	80005c4 <Error_Handler+0x8>

080005c8 <set_duty>:
 *      Author: Aiden
 */
#include "motor_driver.h"
// The implementation of the motor object method should go in the .c file
void set_duty(motor_t* p_mot, int32_t duty)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	6039      	str	r1, [r7, #0]
    // Print to the console so we can see what's happening
    printf("Setting Motor Duty Cycle to %d", duty);
 80005d2:	6839      	ldr	r1, [r7, #0]
 80005d4:	481b      	ldr	r0, [pc, #108]	@ (8000644 <set_duty+0x7c>)
 80005d6:	f002 fcbd 	bl	8002f54 <iprintf>

    // Assign the duty cycle to a field in the structure
    p_mot->duty = duty;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	683a      	ldr	r2, [r7, #0]
 80005de:	601a      	str	r2, [r3, #0]
	if (duty>=0){
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	db15      	blt.n	8000612 <set_duty+0x4a>
		duty = duty*265/100;
 80005e6:	683a      	ldr	r2, [r7, #0]
 80005e8:	4613      	mov	r3, r2
 80005ea:	015b      	lsls	r3, r3, #5
 80005ec:	4413      	add	r3, r2
 80005ee:	00db      	lsls	r3, r3, #3
 80005f0:	4413      	add	r3, r2
 80005f2:	4a15      	ldr	r2, [pc, #84]	@ (8000648 <set_duty+0x80>)
 80005f4:	fb82 1203 	smull	r1, r2, r2, r3
 80005f8:	1152      	asrs	r2, r2, #5
 80005fa:	17db      	asrs	r3, r3, #31
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	603b      	str	r3, [r7, #0]
		p_mot->timer->CCR1 = duty;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	689b      	ldr	r3, [r3, #8]
 8000604:	683a      	ldr	r2, [r7, #0]
 8000606:	635a      	str	r2, [r3, #52]	@ 0x34
		p_mot->timer->CCR2 = 0;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	2200      	movs	r2, #0
 800060e:	639a      	str	r2, [r3, #56]	@ 0x38
    // The arrow operator is shorthand for
    // dereferencing and accessing struct fields
    // p_mot->duty = duty;
    // is shorthand for
    // (*p_mot).duty = duty;
}
 8000610:	e013      	b.n	800063a <set_duty+0x72>
		duty = -1*duty*265/100;
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	f46f 7284 	mvn.w	r2, #264	@ 0x108
 8000618:	fb02 f303 	mul.w	r3, r2, r3
 800061c:	4a0a      	ldr	r2, [pc, #40]	@ (8000648 <set_duty+0x80>)
 800061e:	fb82 1203 	smull	r1, r2, r2, r3
 8000622:	1152      	asrs	r2, r2, #5
 8000624:	17db      	asrs	r3, r3, #31
 8000626:	1ad3      	subs	r3, r2, r3
 8000628:	603b      	str	r3, [r7, #0]
		p_mot->timer->CCR1 = 0;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	689b      	ldr	r3, [r3, #8]
 800062e:	2200      	movs	r2, #0
 8000630:	635a      	str	r2, [r3, #52]	@ 0x34
		p_mot->timer->CCR2 = duty;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	683a      	ldr	r2, [r7, #0]
 8000638:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	08003c54 	.word	0x08003c54
 8000648:	51eb851f 	.word	0x51eb851f

0800064c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000652:	4b0f      	ldr	r3, [pc, #60]	@ (8000690 <HAL_MspInit+0x44>)
 8000654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000656:	4a0e      	ldr	r2, [pc, #56]	@ (8000690 <HAL_MspInit+0x44>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6613      	str	r3, [r2, #96]	@ 0x60
 800065e:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <HAL_MspInit+0x44>)
 8000660:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066a:	4b09      	ldr	r3, [pc, #36]	@ (8000690 <HAL_MspInit+0x44>)
 800066c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800066e:	4a08      	ldr	r2, [pc, #32]	@ (8000690 <HAL_MspInit+0x44>)
 8000670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000674:	6593      	str	r3, [r2, #88]	@ 0x58
 8000676:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <HAL_MspInit+0x44>)
 8000678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800067a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40021000 	.word	0x40021000

08000694 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a13      	ldr	r2, [pc, #76]	@ (80006f0 <HAL_TIM_Base_MspInit+0x5c>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d10c      	bne.n	80006c0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006a6:	4b13      	ldr	r3, [pc, #76]	@ (80006f4 <HAL_TIM_Base_MspInit+0x60>)
 80006a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006aa:	4a12      	ldr	r2, [pc, #72]	@ (80006f4 <HAL_TIM_Base_MspInit+0x60>)
 80006ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80006b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80006b2:	4b10      	ldr	r3, [pc, #64]	@ (80006f4 <HAL_TIM_Base_MspInit+0x60>)
 80006b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80006be:	e010      	b.n	80006e2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80006c8:	d10b      	bne.n	80006e2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006ca:	4b0a      	ldr	r3, [pc, #40]	@ (80006f4 <HAL_TIM_Base_MspInit+0x60>)
 80006cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006ce:	4a09      	ldr	r2, [pc, #36]	@ (80006f4 <HAL_TIM_Base_MspInit+0x60>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80006d6:	4b07      	ldr	r3, [pc, #28]	@ (80006f4 <HAL_TIM_Base_MspInit+0x60>)
 80006d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
}
 80006e2:	bf00      	nop
 80006e4:	3714      	adds	r7, #20
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	40012c00 	.word	0x40012c00
 80006f4:	40021000 	.word	0x40021000

080006f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b088      	sub	sp, #32
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a12      	ldr	r2, [pc, #72]	@ (8000760 <HAL_TIM_MspPostInit+0x68>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d11d      	bne.n	8000756 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4b12      	ldr	r3, [pc, #72]	@ (8000764 <HAL_TIM_MspPostInit+0x6c>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071e:	4a11      	ldr	r2, [pc, #68]	@ (8000764 <HAL_TIM_MspPostInit+0x6c>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000726:	4b0f      	ldr	r3, [pc, #60]	@ (8000764 <HAL_TIM_MspPostInit+0x6c>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000732:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000736:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000738:	2302      	movs	r3, #2
 800073a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	2300      	movs	r3, #0
 8000742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000744:	2301      	movs	r3, #1
 8000746:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	4619      	mov	r1, r3
 800074e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000752:	f000 fa95 	bl	8000c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000756:	bf00      	nop
 8000758:	3720      	adds	r7, #32
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40012c00 	.word	0x40012c00
 8000764:	40021000 	.word	0x40021000

08000768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <NMI_Handler+0x4>

08000770 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <HardFault_Handler+0x4>

08000778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <MemManage_Handler+0x4>

08000780 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <BusFault_Handler+0x4>

08000788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <UsageFault_Handler+0x4>

08000790 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr

0800079e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr

080007ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007be:	f000 f935 	bl	8000a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b086      	sub	sp, #24
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	60f8      	str	r0, [r7, #12]
 80007ce:	60b9      	str	r1, [r7, #8]
 80007d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
 80007d6:	e00a      	b.n	80007ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007d8:	f3af 8000 	nop.w
 80007dc:	4601      	mov	r1, r0
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	1c5a      	adds	r2, r3, #1
 80007e2:	60ba      	str	r2, [r7, #8]
 80007e4:	b2ca      	uxtb	r2, r1
 80007e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	3301      	adds	r3, #1
 80007ec:	617b      	str	r3, [r7, #20]
 80007ee:	697a      	ldr	r2, [r7, #20]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	dbf0      	blt.n	80007d8 <_read+0x12>
  }

  return len;
 80007f6:	687b      	ldr	r3, [r7, #4]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	e009      	b.n	8000826 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	1c5a      	adds	r2, r3, #1
 8000816:	60ba      	str	r2, [r7, #8]
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	4618      	mov	r0, r3
 800081c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	3301      	adds	r3, #1
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	697a      	ldr	r2, [r7, #20]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	429a      	cmp	r2, r3
 800082c:	dbf1      	blt.n	8000812 <_write+0x12>
  }
  return len;
 800082e:	687b      	ldr	r3, [r7, #4]
}
 8000830:	4618      	mov	r0, r3
 8000832:	3718      	adds	r7, #24
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <_close>:

int _close(int file)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000840:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000844:	4618      	mov	r0, r3
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000860:	605a      	str	r2, [r3, #4]
  return 0;
 8000862:	2300      	movs	r3, #0
}
 8000864:	4618      	mov	r0, r3
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <_isatty>:

int _isatty(int file)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000878:	2301      	movs	r3, #1
}
 800087a:	4618      	mov	r0, r3
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr

08000886 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000886:	b480      	push	{r7}
 8000888:	b085      	sub	sp, #20
 800088a:	af00      	add	r7, sp, #0
 800088c:	60f8      	str	r0, [r7, #12]
 800088e:	60b9      	str	r1, [r7, #8]
 8000890:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000892:	2300      	movs	r3, #0
}
 8000894:	4618      	mov	r0, r3
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a8:	4a14      	ldr	r2, [pc, #80]	@ (80008fc <_sbrk+0x5c>)
 80008aa:	4b15      	ldr	r3, [pc, #84]	@ (8000900 <_sbrk+0x60>)
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008b4:	4b13      	ldr	r3, [pc, #76]	@ (8000904 <_sbrk+0x64>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d102      	bne.n	80008c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008bc:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <_sbrk+0x64>)
 80008be:	4a12      	ldr	r2, [pc, #72]	@ (8000908 <_sbrk+0x68>)
 80008c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008c2:	4b10      	ldr	r3, [pc, #64]	@ (8000904 <_sbrk+0x64>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4413      	add	r3, r2
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d207      	bcs.n	80008e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008d0:	f002 fbe4 	bl	800309c <__errno>
 80008d4:	4603      	mov	r3, r0
 80008d6:	220c      	movs	r2, #12
 80008d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008da:	f04f 33ff 	mov.w	r3, #4294967295
 80008de:	e009      	b.n	80008f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008e0:	4b08      	ldr	r3, [pc, #32]	@ (8000904 <_sbrk+0x64>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008e6:	4b07      	ldr	r3, [pc, #28]	@ (8000904 <_sbrk+0x64>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	4a05      	ldr	r2, [pc, #20]	@ (8000904 <_sbrk+0x64>)
 80008f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008f2:	68fb      	ldr	r3, [r7, #12]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3718      	adds	r7, #24
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20018000 	.word	0x20018000
 8000900:	00000400 	.word	0x00000400
 8000904:	2000011c 	.word	0x2000011c
 8000908:	20000270 	.word	0x20000270

0800090c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000910:	4b06      	ldr	r3, [pc, #24]	@ (800092c <SystemInit+0x20>)
 8000912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000916:	4a05      	ldr	r2, [pc, #20]	@ (800092c <SystemInit+0x20>)
 8000918:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800091c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000930:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000968 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000934:	f7ff ffea 	bl	800090c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000938:	480c      	ldr	r0, [pc, #48]	@ (800096c <LoopForever+0x6>)
  ldr r1, =_edata
 800093a:	490d      	ldr	r1, [pc, #52]	@ (8000970 <LoopForever+0xa>)
  ldr r2, =_sidata
 800093c:	4a0d      	ldr	r2, [pc, #52]	@ (8000974 <LoopForever+0xe>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000940:	e002      	b.n	8000948 <LoopCopyDataInit>

08000942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000946:	3304      	adds	r3, #4

08000948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800094c:	d3f9      	bcc.n	8000942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094e:	4a0a      	ldr	r2, [pc, #40]	@ (8000978 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000950:	4c0a      	ldr	r4, [pc, #40]	@ (800097c <LoopForever+0x16>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000954:	e001      	b.n	800095a <LoopFillZerobss>

08000956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000958:	3204      	adds	r2, #4

0800095a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800095c:	d3fb      	bcc.n	8000956 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800095e:	f002 fba3 	bl	80030a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000962:	f7ff fc85 	bl	8000270 <main>

08000966 <LoopForever>:

LoopForever:
    b LoopForever
 8000966:	e7fe      	b.n	8000966 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000968:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800096c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000970:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000974:	08003cf8 	.word	0x08003cf8
  ldr r2, =_sbss
 8000978:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800097c:	20000270 	.word	0x20000270

08000980 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000980:	e7fe      	b.n	8000980 <ADC1_2_IRQHandler>

08000982 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000988:	2300      	movs	r3, #0
 800098a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800098c:	2003      	movs	r0, #3
 800098e:	f000 f943 	bl	8000c18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000992:	200f      	movs	r0, #15
 8000994:	f000 f80e 	bl	80009b4 <HAL_InitTick>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d002      	beq.n	80009a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	71fb      	strb	r3, [r7, #7]
 80009a2:	e001      	b.n	80009a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009a4:	f7ff fe52 	bl	800064c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009a8:	79fb      	ldrb	r3, [r7, #7]
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009bc:	2300      	movs	r3, #0
 80009be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009c0:	4b17      	ldr	r3, [pc, #92]	@ (8000a20 <HAL_InitTick+0x6c>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d023      	beq.n	8000a10 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009c8:	4b16      	ldr	r3, [pc, #88]	@ (8000a24 <HAL_InitTick+0x70>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	4b14      	ldr	r3, [pc, #80]	@ (8000a20 <HAL_InitTick+0x6c>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	4619      	mov	r1, r3
 80009d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009da:	fbb2 f3f3 	udiv	r3, r2, r3
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 f941 	bl	8000c66 <HAL_SYSTICK_Config>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d10f      	bne.n	8000a0a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2b0f      	cmp	r3, #15
 80009ee:	d809      	bhi.n	8000a04 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f0:	2200      	movs	r2, #0
 80009f2:	6879      	ldr	r1, [r7, #4]
 80009f4:	f04f 30ff 	mov.w	r0, #4294967295
 80009f8:	f000 f919 	bl	8000c2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009fc:	4a0a      	ldr	r2, [pc, #40]	@ (8000a28 <HAL_InitTick+0x74>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6013      	str	r3, [r2, #0]
 8000a02:	e007      	b.n	8000a14 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a04:	2301      	movs	r3, #1
 8000a06:	73fb      	strb	r3, [r7, #15]
 8000a08:	e004      	b.n	8000a14 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	73fb      	strb	r3, [r7, #15]
 8000a0e:	e001      	b.n	8000a14 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a10:	2301      	movs	r3, #1
 8000a12:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000008 	.word	0x20000008
 8000a24:	20000000 	.word	0x20000000
 8000a28:	20000004 	.word	0x20000004

08000a2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a30:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <HAL_IncTick+0x20>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <HAL_IncTick+0x24>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	4a04      	ldr	r2, [pc, #16]	@ (8000a50 <HAL_IncTick+0x24>)
 8000a3e:	6013      	str	r3, [r2, #0]
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20000008 	.word	0x20000008
 8000a50:	20000120 	.word	0x20000120

08000a54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return uwTick;
 8000a58:	4b03      	ldr	r3, [pc, #12]	@ (8000a68 <HAL_GetTick+0x14>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	20000120 	.word	0x20000120

08000a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a74:	f7ff ffee 	bl	8000a54 <HAL_GetTick>
 8000a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a84:	d005      	beq.n	8000a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a86:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab0 <HAL_Delay+0x44>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4413      	add	r3, r2
 8000a90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a92:	bf00      	nop
 8000a94:	f7ff ffde 	bl	8000a54 <HAL_GetTick>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d8f7      	bhi.n	8000a94 <HAL_Delay+0x28>
  {
  }
}
 8000aa4:	bf00      	nop
 8000aa6:	bf00      	nop
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000008 	.word	0x20000008

08000ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000adc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ae0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ae6:	4a04      	ldr	r2, [pc, #16]	@ (8000af8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	60d3      	str	r3, [r2, #12]
}
 8000aec:	bf00      	nop
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b00:	4b04      	ldr	r3, [pc, #16]	@ (8000b14 <__NVIC_GetPriorityGrouping+0x18>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	0a1b      	lsrs	r3, r3, #8
 8000b06:	f003 0307 	and.w	r3, r3, #7
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	6039      	str	r1, [r7, #0]
 8000b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	db0a      	blt.n	8000b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	490c      	ldr	r1, [pc, #48]	@ (8000b64 <__NVIC_SetPriority+0x4c>)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	0112      	lsls	r2, r2, #4
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	440b      	add	r3, r1
 8000b3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b40:	e00a      	b.n	8000b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4908      	ldr	r1, [pc, #32]	@ (8000b68 <__NVIC_SetPriority+0x50>)
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	f003 030f 	and.w	r3, r3, #15
 8000b4e:	3b04      	subs	r3, #4
 8000b50:	0112      	lsls	r2, r2, #4
 8000b52:	b2d2      	uxtb	r2, r2
 8000b54:	440b      	add	r3, r1
 8000b56:	761a      	strb	r2, [r3, #24]
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000e100 	.word	0xe000e100
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b089      	sub	sp, #36	@ 0x24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	f1c3 0307 	rsb	r3, r3, #7
 8000b86:	2b04      	cmp	r3, #4
 8000b88:	bf28      	it	cs
 8000b8a:	2304      	movcs	r3, #4
 8000b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	3304      	adds	r3, #4
 8000b92:	2b06      	cmp	r3, #6
 8000b94:	d902      	bls.n	8000b9c <NVIC_EncodePriority+0x30>
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3b03      	subs	r3, #3
 8000b9a:	e000      	b.n	8000b9e <NVIC_EncodePriority+0x32>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43da      	mvns	r2, r3
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	401a      	ands	r2, r3
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbe:	43d9      	mvns	r1, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	4313      	orrs	r3, r2
         );
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3724      	adds	r7, #36	@ 0x24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
	...

08000bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000be4:	d301      	bcc.n	8000bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000be6:	2301      	movs	r3, #1
 8000be8:	e00f      	b.n	8000c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bea:	4a0a      	ldr	r2, [pc, #40]	@ (8000c14 <SysTick_Config+0x40>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bf2:	210f      	movs	r1, #15
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf8:	f7ff ff8e 	bl	8000b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bfc:	4b05      	ldr	r3, [pc, #20]	@ (8000c14 <SysTick_Config+0x40>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c02:	4b04      	ldr	r3, [pc, #16]	@ (8000c14 <SysTick_Config+0x40>)
 8000c04:	2207      	movs	r2, #7
 8000c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	e000e010 	.word	0xe000e010

08000c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff ff47 	bl	8000ab4 <__NVIC_SetPriorityGrouping>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b086      	sub	sp, #24
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	4603      	mov	r3, r0
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
 8000c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c40:	f7ff ff5c 	bl	8000afc <__NVIC_GetPriorityGrouping>
 8000c44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	68b9      	ldr	r1, [r7, #8]
 8000c4a:	6978      	ldr	r0, [r7, #20]
 8000c4c:	f7ff ff8e 	bl	8000b6c <NVIC_EncodePriority>
 8000c50:	4602      	mov	r2, r0
 8000c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c56:	4611      	mov	r1, r2
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ff5d 	bl	8000b18 <__NVIC_SetPriority>
}
 8000c5e:	bf00      	nop
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff ffb0 	bl	8000bd4 <SysTick_Config>
 8000c74:	4603      	mov	r3, r0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b087      	sub	sp, #28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c8e:	e17f      	b.n	8000f90 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	2101      	movs	r1, #1
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f000 8171 	beq.w	8000f8a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f003 0303 	and.w	r3, r3, #3
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d005      	beq.n	8000cc0 <HAL_GPIO_Init+0x40>
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 0303 	and.w	r3, r3, #3
 8000cbc:	2b02      	cmp	r3, #2
 8000cbe:	d130      	bne.n	8000d22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	2203      	movs	r2, #3
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	68da      	ldr	r2, [r3, #12]
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	4013      	ands	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	091b      	lsrs	r3, r3, #4
 8000d0c:	f003 0201 	and.w	r2, r3, #1
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f003 0303 	and.w	r3, r3, #3
 8000d2a:	2b03      	cmp	r3, #3
 8000d2c:	d118      	bne.n	8000d60 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000d34:	2201      	movs	r2, #1
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4013      	ands	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	08db      	lsrs	r3, r3, #3
 8000d4a:	f003 0201 	and.w	r2, r3, #1
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	2b03      	cmp	r3, #3
 8000d6a:	d017      	beq.n	8000d9c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	2203      	movs	r2, #3
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4013      	ands	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	689a      	ldr	r2, [r3, #8]
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 0303 	and.w	r3, r3, #3
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d123      	bne.n	8000df0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	08da      	lsrs	r2, r3, #3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3208      	adds	r2, #8
 8000db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	f003 0307 	and.w	r3, r3, #7
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	220f      	movs	r2, #15
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	691a      	ldr	r2, [r3, #16]
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	08da      	lsrs	r2, r3, #3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	3208      	adds	r2, #8
 8000dea:	6939      	ldr	r1, [r7, #16]
 8000dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0203 	and.w	r2, r3, #3
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f000 80ac 	beq.w	8000f8a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e32:	4b5f      	ldr	r3, [pc, #380]	@ (8000fb0 <HAL_GPIO_Init+0x330>)
 8000e34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e36:	4a5e      	ldr	r2, [pc, #376]	@ (8000fb0 <HAL_GPIO_Init+0x330>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e3e:	4b5c      	ldr	r3, [pc, #368]	@ (8000fb0 <HAL_GPIO_Init+0x330>)
 8000e40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e4a:	4a5a      	ldr	r2, [pc, #360]	@ (8000fb4 <HAL_GPIO_Init+0x334>)
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	089b      	lsrs	r3, r3, #2
 8000e50:	3302      	adds	r3, #2
 8000e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e56:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	f003 0303 	and.w	r3, r3, #3
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	220f      	movs	r2, #15
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e74:	d025      	beq.n	8000ec2 <HAL_GPIO_Init+0x242>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a4f      	ldr	r2, [pc, #316]	@ (8000fb8 <HAL_GPIO_Init+0x338>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d01f      	beq.n	8000ebe <HAL_GPIO_Init+0x23e>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a4e      	ldr	r2, [pc, #312]	@ (8000fbc <HAL_GPIO_Init+0x33c>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d019      	beq.n	8000eba <HAL_GPIO_Init+0x23a>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a4d      	ldr	r2, [pc, #308]	@ (8000fc0 <HAL_GPIO_Init+0x340>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d013      	beq.n	8000eb6 <HAL_GPIO_Init+0x236>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a4c      	ldr	r2, [pc, #304]	@ (8000fc4 <HAL_GPIO_Init+0x344>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d00d      	beq.n	8000eb2 <HAL_GPIO_Init+0x232>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a4b      	ldr	r2, [pc, #300]	@ (8000fc8 <HAL_GPIO_Init+0x348>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d007      	beq.n	8000eae <HAL_GPIO_Init+0x22e>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a4a      	ldr	r2, [pc, #296]	@ (8000fcc <HAL_GPIO_Init+0x34c>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d101      	bne.n	8000eaa <HAL_GPIO_Init+0x22a>
 8000ea6:	2306      	movs	r3, #6
 8000ea8:	e00c      	b.n	8000ec4 <HAL_GPIO_Init+0x244>
 8000eaa:	2307      	movs	r3, #7
 8000eac:	e00a      	b.n	8000ec4 <HAL_GPIO_Init+0x244>
 8000eae:	2305      	movs	r3, #5
 8000eb0:	e008      	b.n	8000ec4 <HAL_GPIO_Init+0x244>
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	e006      	b.n	8000ec4 <HAL_GPIO_Init+0x244>
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e004      	b.n	8000ec4 <HAL_GPIO_Init+0x244>
 8000eba:	2302      	movs	r3, #2
 8000ebc:	e002      	b.n	8000ec4 <HAL_GPIO_Init+0x244>
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e000      	b.n	8000ec4 <HAL_GPIO_Init+0x244>
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	697a      	ldr	r2, [r7, #20]
 8000ec6:	f002 0203 	and.w	r2, r2, #3
 8000eca:	0092      	lsls	r2, r2, #2
 8000ecc:	4093      	lsls	r3, r2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ed4:	4937      	ldr	r1, [pc, #220]	@ (8000fb4 <HAL_GPIO_Init+0x334>)
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	089b      	lsrs	r3, r3, #2
 8000eda:	3302      	adds	r3, #2
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ee2:	4b3b      	ldr	r3, [pc, #236]	@ (8000fd0 <HAL_GPIO_Init+0x350>)
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	43db      	mvns	r3, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f06:	4a32      	ldr	r2, [pc, #200]	@ (8000fd0 <HAL_GPIO_Init+0x350>)
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f0c:	4b30      	ldr	r3, [pc, #192]	@ (8000fd0 <HAL_GPIO_Init+0x350>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d003      	beq.n	8000f30 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f30:	4a27      	ldr	r2, [pc, #156]	@ (8000fd0 <HAL_GPIO_Init+0x350>)
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f36:	4b26      	ldr	r3, [pc, #152]	@ (8000fd0 <HAL_GPIO_Init+0x350>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f5a:	4a1d      	ldr	r2, [pc, #116]	@ (8000fd0 <HAL_GPIO_Init+0x350>)
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f60:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd0 <HAL_GPIO_Init+0x350>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f84:	4a12      	ldr	r2, [pc, #72]	@ (8000fd0 <HAL_GPIO_Init+0x350>)
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	fa22 f303 	lsr.w	r3, r2, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f47f ae78 	bne.w	8000c90 <HAL_GPIO_Init+0x10>
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	371c      	adds	r7, #28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40010000 	.word	0x40010000
 8000fb8:	48000400 	.word	0x48000400
 8000fbc:	48000800 	.word	0x48000800
 8000fc0:	48000c00 	.word	0x48000c00
 8000fc4:	48001000 	.word	0x48001000
 8000fc8:	48001400 	.word	0x48001400
 8000fcc:	48001800 	.word	0x48001800
 8000fd0:	40010400 	.word	0x40010400

08000fd4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000fd8:	4b04      	ldr	r3, [pc, #16]	@ (8000fec <HAL_PWREx_GetVoltageRange+0x18>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40007000 	.word	0x40007000

08000ff0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ffe:	d130      	bne.n	8001062 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001000:	4b23      	ldr	r3, [pc, #140]	@ (8001090 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001008:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800100c:	d038      	beq.n	8001080 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800100e:	4b20      	ldr	r3, [pc, #128]	@ (8001090 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001016:	4a1e      	ldr	r2, [pc, #120]	@ (8001090 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001018:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800101c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800101e:	4b1d      	ldr	r3, [pc, #116]	@ (8001094 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2232      	movs	r2, #50	@ 0x32
 8001024:	fb02 f303 	mul.w	r3, r2, r3
 8001028:	4a1b      	ldr	r2, [pc, #108]	@ (8001098 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800102a:	fba2 2303 	umull	r2, r3, r2, r3
 800102e:	0c9b      	lsrs	r3, r3, #18
 8001030:	3301      	adds	r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001034:	e002      	b.n	800103c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	3b01      	subs	r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800103c:	4b14      	ldr	r3, [pc, #80]	@ (8001090 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800103e:	695b      	ldr	r3, [r3, #20]
 8001040:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001044:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001048:	d102      	bne.n	8001050 <HAL_PWREx_ControlVoltageScaling+0x60>
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1f2      	bne.n	8001036 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001050:	4b0f      	ldr	r3, [pc, #60]	@ (8001090 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001052:	695b      	ldr	r3, [r3, #20]
 8001054:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001058:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800105c:	d110      	bne.n	8001080 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e00f      	b.n	8001082 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001062:	4b0b      	ldr	r3, [pc, #44]	@ (8001090 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800106a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800106e:	d007      	beq.n	8001080 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001070:	4b07      	ldr	r3, [pc, #28]	@ (8001090 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001078:	4a05      	ldr	r2, [pc, #20]	@ (8001090 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800107a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800107e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	40007000 	.word	0x40007000
 8001094:	20000000 	.word	0x20000000
 8001098:	431bde83 	.word	0x431bde83

0800109c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b088      	sub	sp, #32
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d101      	bne.n	80010ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e3ca      	b.n	8001844 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010ae:	4b97      	ldr	r3, [pc, #604]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	f003 030c 	and.w	r3, r3, #12
 80010b6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010b8:	4b94      	ldr	r3, [pc, #592]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0310 	and.w	r3, r3, #16
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f000 80e4 	beq.w	8001298 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d007      	beq.n	80010e6 <HAL_RCC_OscConfig+0x4a>
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	2b0c      	cmp	r3, #12
 80010da:	f040 808b 	bne.w	80011f4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	f040 8087 	bne.w	80011f4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010e6:	4b89      	ldr	r3, [pc, #548]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d005      	beq.n	80010fe <HAL_RCC_OscConfig+0x62>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e3a2      	b.n	8001844 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a1a      	ldr	r2, [r3, #32]
 8001102:	4b82      	ldr	r3, [pc, #520]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0308 	and.w	r3, r3, #8
 800110a:	2b00      	cmp	r3, #0
 800110c:	d004      	beq.n	8001118 <HAL_RCC_OscConfig+0x7c>
 800110e:	4b7f      	ldr	r3, [pc, #508]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001116:	e005      	b.n	8001124 <HAL_RCC_OscConfig+0x88>
 8001118:	4b7c      	ldr	r3, [pc, #496]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 800111a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800111e:	091b      	lsrs	r3, r3, #4
 8001120:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001124:	4293      	cmp	r3, r2
 8001126:	d223      	bcs.n	8001170 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	4618      	mov	r0, r3
 800112e:	f000 fd1d 	bl	8001b6c <RCC_SetFlashLatencyFromMSIRange>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e383      	b.n	8001844 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800113c:	4b73      	ldr	r3, [pc, #460]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a72      	ldr	r2, [pc, #456]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 8001142:	f043 0308 	orr.w	r3, r3, #8
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	4b70      	ldr	r3, [pc, #448]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	496d      	ldr	r1, [pc, #436]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 8001156:	4313      	orrs	r3, r2
 8001158:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800115a:	4b6c      	ldr	r3, [pc, #432]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	021b      	lsls	r3, r3, #8
 8001168:	4968      	ldr	r1, [pc, #416]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 800116a:	4313      	orrs	r3, r2
 800116c:	604b      	str	r3, [r1, #4]
 800116e:	e025      	b.n	80011bc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001170:	4b66      	ldr	r3, [pc, #408]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a65      	ldr	r2, [pc, #404]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 8001176:	f043 0308 	orr.w	r3, r3, #8
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	4b63      	ldr	r3, [pc, #396]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a1b      	ldr	r3, [r3, #32]
 8001188:	4960      	ldr	r1, [pc, #384]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 800118a:	4313      	orrs	r3, r2
 800118c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800118e:	4b5f      	ldr	r3, [pc, #380]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	021b      	lsls	r3, r3, #8
 800119c:	495b      	ldr	r1, [pc, #364]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 800119e:	4313      	orrs	r3, r2
 80011a0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d109      	bne.n	80011bc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a1b      	ldr	r3, [r3, #32]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 fcdd 	bl	8001b6c <RCC_SetFlashLatencyFromMSIRange>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e343      	b.n	8001844 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80011bc:	f000 fc4a 	bl	8001a54 <HAL_RCC_GetSysClockFreq>
 80011c0:	4602      	mov	r2, r0
 80011c2:	4b52      	ldr	r3, [pc, #328]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	091b      	lsrs	r3, r3, #4
 80011c8:	f003 030f 	and.w	r3, r3, #15
 80011cc:	4950      	ldr	r1, [pc, #320]	@ (8001310 <HAL_RCC_OscConfig+0x274>)
 80011ce:	5ccb      	ldrb	r3, [r1, r3]
 80011d0:	f003 031f 	and.w	r3, r3, #31
 80011d4:	fa22 f303 	lsr.w	r3, r2, r3
 80011d8:	4a4e      	ldr	r2, [pc, #312]	@ (8001314 <HAL_RCC_OscConfig+0x278>)
 80011da:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80011dc:	4b4e      	ldr	r3, [pc, #312]	@ (8001318 <HAL_RCC_OscConfig+0x27c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff fbe7 	bl	80009b4 <HAL_InitTick>
 80011e6:	4603      	mov	r3, r0
 80011e8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d052      	beq.n	8001296 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	e327      	b.n	8001844 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d032      	beq.n	8001262 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011fc:	4b43      	ldr	r3, [pc, #268]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a42      	ldr	r2, [pc, #264]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001208:	f7ff fc24 	bl	8000a54 <HAL_GetTick>
 800120c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001210:	f7ff fc20 	bl	8000a54 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b02      	cmp	r3, #2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e310      	b.n	8001844 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001222:	4b3a      	ldr	r3, [pc, #232]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0f0      	beq.n	8001210 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800122e:	4b37      	ldr	r3, [pc, #220]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a36      	ldr	r2, [pc, #216]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 8001234:	f043 0308 	orr.w	r3, r3, #8
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	4b34      	ldr	r3, [pc, #208]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a1b      	ldr	r3, [r3, #32]
 8001246:	4931      	ldr	r1, [pc, #196]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 8001248:	4313      	orrs	r3, r2
 800124a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800124c:	4b2f      	ldr	r3, [pc, #188]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69db      	ldr	r3, [r3, #28]
 8001258:	021b      	lsls	r3, r3, #8
 800125a:	492c      	ldr	r1, [pc, #176]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 800125c:	4313      	orrs	r3, r2
 800125e:	604b      	str	r3, [r1, #4]
 8001260:	e01a      	b.n	8001298 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001262:	4b2a      	ldr	r3, [pc, #168]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a29      	ldr	r2, [pc, #164]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 8001268:	f023 0301 	bic.w	r3, r3, #1
 800126c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800126e:	f7ff fbf1 	bl	8000a54 <HAL_GetTick>
 8001272:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001274:	e008      	b.n	8001288 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001276:	f7ff fbed 	bl	8000a54 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	2b02      	cmp	r3, #2
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e2dd      	b.n	8001844 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001288:	4b20      	ldr	r3, [pc, #128]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1f0      	bne.n	8001276 <HAL_RCC_OscConfig+0x1da>
 8001294:	e000      	b.n	8001298 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001296:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d074      	beq.n	800138e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	2b08      	cmp	r3, #8
 80012a8:	d005      	beq.n	80012b6 <HAL_RCC_OscConfig+0x21a>
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	2b0c      	cmp	r3, #12
 80012ae:	d10e      	bne.n	80012ce <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	2b03      	cmp	r3, #3
 80012b4:	d10b      	bne.n	80012ce <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b6:	4b15      	ldr	r3, [pc, #84]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d064      	beq.n	800138c <HAL_RCC_OscConfig+0x2f0>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d160      	bne.n	800138c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e2ba      	b.n	8001844 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012d6:	d106      	bne.n	80012e6 <HAL_RCC_OscConfig+0x24a>
 80012d8:	4b0c      	ldr	r3, [pc, #48]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a0b      	ldr	r2, [pc, #44]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 80012de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012e2:	6013      	str	r3, [r2, #0]
 80012e4:	e026      	b.n	8001334 <HAL_RCC_OscConfig+0x298>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012ee:	d115      	bne.n	800131c <HAL_RCC_OscConfig+0x280>
 80012f0:	4b06      	ldr	r3, [pc, #24]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a05      	ldr	r2, [pc, #20]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 80012f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	4b03      	ldr	r3, [pc, #12]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a02      	ldr	r2, [pc, #8]	@ (800130c <HAL_RCC_OscConfig+0x270>)
 8001302:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	e014      	b.n	8001334 <HAL_RCC_OscConfig+0x298>
 800130a:	bf00      	nop
 800130c:	40021000 	.word	0x40021000
 8001310:	08003c74 	.word	0x08003c74
 8001314:	20000000 	.word	0x20000000
 8001318:	20000004 	.word	0x20000004
 800131c:	4ba0      	ldr	r3, [pc, #640]	@ (80015a0 <HAL_RCC_OscConfig+0x504>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a9f      	ldr	r2, [pc, #636]	@ (80015a0 <HAL_RCC_OscConfig+0x504>)
 8001322:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	4b9d      	ldr	r3, [pc, #628]	@ (80015a0 <HAL_RCC_OscConfig+0x504>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a9c      	ldr	r2, [pc, #624]	@ (80015a0 <HAL_RCC_OscConfig+0x504>)
 800132e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001332:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d013      	beq.n	8001364 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133c:	f7ff fb8a 	bl	8000a54 <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001344:	f7ff fb86 	bl	8000a54 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b64      	cmp	r3, #100	@ 0x64
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e276      	b.n	8001844 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001356:	4b92      	ldr	r3, [pc, #584]	@ (80015a0 <HAL_RCC_OscConfig+0x504>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0f0      	beq.n	8001344 <HAL_RCC_OscConfig+0x2a8>
 8001362:	e014      	b.n	800138e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001364:	f7ff fb76 	bl	8000a54 <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800136c:	f7ff fb72 	bl	8000a54 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b64      	cmp	r3, #100	@ 0x64
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e262      	b.n	8001844 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800137e:	4b88      	ldr	r3, [pc, #544]	@ (80015a0 <HAL_RCC_OscConfig+0x504>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1f0      	bne.n	800136c <HAL_RCC_OscConfig+0x2d0>
 800138a:	e000      	b.n	800138e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800138c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d060      	beq.n	800145c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	2b04      	cmp	r3, #4
 800139e:	d005      	beq.n	80013ac <HAL_RCC_OscConfig+0x310>
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	2b0c      	cmp	r3, #12
 80013a4:	d119      	bne.n	80013da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d116      	bne.n	80013da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013ac:	4b7c      	ldr	r3, [pc, #496]	@ (80015a0 <HAL_RCC_OscConfig+0x504>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d005      	beq.n	80013c4 <HAL_RCC_OscConfig+0x328>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d101      	bne.n	80013c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e23f      	b.n	8001844 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c4:	4b76      	ldr	r3, [pc, #472]	@ (80015a0 <HAL_RCC_OscConfig+0x504>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	061b      	lsls	r3, r3, #24
 80013d2:	4973      	ldr	r1, [pc, #460]	@ (80015a0 <HAL_RCC_OscConfig+0x504>)
 80013d4:	4313      	orrs	r3, r2
 80013d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013d8:	e040      	b.n	800145c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d023      	beq.n	800142a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013e2:	4b6f      	ldr	r3, [pc, #444]	@ (80015a0 <HAL_RCC_OscConfig+0x504>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a6e      	ldr	r2, [pc, #440]	@ (80015a0 <HAL_RCC_OscConfig+0x504>)
 80013e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ee:	f7ff fb31 	bl	8000a54 <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013f6:	f7ff fb2d 	bl	8000a54 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e21d      	b.n	8001844 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001408:	4b65      	ldr	r3, [pc, #404]	@ (80015a0 <HAL_RCC_OscConfig+0x504>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0f0      	beq.n	80013f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001414:	4b62      	ldr	r3, [pc, #392]	@ (80015a0 <HAL_RCC_OscConfig+0x504>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	061b      	lsls	r3, r3, #24
 8001422:	495f      	ldr	r1, [pc, #380]	@ (80015a0 <HAL_RCC_OscConfig+0x504>)
 8001424:	4313      	orrs	r3, r2
 8001426:	604b      	str	r3, [r1, #4]
 8001428:	e018      	b.n	800145c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800142a:	4b5d      	ldr	r3, [pc, #372]	@ (80015a0 <HAL_RCC_OscConfig+0x504>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a5c      	ldr	r2, [pc, #368]	@ (80015a0 <HAL_RCC_OscConfig+0x504>)
 8001430:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001436:	f7ff fb0d 	bl	8000a54 <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800143e:	f7ff fb09 	bl	8000a54 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e1f9      	b.n	8001844 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001450:	4b53      	ldr	r3, [pc, #332]	@ (80015a0 <HAL_RCC_OscConfig+0x504>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1f0      	bne.n	800143e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	2b00      	cmp	r3, #0
 8001466:	d03c      	beq.n	80014e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d01c      	beq.n	80014aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001470:	4b4b      	ldr	r3, [pc, #300]	@ (80015a0 <HAL_RCC_OscConfig+0x504>)
 8001472:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001476:	4a4a      	ldr	r2, [pc, #296]	@ (80015a0 <HAL_RCC_OscConfig+0x504>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001480:	f7ff fae8 	bl	8000a54 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001488:	f7ff fae4 	bl	8000a54 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e1d4      	b.n	8001844 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800149a:	4b41      	ldr	r3, [pc, #260]	@ (80015a0 <HAL_RCC_OscConfig+0x504>)
 800149c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0ef      	beq.n	8001488 <HAL_RCC_OscConfig+0x3ec>
 80014a8:	e01b      	b.n	80014e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014aa:	4b3d      	ldr	r3, [pc, #244]	@ (80015a0 <HAL_RCC_OscConfig+0x504>)
 80014ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014b0:	4a3b      	ldr	r2, [pc, #236]	@ (80015a0 <HAL_RCC_OscConfig+0x504>)
 80014b2:	f023 0301 	bic.w	r3, r3, #1
 80014b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ba:	f7ff facb 	bl	8000a54 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014c2:	f7ff fac7 	bl	8000a54 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e1b7      	b.n	8001844 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014d4:	4b32      	ldr	r3, [pc, #200]	@ (80015a0 <HAL_RCC_OscConfig+0x504>)
 80014d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1ef      	bne.n	80014c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0304 	and.w	r3, r3, #4
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 80a6 	beq.w	800163c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014f0:	2300      	movs	r3, #0
 80014f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80014f4:	4b2a      	ldr	r3, [pc, #168]	@ (80015a0 <HAL_RCC_OscConfig+0x504>)
 80014f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d10d      	bne.n	800151c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001500:	4b27      	ldr	r3, [pc, #156]	@ (80015a0 <HAL_RCC_OscConfig+0x504>)
 8001502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001504:	4a26      	ldr	r2, [pc, #152]	@ (80015a0 <HAL_RCC_OscConfig+0x504>)
 8001506:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800150a:	6593      	str	r3, [r2, #88]	@ 0x58
 800150c:	4b24      	ldr	r3, [pc, #144]	@ (80015a0 <HAL_RCC_OscConfig+0x504>)
 800150e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001510:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001518:	2301      	movs	r3, #1
 800151a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800151c:	4b21      	ldr	r3, [pc, #132]	@ (80015a4 <HAL_RCC_OscConfig+0x508>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001524:	2b00      	cmp	r3, #0
 8001526:	d118      	bne.n	800155a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001528:	4b1e      	ldr	r3, [pc, #120]	@ (80015a4 <HAL_RCC_OscConfig+0x508>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a1d      	ldr	r2, [pc, #116]	@ (80015a4 <HAL_RCC_OscConfig+0x508>)
 800152e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001532:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001534:	f7ff fa8e 	bl	8000a54 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800153c:	f7ff fa8a 	bl	8000a54 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e17a      	b.n	8001844 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800154e:	4b15      	ldr	r3, [pc, #84]	@ (80015a4 <HAL_RCC_OscConfig+0x508>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f0      	beq.n	800153c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d108      	bne.n	8001574 <HAL_RCC_OscConfig+0x4d8>
 8001562:	4b0f      	ldr	r3, [pc, #60]	@ (80015a0 <HAL_RCC_OscConfig+0x504>)
 8001564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001568:	4a0d      	ldr	r2, [pc, #52]	@ (80015a0 <HAL_RCC_OscConfig+0x504>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001572:	e029      	b.n	80015c8 <HAL_RCC_OscConfig+0x52c>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b05      	cmp	r3, #5
 800157a:	d115      	bne.n	80015a8 <HAL_RCC_OscConfig+0x50c>
 800157c:	4b08      	ldr	r3, [pc, #32]	@ (80015a0 <HAL_RCC_OscConfig+0x504>)
 800157e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001582:	4a07      	ldr	r2, [pc, #28]	@ (80015a0 <HAL_RCC_OscConfig+0x504>)
 8001584:	f043 0304 	orr.w	r3, r3, #4
 8001588:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800158c:	4b04      	ldr	r3, [pc, #16]	@ (80015a0 <HAL_RCC_OscConfig+0x504>)
 800158e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001592:	4a03      	ldr	r2, [pc, #12]	@ (80015a0 <HAL_RCC_OscConfig+0x504>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800159c:	e014      	b.n	80015c8 <HAL_RCC_OscConfig+0x52c>
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40007000 	.word	0x40007000
 80015a8:	4b9c      	ldr	r3, [pc, #624]	@ (800181c <HAL_RCC_OscConfig+0x780>)
 80015aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015ae:	4a9b      	ldr	r2, [pc, #620]	@ (800181c <HAL_RCC_OscConfig+0x780>)
 80015b0:	f023 0301 	bic.w	r3, r3, #1
 80015b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015b8:	4b98      	ldr	r3, [pc, #608]	@ (800181c <HAL_RCC_OscConfig+0x780>)
 80015ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015be:	4a97      	ldr	r2, [pc, #604]	@ (800181c <HAL_RCC_OscConfig+0x780>)
 80015c0:	f023 0304 	bic.w	r3, r3, #4
 80015c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d016      	beq.n	80015fe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d0:	f7ff fa40 	bl	8000a54 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015d6:	e00a      	b.n	80015ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015d8:	f7ff fa3c 	bl	8000a54 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e12a      	b.n	8001844 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015ee:	4b8b      	ldr	r3, [pc, #556]	@ (800181c <HAL_RCC_OscConfig+0x780>)
 80015f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0ed      	beq.n	80015d8 <HAL_RCC_OscConfig+0x53c>
 80015fc:	e015      	b.n	800162a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015fe:	f7ff fa29 	bl	8000a54 <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001604:	e00a      	b.n	800161c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001606:	f7ff fa25 	bl	8000a54 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001614:	4293      	cmp	r3, r2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e113      	b.n	8001844 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800161c:	4b7f      	ldr	r3, [pc, #508]	@ (800181c <HAL_RCC_OscConfig+0x780>)
 800161e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1ed      	bne.n	8001606 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800162a:	7ffb      	ldrb	r3, [r7, #31]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d105      	bne.n	800163c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001630:	4b7a      	ldr	r3, [pc, #488]	@ (800181c <HAL_RCC_OscConfig+0x780>)
 8001632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001634:	4a79      	ldr	r2, [pc, #484]	@ (800181c <HAL_RCC_OscConfig+0x780>)
 8001636:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800163a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 80fe 	beq.w	8001842 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800164a:	2b02      	cmp	r3, #2
 800164c:	f040 80d0 	bne.w	80017f0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001650:	4b72      	ldr	r3, [pc, #456]	@ (800181c <HAL_RCC_OscConfig+0x780>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	f003 0203 	and.w	r2, r3, #3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001660:	429a      	cmp	r2, r3
 8001662:	d130      	bne.n	80016c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	3b01      	subs	r3, #1
 8001670:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001672:	429a      	cmp	r2, r3
 8001674:	d127      	bne.n	80016c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001680:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001682:	429a      	cmp	r2, r3
 8001684:	d11f      	bne.n	80016c6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001690:	2a07      	cmp	r2, #7
 8001692:	bf14      	ite	ne
 8001694:	2201      	movne	r2, #1
 8001696:	2200      	moveq	r2, #0
 8001698:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800169a:	4293      	cmp	r3, r2
 800169c:	d113      	bne.n	80016c6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016a8:	085b      	lsrs	r3, r3, #1
 80016aa:	3b01      	subs	r3, #1
 80016ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d109      	bne.n	80016c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016bc:	085b      	lsrs	r3, r3, #1
 80016be:	3b01      	subs	r3, #1
 80016c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d06e      	beq.n	80017a4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	2b0c      	cmp	r3, #12
 80016ca:	d069      	beq.n	80017a0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80016cc:	4b53      	ldr	r3, [pc, #332]	@ (800181c <HAL_RCC_OscConfig+0x780>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d105      	bne.n	80016e4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80016d8:	4b50      	ldr	r3, [pc, #320]	@ (800181c <HAL_RCC_OscConfig+0x780>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e0ad      	b.n	8001844 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80016e8:	4b4c      	ldr	r3, [pc, #304]	@ (800181c <HAL_RCC_OscConfig+0x780>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a4b      	ldr	r2, [pc, #300]	@ (800181c <HAL_RCC_OscConfig+0x780>)
 80016ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016f2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016f4:	f7ff f9ae 	bl	8000a54 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016fc:	f7ff f9aa 	bl	8000a54 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e09a      	b.n	8001844 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800170e:	4b43      	ldr	r3, [pc, #268]	@ (800181c <HAL_RCC_OscConfig+0x780>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800171a:	4b40      	ldr	r3, [pc, #256]	@ (800181c <HAL_RCC_OscConfig+0x780>)
 800171c:	68da      	ldr	r2, [r3, #12]
 800171e:	4b40      	ldr	r3, [pc, #256]	@ (8001820 <HAL_RCC_OscConfig+0x784>)
 8001720:	4013      	ands	r3, r2
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800172a:	3a01      	subs	r2, #1
 800172c:	0112      	lsls	r2, r2, #4
 800172e:	4311      	orrs	r1, r2
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001734:	0212      	lsls	r2, r2, #8
 8001736:	4311      	orrs	r1, r2
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800173c:	0852      	lsrs	r2, r2, #1
 800173e:	3a01      	subs	r2, #1
 8001740:	0552      	lsls	r2, r2, #21
 8001742:	4311      	orrs	r1, r2
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001748:	0852      	lsrs	r2, r2, #1
 800174a:	3a01      	subs	r2, #1
 800174c:	0652      	lsls	r2, r2, #25
 800174e:	4311      	orrs	r1, r2
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001754:	0912      	lsrs	r2, r2, #4
 8001756:	0452      	lsls	r2, r2, #17
 8001758:	430a      	orrs	r2, r1
 800175a:	4930      	ldr	r1, [pc, #192]	@ (800181c <HAL_RCC_OscConfig+0x780>)
 800175c:	4313      	orrs	r3, r2
 800175e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001760:	4b2e      	ldr	r3, [pc, #184]	@ (800181c <HAL_RCC_OscConfig+0x780>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a2d      	ldr	r2, [pc, #180]	@ (800181c <HAL_RCC_OscConfig+0x780>)
 8001766:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800176a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800176c:	4b2b      	ldr	r3, [pc, #172]	@ (800181c <HAL_RCC_OscConfig+0x780>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	4a2a      	ldr	r2, [pc, #168]	@ (800181c <HAL_RCC_OscConfig+0x780>)
 8001772:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001776:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001778:	f7ff f96c 	bl	8000a54 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001780:	f7ff f968 	bl	8000a54 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e058      	b.n	8001844 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001792:	4b22      	ldr	r3, [pc, #136]	@ (800181c <HAL_RCC_OscConfig+0x780>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0f0      	beq.n	8001780 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800179e:	e050      	b.n	8001842 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e04f      	b.n	8001844 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017a4:	4b1d      	ldr	r3, [pc, #116]	@ (800181c <HAL_RCC_OscConfig+0x780>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d148      	bne.n	8001842 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80017b0:	4b1a      	ldr	r3, [pc, #104]	@ (800181c <HAL_RCC_OscConfig+0x780>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a19      	ldr	r2, [pc, #100]	@ (800181c <HAL_RCC_OscConfig+0x780>)
 80017b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017bc:	4b17      	ldr	r3, [pc, #92]	@ (800181c <HAL_RCC_OscConfig+0x780>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	4a16      	ldr	r2, [pc, #88]	@ (800181c <HAL_RCC_OscConfig+0x780>)
 80017c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017c8:	f7ff f944 	bl	8000a54 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d0:	f7ff f940 	bl	8000a54 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e030      	b.n	8001844 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017e2:	4b0e      	ldr	r3, [pc, #56]	@ (800181c <HAL_RCC_OscConfig+0x780>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f0      	beq.n	80017d0 <HAL_RCC_OscConfig+0x734>
 80017ee:	e028      	b.n	8001842 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	2b0c      	cmp	r3, #12
 80017f4:	d023      	beq.n	800183e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f6:	4b09      	ldr	r3, [pc, #36]	@ (800181c <HAL_RCC_OscConfig+0x780>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a08      	ldr	r2, [pc, #32]	@ (800181c <HAL_RCC_OscConfig+0x780>)
 80017fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001800:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001802:	f7ff f927 	bl	8000a54 <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001808:	e00c      	b.n	8001824 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800180a:	f7ff f923 	bl	8000a54 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d905      	bls.n	8001824 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e013      	b.n	8001844 <HAL_RCC_OscConfig+0x7a8>
 800181c:	40021000 	.word	0x40021000
 8001820:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001824:	4b09      	ldr	r3, [pc, #36]	@ (800184c <HAL_RCC_OscConfig+0x7b0>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1ec      	bne.n	800180a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001830:	4b06      	ldr	r3, [pc, #24]	@ (800184c <HAL_RCC_OscConfig+0x7b0>)
 8001832:	68da      	ldr	r2, [r3, #12]
 8001834:	4905      	ldr	r1, [pc, #20]	@ (800184c <HAL_RCC_OscConfig+0x7b0>)
 8001836:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <HAL_RCC_OscConfig+0x7b4>)
 8001838:	4013      	ands	r3, r2
 800183a:	60cb      	str	r3, [r1, #12]
 800183c:	e001      	b.n	8001842 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3720      	adds	r7, #32
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40021000 	.word	0x40021000
 8001850:	feeefffc 	.word	0xfeeefffc

08001854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e0e7      	b.n	8001a38 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001868:	4b75      	ldr	r3, [pc, #468]	@ (8001a40 <HAL_RCC_ClockConfig+0x1ec>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	d910      	bls.n	8001898 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001876:	4b72      	ldr	r3, [pc, #456]	@ (8001a40 <HAL_RCC_ClockConfig+0x1ec>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f023 0207 	bic.w	r2, r3, #7
 800187e:	4970      	ldr	r1, [pc, #448]	@ (8001a40 <HAL_RCC_ClockConfig+0x1ec>)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001886:	4b6e      	ldr	r3, [pc, #440]	@ (8001a40 <HAL_RCC_ClockConfig+0x1ec>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d001      	beq.n	8001898 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e0cf      	b.n	8001a38 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d010      	beq.n	80018c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	4b66      	ldr	r3, [pc, #408]	@ (8001a44 <HAL_RCC_ClockConfig+0x1f0>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d908      	bls.n	80018c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018b4:	4b63      	ldr	r3, [pc, #396]	@ (8001a44 <HAL_RCC_ClockConfig+0x1f0>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	4960      	ldr	r1, [pc, #384]	@ (8001a44 <HAL_RCC_ClockConfig+0x1f0>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d04c      	beq.n	800196c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b03      	cmp	r3, #3
 80018d8:	d107      	bne.n	80018ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018da:	4b5a      	ldr	r3, [pc, #360]	@ (8001a44 <HAL_RCC_ClockConfig+0x1f0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d121      	bne.n	800192a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e0a6      	b.n	8001a38 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d107      	bne.n	8001902 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018f2:	4b54      	ldr	r3, [pc, #336]	@ (8001a44 <HAL_RCC_ClockConfig+0x1f0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d115      	bne.n	800192a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e09a      	b.n	8001a38 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d107      	bne.n	800191a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800190a:	4b4e      	ldr	r3, [pc, #312]	@ (8001a44 <HAL_RCC_ClockConfig+0x1f0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d109      	bne.n	800192a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e08e      	b.n	8001a38 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800191a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a44 <HAL_RCC_ClockConfig+0x1f0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e086      	b.n	8001a38 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800192a:	4b46      	ldr	r3, [pc, #280]	@ (8001a44 <HAL_RCC_ClockConfig+0x1f0>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f023 0203 	bic.w	r2, r3, #3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	4943      	ldr	r1, [pc, #268]	@ (8001a44 <HAL_RCC_ClockConfig+0x1f0>)
 8001938:	4313      	orrs	r3, r2
 800193a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800193c:	f7ff f88a 	bl	8000a54 <HAL_GetTick>
 8001940:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001942:	e00a      	b.n	800195a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001944:	f7ff f886 	bl	8000a54 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001952:	4293      	cmp	r3, r2
 8001954:	d901      	bls.n	800195a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e06e      	b.n	8001a38 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195a:	4b3a      	ldr	r3, [pc, #232]	@ (8001a44 <HAL_RCC_ClockConfig+0x1f0>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 020c 	and.w	r2, r3, #12
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	429a      	cmp	r2, r3
 800196a:	d1eb      	bne.n	8001944 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d010      	beq.n	800199a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	4b31      	ldr	r3, [pc, #196]	@ (8001a44 <HAL_RCC_ClockConfig+0x1f0>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001984:	429a      	cmp	r2, r3
 8001986:	d208      	bcs.n	800199a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001988:	4b2e      	ldr	r3, [pc, #184]	@ (8001a44 <HAL_RCC_ClockConfig+0x1f0>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	492b      	ldr	r1, [pc, #172]	@ (8001a44 <HAL_RCC_ClockConfig+0x1f0>)
 8001996:	4313      	orrs	r3, r2
 8001998:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800199a:	4b29      	ldr	r3, [pc, #164]	@ (8001a40 <HAL_RCC_ClockConfig+0x1ec>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d210      	bcs.n	80019ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a8:	4b25      	ldr	r3, [pc, #148]	@ (8001a40 <HAL_RCC_ClockConfig+0x1ec>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f023 0207 	bic.w	r2, r3, #7
 80019b0:	4923      	ldr	r1, [pc, #140]	@ (8001a40 <HAL_RCC_ClockConfig+0x1ec>)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b8:	4b21      	ldr	r3, [pc, #132]	@ (8001a40 <HAL_RCC_ClockConfig+0x1ec>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d001      	beq.n	80019ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e036      	b.n	8001a38 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d008      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a44 <HAL_RCC_ClockConfig+0x1f0>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	4918      	ldr	r1, [pc, #96]	@ (8001a44 <HAL_RCC_ClockConfig+0x1f0>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0308 	and.w	r3, r3, #8
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d009      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019f4:	4b13      	ldr	r3, [pc, #76]	@ (8001a44 <HAL_RCC_ClockConfig+0x1f0>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	4910      	ldr	r1, [pc, #64]	@ (8001a44 <HAL_RCC_ClockConfig+0x1f0>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a08:	f000 f824 	bl	8001a54 <HAL_RCC_GetSysClockFreq>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a44 <HAL_RCC_ClockConfig+0x1f0>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	091b      	lsrs	r3, r3, #4
 8001a14:	f003 030f 	and.w	r3, r3, #15
 8001a18:	490b      	ldr	r1, [pc, #44]	@ (8001a48 <HAL_RCC_ClockConfig+0x1f4>)
 8001a1a:	5ccb      	ldrb	r3, [r1, r3]
 8001a1c:	f003 031f 	and.w	r3, r3, #31
 8001a20:	fa22 f303 	lsr.w	r3, r2, r3
 8001a24:	4a09      	ldr	r2, [pc, #36]	@ (8001a4c <HAL_RCC_ClockConfig+0x1f8>)
 8001a26:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a28:	4b09      	ldr	r3, [pc, #36]	@ (8001a50 <HAL_RCC_ClockConfig+0x1fc>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe ffc1 	bl	80009b4 <HAL_InitTick>
 8001a32:	4603      	mov	r3, r0
 8001a34:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a36:	7afb      	ldrb	r3, [r7, #11]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40022000 	.word	0x40022000
 8001a44:	40021000 	.word	0x40021000
 8001a48:	08003c74 	.word	0x08003c74
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	20000004 	.word	0x20000004

08001a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b089      	sub	sp, #36	@ 0x24
 8001a58:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a62:	4b3e      	ldr	r3, [pc, #248]	@ (8001b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a6c:	4b3b      	ldr	r3, [pc, #236]	@ (8001b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <HAL_RCC_GetSysClockFreq+0x34>
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	2b0c      	cmp	r3, #12
 8001a80:	d121      	bne.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d11e      	bne.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a88:	4b34      	ldr	r3, [pc, #208]	@ (8001b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d107      	bne.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a94:	4b31      	ldr	r3, [pc, #196]	@ (8001b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a9a:	0a1b      	lsrs	r3, r3, #8
 8001a9c:	f003 030f 	and.w	r3, r3, #15
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	e005      	b.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001aa4:	4b2d      	ldr	r3, [pc, #180]	@ (8001b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	091b      	lsrs	r3, r3, #4
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ab0:	4a2b      	ldr	r2, [pc, #172]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d10d      	bne.n	8001adc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ac4:	e00a      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	2b04      	cmp	r3, #4
 8001aca:	d102      	bne.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001acc:	4b25      	ldr	r3, [pc, #148]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ace:	61bb      	str	r3, [r7, #24]
 8001ad0:	e004      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d101      	bne.n	8001adc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ad8:	4b23      	ldr	r3, [pc, #140]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ada:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	2b0c      	cmp	r3, #12
 8001ae0:	d134      	bne.n	8001b4c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d003      	beq.n	8001afa <HAL_RCC_GetSysClockFreq+0xa6>
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	2b03      	cmp	r3, #3
 8001af6:	d003      	beq.n	8001b00 <HAL_RCC_GetSysClockFreq+0xac>
 8001af8:	e005      	b.n	8001b06 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001afa:	4b1a      	ldr	r3, [pc, #104]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0x110>)
 8001afc:	617b      	str	r3, [r7, #20]
      break;
 8001afe:	e005      	b.n	8001b0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b00:	4b19      	ldr	r3, [pc, #100]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b02:	617b      	str	r3, [r7, #20]
      break;
 8001b04:	e002      	b.n	8001b0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	617b      	str	r3, [r7, #20]
      break;
 8001b0a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b0c:	4b13      	ldr	r3, [pc, #76]	@ (8001b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	091b      	lsrs	r3, r3, #4
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	3301      	adds	r3, #1
 8001b18:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b1a:	4b10      	ldr	r3, [pc, #64]	@ (8001b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	0a1b      	lsrs	r3, r3, #8
 8001b20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	fb03 f202 	mul.w	r2, r3, r2
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b30:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b32:	4b0a      	ldr	r3, [pc, #40]	@ (8001b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	0e5b      	lsrs	r3, r3, #25
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b4c:	69bb      	ldr	r3, [r7, #24]
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3724      	adds	r7, #36	@ 0x24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	08003c84 	.word	0x08003c84
 8001b64:	00f42400 	.word	0x00f42400
 8001b68:	007a1200 	.word	0x007a1200

08001b6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b74:	2300      	movs	r3, #0
 8001b76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b78:	4b2a      	ldr	r3, [pc, #168]	@ (8001c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b84:	f7ff fa26 	bl	8000fd4 <HAL_PWREx_GetVoltageRange>
 8001b88:	6178      	str	r0, [r7, #20]
 8001b8a:	e014      	b.n	8001bb6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b8c:	4b25      	ldr	r3, [pc, #148]	@ (8001c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b90:	4a24      	ldr	r2, [pc, #144]	@ (8001c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b96:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b98:	4b22      	ldr	r3, [pc, #136]	@ (8001c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ba4:	f7ff fa16 	bl	8000fd4 <HAL_PWREx_GetVoltageRange>
 8001ba8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001baa:	4b1e      	ldr	r3, [pc, #120]	@ (8001c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bae:	4a1d      	ldr	r2, [pc, #116]	@ (8001c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bb4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bbc:	d10b      	bne.n	8001bd6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b80      	cmp	r3, #128	@ 0x80
 8001bc2:	d919      	bls.n	8001bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2ba0      	cmp	r3, #160	@ 0xa0
 8001bc8:	d902      	bls.n	8001bd0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bca:	2302      	movs	r3, #2
 8001bcc:	613b      	str	r3, [r7, #16]
 8001bce:	e013      	b.n	8001bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	e010      	b.n	8001bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b80      	cmp	r3, #128	@ 0x80
 8001bda:	d902      	bls.n	8001be2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001bdc:	2303      	movs	r3, #3
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	e00a      	b.n	8001bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b80      	cmp	r3, #128	@ 0x80
 8001be6:	d102      	bne.n	8001bee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001be8:	2302      	movs	r3, #2
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	e004      	b.n	8001bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b70      	cmp	r3, #112	@ 0x70
 8001bf2:	d101      	bne.n	8001bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f023 0207 	bic.w	r2, r3, #7
 8001c00:	4909      	ldr	r1, [pc, #36]	@ (8001c28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c08:	4b07      	ldr	r3, [pc, #28]	@ (8001c28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d001      	beq.n	8001c1a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40022000 	.word	0x40022000

08001c2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e049      	b.n	8001cd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d106      	bne.n	8001c58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7fe fd1e 	bl	8000694 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3304      	adds	r3, #4
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	f000 fb7a 	bl	8002364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e049      	b.n	8001d80 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d106      	bne.n	8001d06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f841 	bl	8001d88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2202      	movs	r2, #2
 8001d0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	3304      	adds	r3, #4
 8001d16:	4619      	mov	r1, r3
 8001d18:	4610      	mov	r0, r2
 8001d1a:	f000 fb23 	bl	8002364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d109      	bne.n	8001dc0 <HAL_TIM_PWM_Start+0x24>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	bf14      	ite	ne
 8001db8:	2301      	movne	r3, #1
 8001dba:	2300      	moveq	r3, #0
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	e03c      	b.n	8001e3a <HAL_TIM_PWM_Start+0x9e>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d109      	bne.n	8001dda <HAL_TIM_PWM_Start+0x3e>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	bf14      	ite	ne
 8001dd2:	2301      	movne	r3, #1
 8001dd4:	2300      	moveq	r3, #0
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	e02f      	b.n	8001e3a <HAL_TIM_PWM_Start+0x9e>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	d109      	bne.n	8001df4 <HAL_TIM_PWM_Start+0x58>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	bf14      	ite	ne
 8001dec:	2301      	movne	r3, #1
 8001dee:	2300      	moveq	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	e022      	b.n	8001e3a <HAL_TIM_PWM_Start+0x9e>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	2b0c      	cmp	r3, #12
 8001df8:	d109      	bne.n	8001e0e <HAL_TIM_PWM_Start+0x72>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	bf14      	ite	ne
 8001e06:	2301      	movne	r3, #1
 8001e08:	2300      	moveq	r3, #0
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	e015      	b.n	8001e3a <HAL_TIM_PWM_Start+0x9e>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	2b10      	cmp	r3, #16
 8001e12:	d109      	bne.n	8001e28 <HAL_TIM_PWM_Start+0x8c>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	bf14      	ite	ne
 8001e20:	2301      	movne	r3, #1
 8001e22:	2300      	moveq	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	e008      	b.n	8001e3a <HAL_TIM_PWM_Start+0x9e>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	bf14      	ite	ne
 8001e34:	2301      	movne	r3, #1
 8001e36:	2300      	moveq	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e09c      	b.n	8001f7c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d104      	bne.n	8001e52 <HAL_TIM_PWM_Start+0xb6>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e50:	e023      	b.n	8001e9a <HAL_TIM_PWM_Start+0xfe>
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d104      	bne.n	8001e62 <HAL_TIM_PWM_Start+0xc6>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e60:	e01b      	b.n	8001e9a <HAL_TIM_PWM_Start+0xfe>
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	2b08      	cmp	r3, #8
 8001e66:	d104      	bne.n	8001e72 <HAL_TIM_PWM_Start+0xd6>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e70:	e013      	b.n	8001e9a <HAL_TIM_PWM_Start+0xfe>
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	2b0c      	cmp	r3, #12
 8001e76:	d104      	bne.n	8001e82 <HAL_TIM_PWM_Start+0xe6>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001e80:	e00b      	b.n	8001e9a <HAL_TIM_PWM_Start+0xfe>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	2b10      	cmp	r3, #16
 8001e86:	d104      	bne.n	8001e92 <HAL_TIM_PWM_Start+0xf6>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e90:	e003      	b.n	8001e9a <HAL_TIM_PWM_Start+0xfe>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2202      	movs	r2, #2
 8001e96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	6839      	ldr	r1, [r7, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f000 fe68 	bl	8002b78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a35      	ldr	r2, [pc, #212]	@ (8001f84 <HAL_TIM_PWM_Start+0x1e8>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d013      	beq.n	8001eda <HAL_TIM_PWM_Start+0x13e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a34      	ldr	r2, [pc, #208]	@ (8001f88 <HAL_TIM_PWM_Start+0x1ec>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d00e      	beq.n	8001eda <HAL_TIM_PWM_Start+0x13e>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a32      	ldr	r2, [pc, #200]	@ (8001f8c <HAL_TIM_PWM_Start+0x1f0>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d009      	beq.n	8001eda <HAL_TIM_PWM_Start+0x13e>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a31      	ldr	r2, [pc, #196]	@ (8001f90 <HAL_TIM_PWM_Start+0x1f4>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d004      	beq.n	8001eda <HAL_TIM_PWM_Start+0x13e>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a2f      	ldr	r2, [pc, #188]	@ (8001f94 <HAL_TIM_PWM_Start+0x1f8>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d101      	bne.n	8001ede <HAL_TIM_PWM_Start+0x142>
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <HAL_TIM_PWM_Start+0x144>
 8001ede:	2300      	movs	r3, #0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d007      	beq.n	8001ef4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ef2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a22      	ldr	r2, [pc, #136]	@ (8001f84 <HAL_TIM_PWM_Start+0x1e8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d01d      	beq.n	8001f3a <HAL_TIM_PWM_Start+0x19e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f06:	d018      	beq.n	8001f3a <HAL_TIM_PWM_Start+0x19e>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a22      	ldr	r2, [pc, #136]	@ (8001f98 <HAL_TIM_PWM_Start+0x1fc>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d013      	beq.n	8001f3a <HAL_TIM_PWM_Start+0x19e>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a21      	ldr	r2, [pc, #132]	@ (8001f9c <HAL_TIM_PWM_Start+0x200>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d00e      	beq.n	8001f3a <HAL_TIM_PWM_Start+0x19e>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a1f      	ldr	r2, [pc, #124]	@ (8001fa0 <HAL_TIM_PWM_Start+0x204>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d009      	beq.n	8001f3a <HAL_TIM_PWM_Start+0x19e>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a17      	ldr	r2, [pc, #92]	@ (8001f88 <HAL_TIM_PWM_Start+0x1ec>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d004      	beq.n	8001f3a <HAL_TIM_PWM_Start+0x19e>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a15      	ldr	r2, [pc, #84]	@ (8001f8c <HAL_TIM_PWM_Start+0x1f0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d115      	bne.n	8001f66 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	4b18      	ldr	r3, [pc, #96]	@ (8001fa4 <HAL_TIM_PWM_Start+0x208>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2b06      	cmp	r3, #6
 8001f4a:	d015      	beq.n	8001f78 <HAL_TIM_PWM_Start+0x1dc>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f52:	d011      	beq.n	8001f78 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 0201 	orr.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f64:	e008      	b.n	8001f78 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f042 0201 	orr.w	r2, r2, #1
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	e000      	b.n	8001f7a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f78:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40012c00 	.word	0x40012c00
 8001f88:	40013400 	.word	0x40013400
 8001f8c:	40014000 	.word	0x40014000
 8001f90:	40014400 	.word	0x40014400
 8001f94:	40014800 	.word	0x40014800
 8001f98:	40000400 	.word	0x40000400
 8001f9c:	40000800 	.word	0x40000800
 8001fa0:	40000c00 	.word	0x40000c00
 8001fa4:	00010007 	.word	0x00010007

08001fa8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d101      	bne.n	8001fc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e0ff      	b.n	80021c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b14      	cmp	r3, #20
 8001fd2:	f200 80f0 	bhi.w	80021b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8001fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8001fdc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fdc:	08002031 	.word	0x08002031
 8001fe0:	080021b7 	.word	0x080021b7
 8001fe4:	080021b7 	.word	0x080021b7
 8001fe8:	080021b7 	.word	0x080021b7
 8001fec:	08002071 	.word	0x08002071
 8001ff0:	080021b7 	.word	0x080021b7
 8001ff4:	080021b7 	.word	0x080021b7
 8001ff8:	080021b7 	.word	0x080021b7
 8001ffc:	080020b3 	.word	0x080020b3
 8002000:	080021b7 	.word	0x080021b7
 8002004:	080021b7 	.word	0x080021b7
 8002008:	080021b7 	.word	0x080021b7
 800200c:	080020f3 	.word	0x080020f3
 8002010:	080021b7 	.word	0x080021b7
 8002014:	080021b7 	.word	0x080021b7
 8002018:	080021b7 	.word	0x080021b7
 800201c:	08002135 	.word	0x08002135
 8002020:	080021b7 	.word	0x080021b7
 8002024:	080021b7 	.word	0x080021b7
 8002028:	080021b7 	.word	0x080021b7
 800202c:	08002175 	.word	0x08002175
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	4618      	mov	r0, r3
 8002038:	f000 fa2e 	bl	8002498 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	699a      	ldr	r2, [r3, #24]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 0208 	orr.w	r2, r2, #8
 800204a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	699a      	ldr	r2, [r3, #24]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0204 	bic.w	r2, r2, #4
 800205a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6999      	ldr	r1, [r3, #24]
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	691a      	ldr	r2, [r3, #16]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	619a      	str	r2, [r3, #24]
      break;
 800206e:	e0a5      	b.n	80021bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68b9      	ldr	r1, [r7, #8]
 8002076:	4618      	mov	r0, r3
 8002078:	f000 fa9e 	bl	80025b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	699a      	ldr	r2, [r3, #24]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800208a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	699a      	ldr	r2, [r3, #24]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800209a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6999      	ldr	r1, [r3, #24]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	021a      	lsls	r2, r3, #8
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	619a      	str	r2, [r3, #24]
      break;
 80020b0:	e084      	b.n	80021bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68b9      	ldr	r1, [r7, #8]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f000 fb07 	bl	80026cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	69da      	ldr	r2, [r3, #28]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f042 0208 	orr.w	r2, r2, #8
 80020cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	69da      	ldr	r2, [r3, #28]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0204 	bic.w	r2, r2, #4
 80020dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	69d9      	ldr	r1, [r3, #28]
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	61da      	str	r2, [r3, #28]
      break;
 80020f0:	e064      	b.n	80021bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68b9      	ldr	r1, [r7, #8]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f000 fb6f 	bl	80027dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	69da      	ldr	r2, [r3, #28]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800210c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	69da      	ldr	r2, [r3, #28]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800211c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	69d9      	ldr	r1, [r3, #28]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	021a      	lsls	r2, r3, #8
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	61da      	str	r2, [r3, #28]
      break;
 8002132:	e043      	b.n	80021bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68b9      	ldr	r1, [r7, #8]
 800213a:	4618      	mov	r0, r3
 800213c:	f000 fbb8 	bl	80028b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0208 	orr.w	r2, r2, #8
 800214e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0204 	bic.w	r2, r2, #4
 800215e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	691a      	ldr	r2, [r3, #16]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002172:	e023      	b.n	80021bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	4618      	mov	r0, r3
 800217c:	f000 fbfc 	bl	8002978 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800218e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800219e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	021a      	lsls	r2, r3, #8
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80021b4:	e002      	b.n	80021bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	75fb      	strb	r3, [r7, #23]
      break;
 80021ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80021c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop

080021d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <HAL_TIM_ConfigClockSource+0x1c>
 80021e8:	2302      	movs	r3, #2
 80021ea:	e0b6      	b.n	800235a <HAL_TIM_ConfigClockSource+0x18a>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2202      	movs	r2, #2
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800220a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800220e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002216:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002228:	d03e      	beq.n	80022a8 <HAL_TIM_ConfigClockSource+0xd8>
 800222a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800222e:	f200 8087 	bhi.w	8002340 <HAL_TIM_ConfigClockSource+0x170>
 8002232:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002236:	f000 8086 	beq.w	8002346 <HAL_TIM_ConfigClockSource+0x176>
 800223a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800223e:	d87f      	bhi.n	8002340 <HAL_TIM_ConfigClockSource+0x170>
 8002240:	2b70      	cmp	r3, #112	@ 0x70
 8002242:	d01a      	beq.n	800227a <HAL_TIM_ConfigClockSource+0xaa>
 8002244:	2b70      	cmp	r3, #112	@ 0x70
 8002246:	d87b      	bhi.n	8002340 <HAL_TIM_ConfigClockSource+0x170>
 8002248:	2b60      	cmp	r3, #96	@ 0x60
 800224a:	d050      	beq.n	80022ee <HAL_TIM_ConfigClockSource+0x11e>
 800224c:	2b60      	cmp	r3, #96	@ 0x60
 800224e:	d877      	bhi.n	8002340 <HAL_TIM_ConfigClockSource+0x170>
 8002250:	2b50      	cmp	r3, #80	@ 0x50
 8002252:	d03c      	beq.n	80022ce <HAL_TIM_ConfigClockSource+0xfe>
 8002254:	2b50      	cmp	r3, #80	@ 0x50
 8002256:	d873      	bhi.n	8002340 <HAL_TIM_ConfigClockSource+0x170>
 8002258:	2b40      	cmp	r3, #64	@ 0x40
 800225a:	d058      	beq.n	800230e <HAL_TIM_ConfigClockSource+0x13e>
 800225c:	2b40      	cmp	r3, #64	@ 0x40
 800225e:	d86f      	bhi.n	8002340 <HAL_TIM_ConfigClockSource+0x170>
 8002260:	2b30      	cmp	r3, #48	@ 0x30
 8002262:	d064      	beq.n	800232e <HAL_TIM_ConfigClockSource+0x15e>
 8002264:	2b30      	cmp	r3, #48	@ 0x30
 8002266:	d86b      	bhi.n	8002340 <HAL_TIM_ConfigClockSource+0x170>
 8002268:	2b20      	cmp	r3, #32
 800226a:	d060      	beq.n	800232e <HAL_TIM_ConfigClockSource+0x15e>
 800226c:	2b20      	cmp	r3, #32
 800226e:	d867      	bhi.n	8002340 <HAL_TIM_ConfigClockSource+0x170>
 8002270:	2b00      	cmp	r3, #0
 8002272:	d05c      	beq.n	800232e <HAL_TIM_ConfigClockSource+0x15e>
 8002274:	2b10      	cmp	r3, #16
 8002276:	d05a      	beq.n	800232e <HAL_TIM_ConfigClockSource+0x15e>
 8002278:	e062      	b.n	8002340 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800228a:	f000 fc55 	bl	8002b38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800229c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	609a      	str	r2, [r3, #8]
      break;
 80022a6:	e04f      	b.n	8002348 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80022b8:	f000 fc3e 	bl	8002b38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022ca:	609a      	str	r2, [r3, #8]
      break;
 80022cc:	e03c      	b.n	8002348 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022da:	461a      	mov	r2, r3
 80022dc:	f000 fbb2 	bl	8002a44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2150      	movs	r1, #80	@ 0x50
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 fc0b 	bl	8002b02 <TIM_ITRx_SetConfig>
      break;
 80022ec:	e02c      	b.n	8002348 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022fa:	461a      	mov	r2, r3
 80022fc:	f000 fbd1 	bl	8002aa2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2160      	movs	r1, #96	@ 0x60
 8002306:	4618      	mov	r0, r3
 8002308:	f000 fbfb 	bl	8002b02 <TIM_ITRx_SetConfig>
      break;
 800230c:	e01c      	b.n	8002348 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800231a:	461a      	mov	r2, r3
 800231c:	f000 fb92 	bl	8002a44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2140      	movs	r1, #64	@ 0x40
 8002326:	4618      	mov	r0, r3
 8002328:	f000 fbeb 	bl	8002b02 <TIM_ITRx_SetConfig>
      break;
 800232c:	e00c      	b.n	8002348 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4619      	mov	r1, r3
 8002338:	4610      	mov	r0, r2
 800233a:	f000 fbe2 	bl	8002b02 <TIM_ITRx_SetConfig>
      break;
 800233e:	e003      	b.n	8002348 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	73fb      	strb	r3, [r7, #15]
      break;
 8002344:	e000      	b.n	8002348 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002346:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002358:	7bfb      	ldrb	r3, [r7, #15]
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
	...

08002364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a40      	ldr	r2, [pc, #256]	@ (8002478 <TIM_Base_SetConfig+0x114>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d013      	beq.n	80023a4 <TIM_Base_SetConfig+0x40>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002382:	d00f      	beq.n	80023a4 <TIM_Base_SetConfig+0x40>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a3d      	ldr	r2, [pc, #244]	@ (800247c <TIM_Base_SetConfig+0x118>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d00b      	beq.n	80023a4 <TIM_Base_SetConfig+0x40>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a3c      	ldr	r2, [pc, #240]	@ (8002480 <TIM_Base_SetConfig+0x11c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d007      	beq.n	80023a4 <TIM_Base_SetConfig+0x40>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a3b      	ldr	r2, [pc, #236]	@ (8002484 <TIM_Base_SetConfig+0x120>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d003      	beq.n	80023a4 <TIM_Base_SetConfig+0x40>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a3a      	ldr	r2, [pc, #232]	@ (8002488 <TIM_Base_SetConfig+0x124>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d108      	bne.n	80023b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a2f      	ldr	r2, [pc, #188]	@ (8002478 <TIM_Base_SetConfig+0x114>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d01f      	beq.n	80023fe <TIM_Base_SetConfig+0x9a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023c4:	d01b      	beq.n	80023fe <TIM_Base_SetConfig+0x9a>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a2c      	ldr	r2, [pc, #176]	@ (800247c <TIM_Base_SetConfig+0x118>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d017      	beq.n	80023fe <TIM_Base_SetConfig+0x9a>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a2b      	ldr	r2, [pc, #172]	@ (8002480 <TIM_Base_SetConfig+0x11c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d013      	beq.n	80023fe <TIM_Base_SetConfig+0x9a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a2a      	ldr	r2, [pc, #168]	@ (8002484 <TIM_Base_SetConfig+0x120>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d00f      	beq.n	80023fe <TIM_Base_SetConfig+0x9a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a29      	ldr	r2, [pc, #164]	@ (8002488 <TIM_Base_SetConfig+0x124>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d00b      	beq.n	80023fe <TIM_Base_SetConfig+0x9a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a28      	ldr	r2, [pc, #160]	@ (800248c <TIM_Base_SetConfig+0x128>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d007      	beq.n	80023fe <TIM_Base_SetConfig+0x9a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a27      	ldr	r2, [pc, #156]	@ (8002490 <TIM_Base_SetConfig+0x12c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d003      	beq.n	80023fe <TIM_Base_SetConfig+0x9a>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a26      	ldr	r2, [pc, #152]	@ (8002494 <TIM_Base_SetConfig+0x130>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d108      	bne.n	8002410 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	4313      	orrs	r3, r2
 800240e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	4313      	orrs	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a10      	ldr	r2, [pc, #64]	@ (8002478 <TIM_Base_SetConfig+0x114>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d00f      	beq.n	800245c <TIM_Base_SetConfig+0xf8>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a12      	ldr	r2, [pc, #72]	@ (8002488 <TIM_Base_SetConfig+0x124>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d00b      	beq.n	800245c <TIM_Base_SetConfig+0xf8>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a11      	ldr	r2, [pc, #68]	@ (800248c <TIM_Base_SetConfig+0x128>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d007      	beq.n	800245c <TIM_Base_SetConfig+0xf8>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a10      	ldr	r2, [pc, #64]	@ (8002490 <TIM_Base_SetConfig+0x12c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d003      	beq.n	800245c <TIM_Base_SetConfig+0xf8>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a0f      	ldr	r2, [pc, #60]	@ (8002494 <TIM_Base_SetConfig+0x130>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d103      	bne.n	8002464 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	691a      	ldr	r2, [r3, #16]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	615a      	str	r2, [r3, #20]
}
 800246a:	bf00      	nop
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	40012c00 	.word	0x40012c00
 800247c:	40000400 	.word	0x40000400
 8002480:	40000800 	.word	0x40000800
 8002484:	40000c00 	.word	0x40000c00
 8002488:	40013400 	.word	0x40013400
 800248c:	40014000 	.word	0x40014000
 8002490:	40014400 	.word	0x40014400
 8002494:	40014800 	.word	0x40014800

08002498 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	f023 0201 	bic.w	r2, r3, #1
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f023 0303 	bic.w	r3, r3, #3
 80024d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	4313      	orrs	r3, r2
 80024dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f023 0302 	bic.w	r3, r3, #2
 80024e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a2c      	ldr	r2, [pc, #176]	@ (80025a4 <TIM_OC1_SetConfig+0x10c>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d00f      	beq.n	8002518 <TIM_OC1_SetConfig+0x80>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a2b      	ldr	r2, [pc, #172]	@ (80025a8 <TIM_OC1_SetConfig+0x110>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d00b      	beq.n	8002518 <TIM_OC1_SetConfig+0x80>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a2a      	ldr	r2, [pc, #168]	@ (80025ac <TIM_OC1_SetConfig+0x114>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d007      	beq.n	8002518 <TIM_OC1_SetConfig+0x80>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a29      	ldr	r2, [pc, #164]	@ (80025b0 <TIM_OC1_SetConfig+0x118>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d003      	beq.n	8002518 <TIM_OC1_SetConfig+0x80>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a28      	ldr	r2, [pc, #160]	@ (80025b4 <TIM_OC1_SetConfig+0x11c>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d10c      	bne.n	8002532 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f023 0308 	bic.w	r3, r3, #8
 800251e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	4313      	orrs	r3, r2
 8002528:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f023 0304 	bic.w	r3, r3, #4
 8002530:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a1b      	ldr	r2, [pc, #108]	@ (80025a4 <TIM_OC1_SetConfig+0x10c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d00f      	beq.n	800255a <TIM_OC1_SetConfig+0xc2>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a1a      	ldr	r2, [pc, #104]	@ (80025a8 <TIM_OC1_SetConfig+0x110>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00b      	beq.n	800255a <TIM_OC1_SetConfig+0xc2>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a19      	ldr	r2, [pc, #100]	@ (80025ac <TIM_OC1_SetConfig+0x114>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d007      	beq.n	800255a <TIM_OC1_SetConfig+0xc2>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a18      	ldr	r2, [pc, #96]	@ (80025b0 <TIM_OC1_SetConfig+0x118>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d003      	beq.n	800255a <TIM_OC1_SetConfig+0xc2>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a17      	ldr	r2, [pc, #92]	@ (80025b4 <TIM_OC1_SetConfig+0x11c>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d111      	bne.n	800257e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	621a      	str	r2, [r3, #32]
}
 8002598:	bf00      	nop
 800259a:	371c      	adds	r7, #28
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	40012c00 	.word	0x40012c00
 80025a8:	40013400 	.word	0x40013400
 80025ac:	40014000 	.word	0x40014000
 80025b0:	40014400 	.word	0x40014400
 80025b4:	40014800 	.word	0x40014800

080025b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b087      	sub	sp, #28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	f023 0210 	bic.w	r2, r3, #16
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	021b      	lsls	r3, r3, #8
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	f023 0320 	bic.w	r3, r3, #32
 8002606:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	011b      	lsls	r3, r3, #4
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4313      	orrs	r3, r2
 8002612:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a28      	ldr	r2, [pc, #160]	@ (80026b8 <TIM_OC2_SetConfig+0x100>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d003      	beq.n	8002624 <TIM_OC2_SetConfig+0x6c>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a27      	ldr	r2, [pc, #156]	@ (80026bc <TIM_OC2_SetConfig+0x104>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d10d      	bne.n	8002640 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800262a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	4313      	orrs	r3, r2
 8002636:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800263e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a1d      	ldr	r2, [pc, #116]	@ (80026b8 <TIM_OC2_SetConfig+0x100>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d00f      	beq.n	8002668 <TIM_OC2_SetConfig+0xb0>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a1c      	ldr	r2, [pc, #112]	@ (80026bc <TIM_OC2_SetConfig+0x104>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d00b      	beq.n	8002668 <TIM_OC2_SetConfig+0xb0>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a1b      	ldr	r2, [pc, #108]	@ (80026c0 <TIM_OC2_SetConfig+0x108>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d007      	beq.n	8002668 <TIM_OC2_SetConfig+0xb0>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a1a      	ldr	r2, [pc, #104]	@ (80026c4 <TIM_OC2_SetConfig+0x10c>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d003      	beq.n	8002668 <TIM_OC2_SetConfig+0xb0>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a19      	ldr	r2, [pc, #100]	@ (80026c8 <TIM_OC2_SetConfig+0x110>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d113      	bne.n	8002690 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800266e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002676:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	4313      	orrs	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	621a      	str	r2, [r3, #32]
}
 80026aa:	bf00      	nop
 80026ac:	371c      	adds	r7, #28
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40012c00 	.word	0x40012c00
 80026bc:	40013400 	.word	0x40013400
 80026c0:	40014000 	.word	0x40014000
 80026c4:	40014400 	.word	0x40014400
 80026c8:	40014800 	.word	0x40014800

080026cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b087      	sub	sp, #28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f023 0303 	bic.w	r3, r3, #3
 8002706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002718:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	021b      	lsls	r3, r3, #8
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	4313      	orrs	r3, r2
 8002724:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a27      	ldr	r2, [pc, #156]	@ (80027c8 <TIM_OC3_SetConfig+0xfc>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d003      	beq.n	8002736 <TIM_OC3_SetConfig+0x6a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a26      	ldr	r2, [pc, #152]	@ (80027cc <TIM_OC3_SetConfig+0x100>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d10d      	bne.n	8002752 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800273c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	021b      	lsls	r3, r3, #8
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	4313      	orrs	r3, r2
 8002748:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002750:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a1c      	ldr	r2, [pc, #112]	@ (80027c8 <TIM_OC3_SetConfig+0xfc>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d00f      	beq.n	800277a <TIM_OC3_SetConfig+0xae>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a1b      	ldr	r2, [pc, #108]	@ (80027cc <TIM_OC3_SetConfig+0x100>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d00b      	beq.n	800277a <TIM_OC3_SetConfig+0xae>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a1a      	ldr	r2, [pc, #104]	@ (80027d0 <TIM_OC3_SetConfig+0x104>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d007      	beq.n	800277a <TIM_OC3_SetConfig+0xae>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a19      	ldr	r2, [pc, #100]	@ (80027d4 <TIM_OC3_SetConfig+0x108>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d003      	beq.n	800277a <TIM_OC3_SetConfig+0xae>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a18      	ldr	r2, [pc, #96]	@ (80027d8 <TIM_OC3_SetConfig+0x10c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d113      	bne.n	80027a2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4313      	orrs	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	011b      	lsls	r3, r3, #4
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	621a      	str	r2, [r3, #32]
}
 80027bc:	bf00      	nop
 80027be:	371c      	adds	r7, #28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	40012c00 	.word	0x40012c00
 80027cc:	40013400 	.word	0x40013400
 80027d0:	40014000 	.word	0x40014000
 80027d4:	40014400 	.word	0x40014400
 80027d8:	40014800 	.word	0x40014800

080027dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800280a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800280e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	021b      	lsls	r3, r3, #8
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	4313      	orrs	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800282a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	031b      	lsls	r3, r3, #12
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a18      	ldr	r2, [pc, #96]	@ (800289c <TIM_OC4_SetConfig+0xc0>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d00f      	beq.n	8002860 <TIM_OC4_SetConfig+0x84>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a17      	ldr	r2, [pc, #92]	@ (80028a0 <TIM_OC4_SetConfig+0xc4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d00b      	beq.n	8002860 <TIM_OC4_SetConfig+0x84>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a16      	ldr	r2, [pc, #88]	@ (80028a4 <TIM_OC4_SetConfig+0xc8>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d007      	beq.n	8002860 <TIM_OC4_SetConfig+0x84>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a15      	ldr	r2, [pc, #84]	@ (80028a8 <TIM_OC4_SetConfig+0xcc>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d003      	beq.n	8002860 <TIM_OC4_SetConfig+0x84>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a14      	ldr	r2, [pc, #80]	@ (80028ac <TIM_OC4_SetConfig+0xd0>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d109      	bne.n	8002874 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002866:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	019b      	lsls	r3, r3, #6
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	4313      	orrs	r3, r2
 8002872:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	621a      	str	r2, [r3, #32]
}
 800288e:	bf00      	nop
 8002890:	371c      	adds	r7, #28
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40012c00 	.word	0x40012c00
 80028a0:	40013400 	.word	0x40013400
 80028a4:	40014000 	.word	0x40014000
 80028a8:	40014400 	.word	0x40014400
 80028ac:	40014800 	.word	0x40014800

080028b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b087      	sub	sp, #28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80028f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	041b      	lsls	r3, r3, #16
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a17      	ldr	r2, [pc, #92]	@ (8002964 <TIM_OC5_SetConfig+0xb4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d00f      	beq.n	800292a <TIM_OC5_SetConfig+0x7a>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <TIM_OC5_SetConfig+0xb8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d00b      	beq.n	800292a <TIM_OC5_SetConfig+0x7a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a15      	ldr	r2, [pc, #84]	@ (800296c <TIM_OC5_SetConfig+0xbc>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d007      	beq.n	800292a <TIM_OC5_SetConfig+0x7a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a14      	ldr	r2, [pc, #80]	@ (8002970 <TIM_OC5_SetConfig+0xc0>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d003      	beq.n	800292a <TIM_OC5_SetConfig+0x7a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a13      	ldr	r2, [pc, #76]	@ (8002974 <TIM_OC5_SetConfig+0xc4>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d109      	bne.n	800293e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002930:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	021b      	lsls	r3, r3, #8
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	4313      	orrs	r3, r2
 800293c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	621a      	str	r2, [r3, #32]
}
 8002958:	bf00      	nop
 800295a:	371c      	adds	r7, #28
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	40012c00 	.word	0x40012c00
 8002968:	40013400 	.word	0x40013400
 800296c:	40014000 	.word	0x40014000
 8002970:	40014400 	.word	0x40014400
 8002974:	40014800 	.word	0x40014800

08002978 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002978:	b480      	push	{r7}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800299e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	021b      	lsls	r3, r3, #8
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80029be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	051b      	lsls	r3, r3, #20
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a18      	ldr	r2, [pc, #96]	@ (8002a30 <TIM_OC6_SetConfig+0xb8>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d00f      	beq.n	80029f4 <TIM_OC6_SetConfig+0x7c>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a17      	ldr	r2, [pc, #92]	@ (8002a34 <TIM_OC6_SetConfig+0xbc>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d00b      	beq.n	80029f4 <TIM_OC6_SetConfig+0x7c>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a16      	ldr	r2, [pc, #88]	@ (8002a38 <TIM_OC6_SetConfig+0xc0>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d007      	beq.n	80029f4 <TIM_OC6_SetConfig+0x7c>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a15      	ldr	r2, [pc, #84]	@ (8002a3c <TIM_OC6_SetConfig+0xc4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d003      	beq.n	80029f4 <TIM_OC6_SetConfig+0x7c>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a14      	ldr	r2, [pc, #80]	@ (8002a40 <TIM_OC6_SetConfig+0xc8>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d109      	bne.n	8002a08 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	029b      	lsls	r3, r3, #10
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	621a      	str	r2, [r3, #32]
}
 8002a22:	bf00      	nop
 8002a24:	371c      	adds	r7, #28
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	40012c00 	.word	0x40012c00
 8002a34:	40013400 	.word	0x40013400
 8002a38:	40014000 	.word	0x40014000
 8002a3c:	40014400 	.word	0x40014400
 8002a40:	40014800 	.word	0x40014800

08002a44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b087      	sub	sp, #28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	f023 0201 	bic.w	r2, r3, #1
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f023 030a 	bic.w	r3, r3, #10
 8002a80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	621a      	str	r2, [r3, #32]
}
 8002a96:	bf00      	nop
 8002a98:	371c      	adds	r7, #28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b087      	sub	sp, #28
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	60f8      	str	r0, [r7, #12]
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	f023 0210 	bic.w	r2, r3, #16
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002acc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	031b      	lsls	r3, r3, #12
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002ade:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	621a      	str	r2, [r3, #32]
}
 8002af6:	bf00      	nop
 8002af8:	371c      	adds	r7, #28
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b085      	sub	sp, #20
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
 8002b0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f043 0307 	orr.w	r3, r3, #7
 8002b24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	609a      	str	r2, [r3, #8]
}
 8002b2c:	bf00      	nop
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b087      	sub	sp, #28
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
 8002b44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	021a      	lsls	r2, r3, #8
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	609a      	str	r2, [r3, #8]
}
 8002b6c:	bf00      	nop
 8002b6e:	371c      	adds	r7, #28
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b087      	sub	sp, #28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f003 031f 	and.w	r3, r3, #31
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6a1a      	ldr	r2, [r3, #32]
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	401a      	ands	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6a1a      	ldr	r2, [r3, #32]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f003 031f 	and.w	r3, r3, #31
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	621a      	str	r2, [r3, #32]
}
 8002bb6:	bf00      	nop
 8002bb8:	371c      	adds	r7, #28
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
	...

08002bc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e068      	b.n	8002cae <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a2e      	ldr	r2, [pc, #184]	@ (8002cbc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d004      	beq.n	8002c10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a2d      	ldr	r2, [pc, #180]	@ (8002cc0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d108      	bne.n	8002c22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002c16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a1e      	ldr	r2, [pc, #120]	@ (8002cbc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d01d      	beq.n	8002c82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c4e:	d018      	beq.n	8002c82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a1b      	ldr	r2, [pc, #108]	@ (8002cc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d013      	beq.n	8002c82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a1a      	ldr	r2, [pc, #104]	@ (8002cc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d00e      	beq.n	8002c82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a18      	ldr	r2, [pc, #96]	@ (8002ccc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d009      	beq.n	8002c82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a13      	ldr	r2, [pc, #76]	@ (8002cc0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d004      	beq.n	8002c82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a14      	ldr	r2, [pc, #80]	@ (8002cd0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d10c      	bne.n	8002c9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	40012c00 	.word	0x40012c00
 8002cc0:	40013400 	.word	0x40013400
 8002cc4:	40000400 	.word	0x40000400
 8002cc8:	40000800 	.word	0x40000800
 8002ccc:	40000c00 	.word	0x40000c00
 8002cd0:	40014000 	.word	0x40014000

08002cd4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002cec:	2302      	movs	r3, #2
 8002cee:	e065      	b.n	8002dbc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d56:	4313      	orrs	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	041b      	lsls	r3, r3, #16
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a16      	ldr	r2, [pc, #88]	@ (8002dc8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d004      	beq.n	8002d7e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a14      	ldr	r2, [pc, #80]	@ (8002dcc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d115      	bne.n	8002daa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d88:	051b      	lsls	r3, r3, #20
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	40012c00 	.word	0x40012c00
 8002dcc:	40013400 	.word	0x40013400

08002dd0 <std>:
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	b510      	push	{r4, lr}
 8002dd4:	4604      	mov	r4, r0
 8002dd6:	e9c0 3300 	strd	r3, r3, [r0]
 8002dda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002dde:	6083      	str	r3, [r0, #8]
 8002de0:	8181      	strh	r1, [r0, #12]
 8002de2:	6643      	str	r3, [r0, #100]	@ 0x64
 8002de4:	81c2      	strh	r2, [r0, #14]
 8002de6:	6183      	str	r3, [r0, #24]
 8002de8:	4619      	mov	r1, r3
 8002dea:	2208      	movs	r2, #8
 8002dec:	305c      	adds	r0, #92	@ 0x5c
 8002dee:	f000 f906 	bl	8002ffe <memset>
 8002df2:	4b0d      	ldr	r3, [pc, #52]	@ (8002e28 <std+0x58>)
 8002df4:	6263      	str	r3, [r4, #36]	@ 0x24
 8002df6:	4b0d      	ldr	r3, [pc, #52]	@ (8002e2c <std+0x5c>)
 8002df8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8002e30 <std+0x60>)
 8002dfc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8002e34 <std+0x64>)
 8002e00:	6323      	str	r3, [r4, #48]	@ 0x30
 8002e02:	4b0d      	ldr	r3, [pc, #52]	@ (8002e38 <std+0x68>)
 8002e04:	6224      	str	r4, [r4, #32]
 8002e06:	429c      	cmp	r4, r3
 8002e08:	d006      	beq.n	8002e18 <std+0x48>
 8002e0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002e0e:	4294      	cmp	r4, r2
 8002e10:	d002      	beq.n	8002e18 <std+0x48>
 8002e12:	33d0      	adds	r3, #208	@ 0xd0
 8002e14:	429c      	cmp	r4, r3
 8002e16:	d105      	bne.n	8002e24 <std+0x54>
 8002e18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e20:	f000 b966 	b.w	80030f0 <__retarget_lock_init_recursive>
 8002e24:	bd10      	pop	{r4, pc}
 8002e26:	bf00      	nop
 8002e28:	08002f79 	.word	0x08002f79
 8002e2c:	08002f9b 	.word	0x08002f9b
 8002e30:	08002fd3 	.word	0x08002fd3
 8002e34:	08002ff7 	.word	0x08002ff7
 8002e38:	20000124 	.word	0x20000124

08002e3c <stdio_exit_handler>:
 8002e3c:	4a02      	ldr	r2, [pc, #8]	@ (8002e48 <stdio_exit_handler+0xc>)
 8002e3e:	4903      	ldr	r1, [pc, #12]	@ (8002e4c <stdio_exit_handler+0x10>)
 8002e40:	4803      	ldr	r0, [pc, #12]	@ (8002e50 <stdio_exit_handler+0x14>)
 8002e42:	f000 b869 	b.w	8002f18 <_fwalk_sglue>
 8002e46:	bf00      	nop
 8002e48:	2000000c 	.word	0x2000000c
 8002e4c:	08003991 	.word	0x08003991
 8002e50:	2000001c 	.word	0x2000001c

08002e54 <cleanup_stdio>:
 8002e54:	6841      	ldr	r1, [r0, #4]
 8002e56:	4b0c      	ldr	r3, [pc, #48]	@ (8002e88 <cleanup_stdio+0x34>)
 8002e58:	4299      	cmp	r1, r3
 8002e5a:	b510      	push	{r4, lr}
 8002e5c:	4604      	mov	r4, r0
 8002e5e:	d001      	beq.n	8002e64 <cleanup_stdio+0x10>
 8002e60:	f000 fd96 	bl	8003990 <_fflush_r>
 8002e64:	68a1      	ldr	r1, [r4, #8]
 8002e66:	4b09      	ldr	r3, [pc, #36]	@ (8002e8c <cleanup_stdio+0x38>)
 8002e68:	4299      	cmp	r1, r3
 8002e6a:	d002      	beq.n	8002e72 <cleanup_stdio+0x1e>
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	f000 fd8f 	bl	8003990 <_fflush_r>
 8002e72:	68e1      	ldr	r1, [r4, #12]
 8002e74:	4b06      	ldr	r3, [pc, #24]	@ (8002e90 <cleanup_stdio+0x3c>)
 8002e76:	4299      	cmp	r1, r3
 8002e78:	d004      	beq.n	8002e84 <cleanup_stdio+0x30>
 8002e7a:	4620      	mov	r0, r4
 8002e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e80:	f000 bd86 	b.w	8003990 <_fflush_r>
 8002e84:	bd10      	pop	{r4, pc}
 8002e86:	bf00      	nop
 8002e88:	20000124 	.word	0x20000124
 8002e8c:	2000018c 	.word	0x2000018c
 8002e90:	200001f4 	.word	0x200001f4

08002e94 <global_stdio_init.part.0>:
 8002e94:	b510      	push	{r4, lr}
 8002e96:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec4 <global_stdio_init.part.0+0x30>)
 8002e98:	4c0b      	ldr	r4, [pc, #44]	@ (8002ec8 <global_stdio_init.part.0+0x34>)
 8002e9a:	4a0c      	ldr	r2, [pc, #48]	@ (8002ecc <global_stdio_init.part.0+0x38>)
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	2104      	movs	r1, #4
 8002ea4:	f7ff ff94 	bl	8002dd0 <std>
 8002ea8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002eac:	2201      	movs	r2, #1
 8002eae:	2109      	movs	r1, #9
 8002eb0:	f7ff ff8e 	bl	8002dd0 <std>
 8002eb4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002eb8:	2202      	movs	r2, #2
 8002eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ebe:	2112      	movs	r1, #18
 8002ec0:	f7ff bf86 	b.w	8002dd0 <std>
 8002ec4:	2000025c 	.word	0x2000025c
 8002ec8:	20000124 	.word	0x20000124
 8002ecc:	08002e3d 	.word	0x08002e3d

08002ed0 <__sfp_lock_acquire>:
 8002ed0:	4801      	ldr	r0, [pc, #4]	@ (8002ed8 <__sfp_lock_acquire+0x8>)
 8002ed2:	f000 b90e 	b.w	80030f2 <__retarget_lock_acquire_recursive>
 8002ed6:	bf00      	nop
 8002ed8:	20000265 	.word	0x20000265

08002edc <__sfp_lock_release>:
 8002edc:	4801      	ldr	r0, [pc, #4]	@ (8002ee4 <__sfp_lock_release+0x8>)
 8002ede:	f000 b909 	b.w	80030f4 <__retarget_lock_release_recursive>
 8002ee2:	bf00      	nop
 8002ee4:	20000265 	.word	0x20000265

08002ee8 <__sinit>:
 8002ee8:	b510      	push	{r4, lr}
 8002eea:	4604      	mov	r4, r0
 8002eec:	f7ff fff0 	bl	8002ed0 <__sfp_lock_acquire>
 8002ef0:	6a23      	ldr	r3, [r4, #32]
 8002ef2:	b11b      	cbz	r3, 8002efc <__sinit+0x14>
 8002ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ef8:	f7ff bff0 	b.w	8002edc <__sfp_lock_release>
 8002efc:	4b04      	ldr	r3, [pc, #16]	@ (8002f10 <__sinit+0x28>)
 8002efe:	6223      	str	r3, [r4, #32]
 8002f00:	4b04      	ldr	r3, [pc, #16]	@ (8002f14 <__sinit+0x2c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1f5      	bne.n	8002ef4 <__sinit+0xc>
 8002f08:	f7ff ffc4 	bl	8002e94 <global_stdio_init.part.0>
 8002f0c:	e7f2      	b.n	8002ef4 <__sinit+0xc>
 8002f0e:	bf00      	nop
 8002f10:	08002e55 	.word	0x08002e55
 8002f14:	2000025c 	.word	0x2000025c

08002f18 <_fwalk_sglue>:
 8002f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f1c:	4607      	mov	r7, r0
 8002f1e:	4688      	mov	r8, r1
 8002f20:	4614      	mov	r4, r2
 8002f22:	2600      	movs	r6, #0
 8002f24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002f28:	f1b9 0901 	subs.w	r9, r9, #1
 8002f2c:	d505      	bpl.n	8002f3a <_fwalk_sglue+0x22>
 8002f2e:	6824      	ldr	r4, [r4, #0]
 8002f30:	2c00      	cmp	r4, #0
 8002f32:	d1f7      	bne.n	8002f24 <_fwalk_sglue+0xc>
 8002f34:	4630      	mov	r0, r6
 8002f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f3a:	89ab      	ldrh	r3, [r5, #12]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d907      	bls.n	8002f50 <_fwalk_sglue+0x38>
 8002f40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002f44:	3301      	adds	r3, #1
 8002f46:	d003      	beq.n	8002f50 <_fwalk_sglue+0x38>
 8002f48:	4629      	mov	r1, r5
 8002f4a:	4638      	mov	r0, r7
 8002f4c:	47c0      	blx	r8
 8002f4e:	4306      	orrs	r6, r0
 8002f50:	3568      	adds	r5, #104	@ 0x68
 8002f52:	e7e9      	b.n	8002f28 <_fwalk_sglue+0x10>

08002f54 <iprintf>:
 8002f54:	b40f      	push	{r0, r1, r2, r3}
 8002f56:	b507      	push	{r0, r1, r2, lr}
 8002f58:	4906      	ldr	r1, [pc, #24]	@ (8002f74 <iprintf+0x20>)
 8002f5a:	ab04      	add	r3, sp, #16
 8002f5c:	6808      	ldr	r0, [r1, #0]
 8002f5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f62:	6881      	ldr	r1, [r0, #8]
 8002f64:	9301      	str	r3, [sp, #4]
 8002f66:	f000 f9e9 	bl	800333c <_vfiprintf_r>
 8002f6a:	b003      	add	sp, #12
 8002f6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f70:	b004      	add	sp, #16
 8002f72:	4770      	bx	lr
 8002f74:	20000018 	.word	0x20000018

08002f78 <__sread>:
 8002f78:	b510      	push	{r4, lr}
 8002f7a:	460c      	mov	r4, r1
 8002f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f80:	f000 f868 	bl	8003054 <_read_r>
 8002f84:	2800      	cmp	r0, #0
 8002f86:	bfab      	itete	ge
 8002f88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002f8a:	89a3      	ldrhlt	r3, [r4, #12]
 8002f8c:	181b      	addge	r3, r3, r0
 8002f8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002f92:	bfac      	ite	ge
 8002f94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002f96:	81a3      	strhlt	r3, [r4, #12]
 8002f98:	bd10      	pop	{r4, pc}

08002f9a <__swrite>:
 8002f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f9e:	461f      	mov	r7, r3
 8002fa0:	898b      	ldrh	r3, [r1, #12]
 8002fa2:	05db      	lsls	r3, r3, #23
 8002fa4:	4605      	mov	r5, r0
 8002fa6:	460c      	mov	r4, r1
 8002fa8:	4616      	mov	r6, r2
 8002faa:	d505      	bpl.n	8002fb8 <__swrite+0x1e>
 8002fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f000 f83c 	bl	8003030 <_lseek_r>
 8002fb8:	89a3      	ldrh	r3, [r4, #12]
 8002fba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002fbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002fc2:	81a3      	strh	r3, [r4, #12]
 8002fc4:	4632      	mov	r2, r6
 8002fc6:	463b      	mov	r3, r7
 8002fc8:	4628      	mov	r0, r5
 8002fca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002fce:	f000 b853 	b.w	8003078 <_write_r>

08002fd2 <__sseek>:
 8002fd2:	b510      	push	{r4, lr}
 8002fd4:	460c      	mov	r4, r1
 8002fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fda:	f000 f829 	bl	8003030 <_lseek_r>
 8002fde:	1c43      	adds	r3, r0, #1
 8002fe0:	89a3      	ldrh	r3, [r4, #12]
 8002fe2:	bf15      	itete	ne
 8002fe4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002fe6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002fea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002fee:	81a3      	strheq	r3, [r4, #12]
 8002ff0:	bf18      	it	ne
 8002ff2:	81a3      	strhne	r3, [r4, #12]
 8002ff4:	bd10      	pop	{r4, pc}

08002ff6 <__sclose>:
 8002ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ffa:	f000 b809 	b.w	8003010 <_close_r>

08002ffe <memset>:
 8002ffe:	4402      	add	r2, r0
 8003000:	4603      	mov	r3, r0
 8003002:	4293      	cmp	r3, r2
 8003004:	d100      	bne.n	8003008 <memset+0xa>
 8003006:	4770      	bx	lr
 8003008:	f803 1b01 	strb.w	r1, [r3], #1
 800300c:	e7f9      	b.n	8003002 <memset+0x4>
	...

08003010 <_close_r>:
 8003010:	b538      	push	{r3, r4, r5, lr}
 8003012:	4d06      	ldr	r5, [pc, #24]	@ (800302c <_close_r+0x1c>)
 8003014:	2300      	movs	r3, #0
 8003016:	4604      	mov	r4, r0
 8003018:	4608      	mov	r0, r1
 800301a:	602b      	str	r3, [r5, #0]
 800301c:	f7fd fc0c 	bl	8000838 <_close>
 8003020:	1c43      	adds	r3, r0, #1
 8003022:	d102      	bne.n	800302a <_close_r+0x1a>
 8003024:	682b      	ldr	r3, [r5, #0]
 8003026:	b103      	cbz	r3, 800302a <_close_r+0x1a>
 8003028:	6023      	str	r3, [r4, #0]
 800302a:	bd38      	pop	{r3, r4, r5, pc}
 800302c:	20000260 	.word	0x20000260

08003030 <_lseek_r>:
 8003030:	b538      	push	{r3, r4, r5, lr}
 8003032:	4d07      	ldr	r5, [pc, #28]	@ (8003050 <_lseek_r+0x20>)
 8003034:	4604      	mov	r4, r0
 8003036:	4608      	mov	r0, r1
 8003038:	4611      	mov	r1, r2
 800303a:	2200      	movs	r2, #0
 800303c:	602a      	str	r2, [r5, #0]
 800303e:	461a      	mov	r2, r3
 8003040:	f7fd fc21 	bl	8000886 <_lseek>
 8003044:	1c43      	adds	r3, r0, #1
 8003046:	d102      	bne.n	800304e <_lseek_r+0x1e>
 8003048:	682b      	ldr	r3, [r5, #0]
 800304a:	b103      	cbz	r3, 800304e <_lseek_r+0x1e>
 800304c:	6023      	str	r3, [r4, #0]
 800304e:	bd38      	pop	{r3, r4, r5, pc}
 8003050:	20000260 	.word	0x20000260

08003054 <_read_r>:
 8003054:	b538      	push	{r3, r4, r5, lr}
 8003056:	4d07      	ldr	r5, [pc, #28]	@ (8003074 <_read_r+0x20>)
 8003058:	4604      	mov	r4, r0
 800305a:	4608      	mov	r0, r1
 800305c:	4611      	mov	r1, r2
 800305e:	2200      	movs	r2, #0
 8003060:	602a      	str	r2, [r5, #0]
 8003062:	461a      	mov	r2, r3
 8003064:	f7fd fbaf 	bl	80007c6 <_read>
 8003068:	1c43      	adds	r3, r0, #1
 800306a:	d102      	bne.n	8003072 <_read_r+0x1e>
 800306c:	682b      	ldr	r3, [r5, #0]
 800306e:	b103      	cbz	r3, 8003072 <_read_r+0x1e>
 8003070:	6023      	str	r3, [r4, #0]
 8003072:	bd38      	pop	{r3, r4, r5, pc}
 8003074:	20000260 	.word	0x20000260

08003078 <_write_r>:
 8003078:	b538      	push	{r3, r4, r5, lr}
 800307a:	4d07      	ldr	r5, [pc, #28]	@ (8003098 <_write_r+0x20>)
 800307c:	4604      	mov	r4, r0
 800307e:	4608      	mov	r0, r1
 8003080:	4611      	mov	r1, r2
 8003082:	2200      	movs	r2, #0
 8003084:	602a      	str	r2, [r5, #0]
 8003086:	461a      	mov	r2, r3
 8003088:	f7fd fbba 	bl	8000800 <_write>
 800308c:	1c43      	adds	r3, r0, #1
 800308e:	d102      	bne.n	8003096 <_write_r+0x1e>
 8003090:	682b      	ldr	r3, [r5, #0]
 8003092:	b103      	cbz	r3, 8003096 <_write_r+0x1e>
 8003094:	6023      	str	r3, [r4, #0]
 8003096:	bd38      	pop	{r3, r4, r5, pc}
 8003098:	20000260 	.word	0x20000260

0800309c <__errno>:
 800309c:	4b01      	ldr	r3, [pc, #4]	@ (80030a4 <__errno+0x8>)
 800309e:	6818      	ldr	r0, [r3, #0]
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	20000018 	.word	0x20000018

080030a8 <__libc_init_array>:
 80030a8:	b570      	push	{r4, r5, r6, lr}
 80030aa:	4d0d      	ldr	r5, [pc, #52]	@ (80030e0 <__libc_init_array+0x38>)
 80030ac:	4c0d      	ldr	r4, [pc, #52]	@ (80030e4 <__libc_init_array+0x3c>)
 80030ae:	1b64      	subs	r4, r4, r5
 80030b0:	10a4      	asrs	r4, r4, #2
 80030b2:	2600      	movs	r6, #0
 80030b4:	42a6      	cmp	r6, r4
 80030b6:	d109      	bne.n	80030cc <__libc_init_array+0x24>
 80030b8:	4d0b      	ldr	r5, [pc, #44]	@ (80030e8 <__libc_init_array+0x40>)
 80030ba:	4c0c      	ldr	r4, [pc, #48]	@ (80030ec <__libc_init_array+0x44>)
 80030bc:	f000 fdb8 	bl	8003c30 <_init>
 80030c0:	1b64      	subs	r4, r4, r5
 80030c2:	10a4      	asrs	r4, r4, #2
 80030c4:	2600      	movs	r6, #0
 80030c6:	42a6      	cmp	r6, r4
 80030c8:	d105      	bne.n	80030d6 <__libc_init_array+0x2e>
 80030ca:	bd70      	pop	{r4, r5, r6, pc}
 80030cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80030d0:	4798      	blx	r3
 80030d2:	3601      	adds	r6, #1
 80030d4:	e7ee      	b.n	80030b4 <__libc_init_array+0xc>
 80030d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030da:	4798      	blx	r3
 80030dc:	3601      	adds	r6, #1
 80030de:	e7f2      	b.n	80030c6 <__libc_init_array+0x1e>
 80030e0:	08003cf0 	.word	0x08003cf0
 80030e4:	08003cf0 	.word	0x08003cf0
 80030e8:	08003cf0 	.word	0x08003cf0
 80030ec:	08003cf4 	.word	0x08003cf4

080030f0 <__retarget_lock_init_recursive>:
 80030f0:	4770      	bx	lr

080030f2 <__retarget_lock_acquire_recursive>:
 80030f2:	4770      	bx	lr

080030f4 <__retarget_lock_release_recursive>:
 80030f4:	4770      	bx	lr
	...

080030f8 <_free_r>:
 80030f8:	b538      	push	{r3, r4, r5, lr}
 80030fa:	4605      	mov	r5, r0
 80030fc:	2900      	cmp	r1, #0
 80030fe:	d041      	beq.n	8003184 <_free_r+0x8c>
 8003100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003104:	1f0c      	subs	r4, r1, #4
 8003106:	2b00      	cmp	r3, #0
 8003108:	bfb8      	it	lt
 800310a:	18e4      	addlt	r4, r4, r3
 800310c:	f000 f8e0 	bl	80032d0 <__malloc_lock>
 8003110:	4a1d      	ldr	r2, [pc, #116]	@ (8003188 <_free_r+0x90>)
 8003112:	6813      	ldr	r3, [r2, #0]
 8003114:	b933      	cbnz	r3, 8003124 <_free_r+0x2c>
 8003116:	6063      	str	r3, [r4, #4]
 8003118:	6014      	str	r4, [r2, #0]
 800311a:	4628      	mov	r0, r5
 800311c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003120:	f000 b8dc 	b.w	80032dc <__malloc_unlock>
 8003124:	42a3      	cmp	r3, r4
 8003126:	d908      	bls.n	800313a <_free_r+0x42>
 8003128:	6820      	ldr	r0, [r4, #0]
 800312a:	1821      	adds	r1, r4, r0
 800312c:	428b      	cmp	r3, r1
 800312e:	bf01      	itttt	eq
 8003130:	6819      	ldreq	r1, [r3, #0]
 8003132:	685b      	ldreq	r3, [r3, #4]
 8003134:	1809      	addeq	r1, r1, r0
 8003136:	6021      	streq	r1, [r4, #0]
 8003138:	e7ed      	b.n	8003116 <_free_r+0x1e>
 800313a:	461a      	mov	r2, r3
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	b10b      	cbz	r3, 8003144 <_free_r+0x4c>
 8003140:	42a3      	cmp	r3, r4
 8003142:	d9fa      	bls.n	800313a <_free_r+0x42>
 8003144:	6811      	ldr	r1, [r2, #0]
 8003146:	1850      	adds	r0, r2, r1
 8003148:	42a0      	cmp	r0, r4
 800314a:	d10b      	bne.n	8003164 <_free_r+0x6c>
 800314c:	6820      	ldr	r0, [r4, #0]
 800314e:	4401      	add	r1, r0
 8003150:	1850      	adds	r0, r2, r1
 8003152:	4283      	cmp	r3, r0
 8003154:	6011      	str	r1, [r2, #0]
 8003156:	d1e0      	bne.n	800311a <_free_r+0x22>
 8003158:	6818      	ldr	r0, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	6053      	str	r3, [r2, #4]
 800315e:	4408      	add	r0, r1
 8003160:	6010      	str	r0, [r2, #0]
 8003162:	e7da      	b.n	800311a <_free_r+0x22>
 8003164:	d902      	bls.n	800316c <_free_r+0x74>
 8003166:	230c      	movs	r3, #12
 8003168:	602b      	str	r3, [r5, #0]
 800316a:	e7d6      	b.n	800311a <_free_r+0x22>
 800316c:	6820      	ldr	r0, [r4, #0]
 800316e:	1821      	adds	r1, r4, r0
 8003170:	428b      	cmp	r3, r1
 8003172:	bf04      	itt	eq
 8003174:	6819      	ldreq	r1, [r3, #0]
 8003176:	685b      	ldreq	r3, [r3, #4]
 8003178:	6063      	str	r3, [r4, #4]
 800317a:	bf04      	itt	eq
 800317c:	1809      	addeq	r1, r1, r0
 800317e:	6021      	streq	r1, [r4, #0]
 8003180:	6054      	str	r4, [r2, #4]
 8003182:	e7ca      	b.n	800311a <_free_r+0x22>
 8003184:	bd38      	pop	{r3, r4, r5, pc}
 8003186:	bf00      	nop
 8003188:	2000026c 	.word	0x2000026c

0800318c <sbrk_aligned>:
 800318c:	b570      	push	{r4, r5, r6, lr}
 800318e:	4e0f      	ldr	r6, [pc, #60]	@ (80031cc <sbrk_aligned+0x40>)
 8003190:	460c      	mov	r4, r1
 8003192:	6831      	ldr	r1, [r6, #0]
 8003194:	4605      	mov	r5, r0
 8003196:	b911      	cbnz	r1, 800319e <sbrk_aligned+0x12>
 8003198:	f000 fcb6 	bl	8003b08 <_sbrk_r>
 800319c:	6030      	str	r0, [r6, #0]
 800319e:	4621      	mov	r1, r4
 80031a0:	4628      	mov	r0, r5
 80031a2:	f000 fcb1 	bl	8003b08 <_sbrk_r>
 80031a6:	1c43      	adds	r3, r0, #1
 80031a8:	d103      	bne.n	80031b2 <sbrk_aligned+0x26>
 80031aa:	f04f 34ff 	mov.w	r4, #4294967295
 80031ae:	4620      	mov	r0, r4
 80031b0:	bd70      	pop	{r4, r5, r6, pc}
 80031b2:	1cc4      	adds	r4, r0, #3
 80031b4:	f024 0403 	bic.w	r4, r4, #3
 80031b8:	42a0      	cmp	r0, r4
 80031ba:	d0f8      	beq.n	80031ae <sbrk_aligned+0x22>
 80031bc:	1a21      	subs	r1, r4, r0
 80031be:	4628      	mov	r0, r5
 80031c0:	f000 fca2 	bl	8003b08 <_sbrk_r>
 80031c4:	3001      	adds	r0, #1
 80031c6:	d1f2      	bne.n	80031ae <sbrk_aligned+0x22>
 80031c8:	e7ef      	b.n	80031aa <sbrk_aligned+0x1e>
 80031ca:	bf00      	nop
 80031cc:	20000268 	.word	0x20000268

080031d0 <_malloc_r>:
 80031d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031d4:	1ccd      	adds	r5, r1, #3
 80031d6:	f025 0503 	bic.w	r5, r5, #3
 80031da:	3508      	adds	r5, #8
 80031dc:	2d0c      	cmp	r5, #12
 80031de:	bf38      	it	cc
 80031e0:	250c      	movcc	r5, #12
 80031e2:	2d00      	cmp	r5, #0
 80031e4:	4606      	mov	r6, r0
 80031e6:	db01      	blt.n	80031ec <_malloc_r+0x1c>
 80031e8:	42a9      	cmp	r1, r5
 80031ea:	d904      	bls.n	80031f6 <_malloc_r+0x26>
 80031ec:	230c      	movs	r3, #12
 80031ee:	6033      	str	r3, [r6, #0]
 80031f0:	2000      	movs	r0, #0
 80031f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80032cc <_malloc_r+0xfc>
 80031fa:	f000 f869 	bl	80032d0 <__malloc_lock>
 80031fe:	f8d8 3000 	ldr.w	r3, [r8]
 8003202:	461c      	mov	r4, r3
 8003204:	bb44      	cbnz	r4, 8003258 <_malloc_r+0x88>
 8003206:	4629      	mov	r1, r5
 8003208:	4630      	mov	r0, r6
 800320a:	f7ff ffbf 	bl	800318c <sbrk_aligned>
 800320e:	1c43      	adds	r3, r0, #1
 8003210:	4604      	mov	r4, r0
 8003212:	d158      	bne.n	80032c6 <_malloc_r+0xf6>
 8003214:	f8d8 4000 	ldr.w	r4, [r8]
 8003218:	4627      	mov	r7, r4
 800321a:	2f00      	cmp	r7, #0
 800321c:	d143      	bne.n	80032a6 <_malloc_r+0xd6>
 800321e:	2c00      	cmp	r4, #0
 8003220:	d04b      	beq.n	80032ba <_malloc_r+0xea>
 8003222:	6823      	ldr	r3, [r4, #0]
 8003224:	4639      	mov	r1, r7
 8003226:	4630      	mov	r0, r6
 8003228:	eb04 0903 	add.w	r9, r4, r3
 800322c:	f000 fc6c 	bl	8003b08 <_sbrk_r>
 8003230:	4581      	cmp	r9, r0
 8003232:	d142      	bne.n	80032ba <_malloc_r+0xea>
 8003234:	6821      	ldr	r1, [r4, #0]
 8003236:	1a6d      	subs	r5, r5, r1
 8003238:	4629      	mov	r1, r5
 800323a:	4630      	mov	r0, r6
 800323c:	f7ff ffa6 	bl	800318c <sbrk_aligned>
 8003240:	3001      	adds	r0, #1
 8003242:	d03a      	beq.n	80032ba <_malloc_r+0xea>
 8003244:	6823      	ldr	r3, [r4, #0]
 8003246:	442b      	add	r3, r5
 8003248:	6023      	str	r3, [r4, #0]
 800324a:	f8d8 3000 	ldr.w	r3, [r8]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	bb62      	cbnz	r2, 80032ac <_malloc_r+0xdc>
 8003252:	f8c8 7000 	str.w	r7, [r8]
 8003256:	e00f      	b.n	8003278 <_malloc_r+0xa8>
 8003258:	6822      	ldr	r2, [r4, #0]
 800325a:	1b52      	subs	r2, r2, r5
 800325c:	d420      	bmi.n	80032a0 <_malloc_r+0xd0>
 800325e:	2a0b      	cmp	r2, #11
 8003260:	d917      	bls.n	8003292 <_malloc_r+0xc2>
 8003262:	1961      	adds	r1, r4, r5
 8003264:	42a3      	cmp	r3, r4
 8003266:	6025      	str	r5, [r4, #0]
 8003268:	bf18      	it	ne
 800326a:	6059      	strne	r1, [r3, #4]
 800326c:	6863      	ldr	r3, [r4, #4]
 800326e:	bf08      	it	eq
 8003270:	f8c8 1000 	streq.w	r1, [r8]
 8003274:	5162      	str	r2, [r4, r5]
 8003276:	604b      	str	r3, [r1, #4]
 8003278:	4630      	mov	r0, r6
 800327a:	f000 f82f 	bl	80032dc <__malloc_unlock>
 800327e:	f104 000b 	add.w	r0, r4, #11
 8003282:	1d23      	adds	r3, r4, #4
 8003284:	f020 0007 	bic.w	r0, r0, #7
 8003288:	1ac2      	subs	r2, r0, r3
 800328a:	bf1c      	itt	ne
 800328c:	1a1b      	subne	r3, r3, r0
 800328e:	50a3      	strne	r3, [r4, r2]
 8003290:	e7af      	b.n	80031f2 <_malloc_r+0x22>
 8003292:	6862      	ldr	r2, [r4, #4]
 8003294:	42a3      	cmp	r3, r4
 8003296:	bf0c      	ite	eq
 8003298:	f8c8 2000 	streq.w	r2, [r8]
 800329c:	605a      	strne	r2, [r3, #4]
 800329e:	e7eb      	b.n	8003278 <_malloc_r+0xa8>
 80032a0:	4623      	mov	r3, r4
 80032a2:	6864      	ldr	r4, [r4, #4]
 80032a4:	e7ae      	b.n	8003204 <_malloc_r+0x34>
 80032a6:	463c      	mov	r4, r7
 80032a8:	687f      	ldr	r7, [r7, #4]
 80032aa:	e7b6      	b.n	800321a <_malloc_r+0x4a>
 80032ac:	461a      	mov	r2, r3
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	42a3      	cmp	r3, r4
 80032b2:	d1fb      	bne.n	80032ac <_malloc_r+0xdc>
 80032b4:	2300      	movs	r3, #0
 80032b6:	6053      	str	r3, [r2, #4]
 80032b8:	e7de      	b.n	8003278 <_malloc_r+0xa8>
 80032ba:	230c      	movs	r3, #12
 80032bc:	6033      	str	r3, [r6, #0]
 80032be:	4630      	mov	r0, r6
 80032c0:	f000 f80c 	bl	80032dc <__malloc_unlock>
 80032c4:	e794      	b.n	80031f0 <_malloc_r+0x20>
 80032c6:	6005      	str	r5, [r0, #0]
 80032c8:	e7d6      	b.n	8003278 <_malloc_r+0xa8>
 80032ca:	bf00      	nop
 80032cc:	2000026c 	.word	0x2000026c

080032d0 <__malloc_lock>:
 80032d0:	4801      	ldr	r0, [pc, #4]	@ (80032d8 <__malloc_lock+0x8>)
 80032d2:	f7ff bf0e 	b.w	80030f2 <__retarget_lock_acquire_recursive>
 80032d6:	bf00      	nop
 80032d8:	20000264 	.word	0x20000264

080032dc <__malloc_unlock>:
 80032dc:	4801      	ldr	r0, [pc, #4]	@ (80032e4 <__malloc_unlock+0x8>)
 80032de:	f7ff bf09 	b.w	80030f4 <__retarget_lock_release_recursive>
 80032e2:	bf00      	nop
 80032e4:	20000264 	.word	0x20000264

080032e8 <__sfputc_r>:
 80032e8:	6893      	ldr	r3, [r2, #8]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	b410      	push	{r4}
 80032f0:	6093      	str	r3, [r2, #8]
 80032f2:	da08      	bge.n	8003306 <__sfputc_r+0x1e>
 80032f4:	6994      	ldr	r4, [r2, #24]
 80032f6:	42a3      	cmp	r3, r4
 80032f8:	db01      	blt.n	80032fe <__sfputc_r+0x16>
 80032fa:	290a      	cmp	r1, #10
 80032fc:	d103      	bne.n	8003306 <__sfputc_r+0x1e>
 80032fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003302:	f000 bb6d 	b.w	80039e0 <__swbuf_r>
 8003306:	6813      	ldr	r3, [r2, #0]
 8003308:	1c58      	adds	r0, r3, #1
 800330a:	6010      	str	r0, [r2, #0]
 800330c:	7019      	strb	r1, [r3, #0]
 800330e:	4608      	mov	r0, r1
 8003310:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003314:	4770      	bx	lr

08003316 <__sfputs_r>:
 8003316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003318:	4606      	mov	r6, r0
 800331a:	460f      	mov	r7, r1
 800331c:	4614      	mov	r4, r2
 800331e:	18d5      	adds	r5, r2, r3
 8003320:	42ac      	cmp	r4, r5
 8003322:	d101      	bne.n	8003328 <__sfputs_r+0x12>
 8003324:	2000      	movs	r0, #0
 8003326:	e007      	b.n	8003338 <__sfputs_r+0x22>
 8003328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800332c:	463a      	mov	r2, r7
 800332e:	4630      	mov	r0, r6
 8003330:	f7ff ffda 	bl	80032e8 <__sfputc_r>
 8003334:	1c43      	adds	r3, r0, #1
 8003336:	d1f3      	bne.n	8003320 <__sfputs_r+0xa>
 8003338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800333c <_vfiprintf_r>:
 800333c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003340:	460d      	mov	r5, r1
 8003342:	b09d      	sub	sp, #116	@ 0x74
 8003344:	4614      	mov	r4, r2
 8003346:	4698      	mov	r8, r3
 8003348:	4606      	mov	r6, r0
 800334a:	b118      	cbz	r0, 8003354 <_vfiprintf_r+0x18>
 800334c:	6a03      	ldr	r3, [r0, #32]
 800334e:	b90b      	cbnz	r3, 8003354 <_vfiprintf_r+0x18>
 8003350:	f7ff fdca 	bl	8002ee8 <__sinit>
 8003354:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003356:	07d9      	lsls	r1, r3, #31
 8003358:	d405      	bmi.n	8003366 <_vfiprintf_r+0x2a>
 800335a:	89ab      	ldrh	r3, [r5, #12]
 800335c:	059a      	lsls	r2, r3, #22
 800335e:	d402      	bmi.n	8003366 <_vfiprintf_r+0x2a>
 8003360:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003362:	f7ff fec6 	bl	80030f2 <__retarget_lock_acquire_recursive>
 8003366:	89ab      	ldrh	r3, [r5, #12]
 8003368:	071b      	lsls	r3, r3, #28
 800336a:	d501      	bpl.n	8003370 <_vfiprintf_r+0x34>
 800336c:	692b      	ldr	r3, [r5, #16]
 800336e:	b99b      	cbnz	r3, 8003398 <_vfiprintf_r+0x5c>
 8003370:	4629      	mov	r1, r5
 8003372:	4630      	mov	r0, r6
 8003374:	f000 fb72 	bl	8003a5c <__swsetup_r>
 8003378:	b170      	cbz	r0, 8003398 <_vfiprintf_r+0x5c>
 800337a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800337c:	07dc      	lsls	r4, r3, #31
 800337e:	d504      	bpl.n	800338a <_vfiprintf_r+0x4e>
 8003380:	f04f 30ff 	mov.w	r0, #4294967295
 8003384:	b01d      	add	sp, #116	@ 0x74
 8003386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800338a:	89ab      	ldrh	r3, [r5, #12]
 800338c:	0598      	lsls	r0, r3, #22
 800338e:	d4f7      	bmi.n	8003380 <_vfiprintf_r+0x44>
 8003390:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003392:	f7ff feaf 	bl	80030f4 <__retarget_lock_release_recursive>
 8003396:	e7f3      	b.n	8003380 <_vfiprintf_r+0x44>
 8003398:	2300      	movs	r3, #0
 800339a:	9309      	str	r3, [sp, #36]	@ 0x24
 800339c:	2320      	movs	r3, #32
 800339e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80033a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80033a6:	2330      	movs	r3, #48	@ 0x30
 80033a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003558 <_vfiprintf_r+0x21c>
 80033ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80033b0:	f04f 0901 	mov.w	r9, #1
 80033b4:	4623      	mov	r3, r4
 80033b6:	469a      	mov	sl, r3
 80033b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033bc:	b10a      	cbz	r2, 80033c2 <_vfiprintf_r+0x86>
 80033be:	2a25      	cmp	r2, #37	@ 0x25
 80033c0:	d1f9      	bne.n	80033b6 <_vfiprintf_r+0x7a>
 80033c2:	ebba 0b04 	subs.w	fp, sl, r4
 80033c6:	d00b      	beq.n	80033e0 <_vfiprintf_r+0xa4>
 80033c8:	465b      	mov	r3, fp
 80033ca:	4622      	mov	r2, r4
 80033cc:	4629      	mov	r1, r5
 80033ce:	4630      	mov	r0, r6
 80033d0:	f7ff ffa1 	bl	8003316 <__sfputs_r>
 80033d4:	3001      	adds	r0, #1
 80033d6:	f000 80a7 	beq.w	8003528 <_vfiprintf_r+0x1ec>
 80033da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80033dc:	445a      	add	r2, fp
 80033de:	9209      	str	r2, [sp, #36]	@ 0x24
 80033e0:	f89a 3000 	ldrb.w	r3, [sl]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 809f 	beq.w	8003528 <_vfiprintf_r+0x1ec>
 80033ea:	2300      	movs	r3, #0
 80033ec:	f04f 32ff 	mov.w	r2, #4294967295
 80033f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033f4:	f10a 0a01 	add.w	sl, sl, #1
 80033f8:	9304      	str	r3, [sp, #16]
 80033fa:	9307      	str	r3, [sp, #28]
 80033fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003400:	931a      	str	r3, [sp, #104]	@ 0x68
 8003402:	4654      	mov	r4, sl
 8003404:	2205      	movs	r2, #5
 8003406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800340a:	4853      	ldr	r0, [pc, #332]	@ (8003558 <_vfiprintf_r+0x21c>)
 800340c:	f7fc fee0 	bl	80001d0 <memchr>
 8003410:	9a04      	ldr	r2, [sp, #16]
 8003412:	b9d8      	cbnz	r0, 800344c <_vfiprintf_r+0x110>
 8003414:	06d1      	lsls	r1, r2, #27
 8003416:	bf44      	itt	mi
 8003418:	2320      	movmi	r3, #32
 800341a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800341e:	0713      	lsls	r3, r2, #28
 8003420:	bf44      	itt	mi
 8003422:	232b      	movmi	r3, #43	@ 0x2b
 8003424:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003428:	f89a 3000 	ldrb.w	r3, [sl]
 800342c:	2b2a      	cmp	r3, #42	@ 0x2a
 800342e:	d015      	beq.n	800345c <_vfiprintf_r+0x120>
 8003430:	9a07      	ldr	r2, [sp, #28]
 8003432:	4654      	mov	r4, sl
 8003434:	2000      	movs	r0, #0
 8003436:	f04f 0c0a 	mov.w	ip, #10
 800343a:	4621      	mov	r1, r4
 800343c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003440:	3b30      	subs	r3, #48	@ 0x30
 8003442:	2b09      	cmp	r3, #9
 8003444:	d94b      	bls.n	80034de <_vfiprintf_r+0x1a2>
 8003446:	b1b0      	cbz	r0, 8003476 <_vfiprintf_r+0x13a>
 8003448:	9207      	str	r2, [sp, #28]
 800344a:	e014      	b.n	8003476 <_vfiprintf_r+0x13a>
 800344c:	eba0 0308 	sub.w	r3, r0, r8
 8003450:	fa09 f303 	lsl.w	r3, r9, r3
 8003454:	4313      	orrs	r3, r2
 8003456:	9304      	str	r3, [sp, #16]
 8003458:	46a2      	mov	sl, r4
 800345a:	e7d2      	b.n	8003402 <_vfiprintf_r+0xc6>
 800345c:	9b03      	ldr	r3, [sp, #12]
 800345e:	1d19      	adds	r1, r3, #4
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	9103      	str	r1, [sp, #12]
 8003464:	2b00      	cmp	r3, #0
 8003466:	bfbb      	ittet	lt
 8003468:	425b      	neglt	r3, r3
 800346a:	f042 0202 	orrlt.w	r2, r2, #2
 800346e:	9307      	strge	r3, [sp, #28]
 8003470:	9307      	strlt	r3, [sp, #28]
 8003472:	bfb8      	it	lt
 8003474:	9204      	strlt	r2, [sp, #16]
 8003476:	7823      	ldrb	r3, [r4, #0]
 8003478:	2b2e      	cmp	r3, #46	@ 0x2e
 800347a:	d10a      	bne.n	8003492 <_vfiprintf_r+0x156>
 800347c:	7863      	ldrb	r3, [r4, #1]
 800347e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003480:	d132      	bne.n	80034e8 <_vfiprintf_r+0x1ac>
 8003482:	9b03      	ldr	r3, [sp, #12]
 8003484:	1d1a      	adds	r2, r3, #4
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	9203      	str	r2, [sp, #12]
 800348a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800348e:	3402      	adds	r4, #2
 8003490:	9305      	str	r3, [sp, #20]
 8003492:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003568 <_vfiprintf_r+0x22c>
 8003496:	7821      	ldrb	r1, [r4, #0]
 8003498:	2203      	movs	r2, #3
 800349a:	4650      	mov	r0, sl
 800349c:	f7fc fe98 	bl	80001d0 <memchr>
 80034a0:	b138      	cbz	r0, 80034b2 <_vfiprintf_r+0x176>
 80034a2:	9b04      	ldr	r3, [sp, #16]
 80034a4:	eba0 000a 	sub.w	r0, r0, sl
 80034a8:	2240      	movs	r2, #64	@ 0x40
 80034aa:	4082      	lsls	r2, r0
 80034ac:	4313      	orrs	r3, r2
 80034ae:	3401      	adds	r4, #1
 80034b0:	9304      	str	r3, [sp, #16]
 80034b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034b6:	4829      	ldr	r0, [pc, #164]	@ (800355c <_vfiprintf_r+0x220>)
 80034b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80034bc:	2206      	movs	r2, #6
 80034be:	f7fc fe87 	bl	80001d0 <memchr>
 80034c2:	2800      	cmp	r0, #0
 80034c4:	d03f      	beq.n	8003546 <_vfiprintf_r+0x20a>
 80034c6:	4b26      	ldr	r3, [pc, #152]	@ (8003560 <_vfiprintf_r+0x224>)
 80034c8:	bb1b      	cbnz	r3, 8003512 <_vfiprintf_r+0x1d6>
 80034ca:	9b03      	ldr	r3, [sp, #12]
 80034cc:	3307      	adds	r3, #7
 80034ce:	f023 0307 	bic.w	r3, r3, #7
 80034d2:	3308      	adds	r3, #8
 80034d4:	9303      	str	r3, [sp, #12]
 80034d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034d8:	443b      	add	r3, r7
 80034da:	9309      	str	r3, [sp, #36]	@ 0x24
 80034dc:	e76a      	b.n	80033b4 <_vfiprintf_r+0x78>
 80034de:	fb0c 3202 	mla	r2, ip, r2, r3
 80034e2:	460c      	mov	r4, r1
 80034e4:	2001      	movs	r0, #1
 80034e6:	e7a8      	b.n	800343a <_vfiprintf_r+0xfe>
 80034e8:	2300      	movs	r3, #0
 80034ea:	3401      	adds	r4, #1
 80034ec:	9305      	str	r3, [sp, #20]
 80034ee:	4619      	mov	r1, r3
 80034f0:	f04f 0c0a 	mov.w	ip, #10
 80034f4:	4620      	mov	r0, r4
 80034f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034fa:	3a30      	subs	r2, #48	@ 0x30
 80034fc:	2a09      	cmp	r2, #9
 80034fe:	d903      	bls.n	8003508 <_vfiprintf_r+0x1cc>
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0c6      	beq.n	8003492 <_vfiprintf_r+0x156>
 8003504:	9105      	str	r1, [sp, #20]
 8003506:	e7c4      	b.n	8003492 <_vfiprintf_r+0x156>
 8003508:	fb0c 2101 	mla	r1, ip, r1, r2
 800350c:	4604      	mov	r4, r0
 800350e:	2301      	movs	r3, #1
 8003510:	e7f0      	b.n	80034f4 <_vfiprintf_r+0x1b8>
 8003512:	ab03      	add	r3, sp, #12
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	462a      	mov	r2, r5
 8003518:	4b12      	ldr	r3, [pc, #72]	@ (8003564 <_vfiprintf_r+0x228>)
 800351a:	a904      	add	r1, sp, #16
 800351c:	4630      	mov	r0, r6
 800351e:	f3af 8000 	nop.w
 8003522:	4607      	mov	r7, r0
 8003524:	1c78      	adds	r0, r7, #1
 8003526:	d1d6      	bne.n	80034d6 <_vfiprintf_r+0x19a>
 8003528:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800352a:	07d9      	lsls	r1, r3, #31
 800352c:	d405      	bmi.n	800353a <_vfiprintf_r+0x1fe>
 800352e:	89ab      	ldrh	r3, [r5, #12]
 8003530:	059a      	lsls	r2, r3, #22
 8003532:	d402      	bmi.n	800353a <_vfiprintf_r+0x1fe>
 8003534:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003536:	f7ff fddd 	bl	80030f4 <__retarget_lock_release_recursive>
 800353a:	89ab      	ldrh	r3, [r5, #12]
 800353c:	065b      	lsls	r3, r3, #25
 800353e:	f53f af1f 	bmi.w	8003380 <_vfiprintf_r+0x44>
 8003542:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003544:	e71e      	b.n	8003384 <_vfiprintf_r+0x48>
 8003546:	ab03      	add	r3, sp, #12
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	462a      	mov	r2, r5
 800354c:	4b05      	ldr	r3, [pc, #20]	@ (8003564 <_vfiprintf_r+0x228>)
 800354e:	a904      	add	r1, sp, #16
 8003550:	4630      	mov	r0, r6
 8003552:	f000 f879 	bl	8003648 <_printf_i>
 8003556:	e7e4      	b.n	8003522 <_vfiprintf_r+0x1e6>
 8003558:	08003cb4 	.word	0x08003cb4
 800355c:	08003cbe 	.word	0x08003cbe
 8003560:	00000000 	.word	0x00000000
 8003564:	08003317 	.word	0x08003317
 8003568:	08003cba 	.word	0x08003cba

0800356c <_printf_common>:
 800356c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003570:	4616      	mov	r6, r2
 8003572:	4698      	mov	r8, r3
 8003574:	688a      	ldr	r2, [r1, #8]
 8003576:	690b      	ldr	r3, [r1, #16]
 8003578:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800357c:	4293      	cmp	r3, r2
 800357e:	bfb8      	it	lt
 8003580:	4613      	movlt	r3, r2
 8003582:	6033      	str	r3, [r6, #0]
 8003584:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003588:	4607      	mov	r7, r0
 800358a:	460c      	mov	r4, r1
 800358c:	b10a      	cbz	r2, 8003592 <_printf_common+0x26>
 800358e:	3301      	adds	r3, #1
 8003590:	6033      	str	r3, [r6, #0]
 8003592:	6823      	ldr	r3, [r4, #0]
 8003594:	0699      	lsls	r1, r3, #26
 8003596:	bf42      	ittt	mi
 8003598:	6833      	ldrmi	r3, [r6, #0]
 800359a:	3302      	addmi	r3, #2
 800359c:	6033      	strmi	r3, [r6, #0]
 800359e:	6825      	ldr	r5, [r4, #0]
 80035a0:	f015 0506 	ands.w	r5, r5, #6
 80035a4:	d106      	bne.n	80035b4 <_printf_common+0x48>
 80035a6:	f104 0a19 	add.w	sl, r4, #25
 80035aa:	68e3      	ldr	r3, [r4, #12]
 80035ac:	6832      	ldr	r2, [r6, #0]
 80035ae:	1a9b      	subs	r3, r3, r2
 80035b0:	42ab      	cmp	r3, r5
 80035b2:	dc26      	bgt.n	8003602 <_printf_common+0x96>
 80035b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80035b8:	6822      	ldr	r2, [r4, #0]
 80035ba:	3b00      	subs	r3, #0
 80035bc:	bf18      	it	ne
 80035be:	2301      	movne	r3, #1
 80035c0:	0692      	lsls	r2, r2, #26
 80035c2:	d42b      	bmi.n	800361c <_printf_common+0xb0>
 80035c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80035c8:	4641      	mov	r1, r8
 80035ca:	4638      	mov	r0, r7
 80035cc:	47c8      	blx	r9
 80035ce:	3001      	adds	r0, #1
 80035d0:	d01e      	beq.n	8003610 <_printf_common+0xa4>
 80035d2:	6823      	ldr	r3, [r4, #0]
 80035d4:	6922      	ldr	r2, [r4, #16]
 80035d6:	f003 0306 	and.w	r3, r3, #6
 80035da:	2b04      	cmp	r3, #4
 80035dc:	bf02      	ittt	eq
 80035de:	68e5      	ldreq	r5, [r4, #12]
 80035e0:	6833      	ldreq	r3, [r6, #0]
 80035e2:	1aed      	subeq	r5, r5, r3
 80035e4:	68a3      	ldr	r3, [r4, #8]
 80035e6:	bf0c      	ite	eq
 80035e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035ec:	2500      	movne	r5, #0
 80035ee:	4293      	cmp	r3, r2
 80035f0:	bfc4      	itt	gt
 80035f2:	1a9b      	subgt	r3, r3, r2
 80035f4:	18ed      	addgt	r5, r5, r3
 80035f6:	2600      	movs	r6, #0
 80035f8:	341a      	adds	r4, #26
 80035fa:	42b5      	cmp	r5, r6
 80035fc:	d11a      	bne.n	8003634 <_printf_common+0xc8>
 80035fe:	2000      	movs	r0, #0
 8003600:	e008      	b.n	8003614 <_printf_common+0xa8>
 8003602:	2301      	movs	r3, #1
 8003604:	4652      	mov	r2, sl
 8003606:	4641      	mov	r1, r8
 8003608:	4638      	mov	r0, r7
 800360a:	47c8      	blx	r9
 800360c:	3001      	adds	r0, #1
 800360e:	d103      	bne.n	8003618 <_printf_common+0xac>
 8003610:	f04f 30ff 	mov.w	r0, #4294967295
 8003614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003618:	3501      	adds	r5, #1
 800361a:	e7c6      	b.n	80035aa <_printf_common+0x3e>
 800361c:	18e1      	adds	r1, r4, r3
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	2030      	movs	r0, #48	@ 0x30
 8003622:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003626:	4422      	add	r2, r4
 8003628:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800362c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003630:	3302      	adds	r3, #2
 8003632:	e7c7      	b.n	80035c4 <_printf_common+0x58>
 8003634:	2301      	movs	r3, #1
 8003636:	4622      	mov	r2, r4
 8003638:	4641      	mov	r1, r8
 800363a:	4638      	mov	r0, r7
 800363c:	47c8      	blx	r9
 800363e:	3001      	adds	r0, #1
 8003640:	d0e6      	beq.n	8003610 <_printf_common+0xa4>
 8003642:	3601      	adds	r6, #1
 8003644:	e7d9      	b.n	80035fa <_printf_common+0x8e>
	...

08003648 <_printf_i>:
 8003648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800364c:	7e0f      	ldrb	r7, [r1, #24]
 800364e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003650:	2f78      	cmp	r7, #120	@ 0x78
 8003652:	4691      	mov	r9, r2
 8003654:	4680      	mov	r8, r0
 8003656:	460c      	mov	r4, r1
 8003658:	469a      	mov	sl, r3
 800365a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800365e:	d807      	bhi.n	8003670 <_printf_i+0x28>
 8003660:	2f62      	cmp	r7, #98	@ 0x62
 8003662:	d80a      	bhi.n	800367a <_printf_i+0x32>
 8003664:	2f00      	cmp	r7, #0
 8003666:	f000 80d2 	beq.w	800380e <_printf_i+0x1c6>
 800366a:	2f58      	cmp	r7, #88	@ 0x58
 800366c:	f000 80b9 	beq.w	80037e2 <_printf_i+0x19a>
 8003670:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003674:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003678:	e03a      	b.n	80036f0 <_printf_i+0xa8>
 800367a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800367e:	2b15      	cmp	r3, #21
 8003680:	d8f6      	bhi.n	8003670 <_printf_i+0x28>
 8003682:	a101      	add	r1, pc, #4	@ (adr r1, 8003688 <_printf_i+0x40>)
 8003684:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003688:	080036e1 	.word	0x080036e1
 800368c:	080036f5 	.word	0x080036f5
 8003690:	08003671 	.word	0x08003671
 8003694:	08003671 	.word	0x08003671
 8003698:	08003671 	.word	0x08003671
 800369c:	08003671 	.word	0x08003671
 80036a0:	080036f5 	.word	0x080036f5
 80036a4:	08003671 	.word	0x08003671
 80036a8:	08003671 	.word	0x08003671
 80036ac:	08003671 	.word	0x08003671
 80036b0:	08003671 	.word	0x08003671
 80036b4:	080037f5 	.word	0x080037f5
 80036b8:	0800371f 	.word	0x0800371f
 80036bc:	080037af 	.word	0x080037af
 80036c0:	08003671 	.word	0x08003671
 80036c4:	08003671 	.word	0x08003671
 80036c8:	08003817 	.word	0x08003817
 80036cc:	08003671 	.word	0x08003671
 80036d0:	0800371f 	.word	0x0800371f
 80036d4:	08003671 	.word	0x08003671
 80036d8:	08003671 	.word	0x08003671
 80036dc:	080037b7 	.word	0x080037b7
 80036e0:	6833      	ldr	r3, [r6, #0]
 80036e2:	1d1a      	adds	r2, r3, #4
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6032      	str	r2, [r6, #0]
 80036e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80036ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80036f0:	2301      	movs	r3, #1
 80036f2:	e09d      	b.n	8003830 <_printf_i+0x1e8>
 80036f4:	6833      	ldr	r3, [r6, #0]
 80036f6:	6820      	ldr	r0, [r4, #0]
 80036f8:	1d19      	adds	r1, r3, #4
 80036fa:	6031      	str	r1, [r6, #0]
 80036fc:	0606      	lsls	r6, r0, #24
 80036fe:	d501      	bpl.n	8003704 <_printf_i+0xbc>
 8003700:	681d      	ldr	r5, [r3, #0]
 8003702:	e003      	b.n	800370c <_printf_i+0xc4>
 8003704:	0645      	lsls	r5, r0, #25
 8003706:	d5fb      	bpl.n	8003700 <_printf_i+0xb8>
 8003708:	f9b3 5000 	ldrsh.w	r5, [r3]
 800370c:	2d00      	cmp	r5, #0
 800370e:	da03      	bge.n	8003718 <_printf_i+0xd0>
 8003710:	232d      	movs	r3, #45	@ 0x2d
 8003712:	426d      	negs	r5, r5
 8003714:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003718:	4859      	ldr	r0, [pc, #356]	@ (8003880 <_printf_i+0x238>)
 800371a:	230a      	movs	r3, #10
 800371c:	e011      	b.n	8003742 <_printf_i+0xfa>
 800371e:	6821      	ldr	r1, [r4, #0]
 8003720:	6833      	ldr	r3, [r6, #0]
 8003722:	0608      	lsls	r0, r1, #24
 8003724:	f853 5b04 	ldr.w	r5, [r3], #4
 8003728:	d402      	bmi.n	8003730 <_printf_i+0xe8>
 800372a:	0649      	lsls	r1, r1, #25
 800372c:	bf48      	it	mi
 800372e:	b2ad      	uxthmi	r5, r5
 8003730:	2f6f      	cmp	r7, #111	@ 0x6f
 8003732:	4853      	ldr	r0, [pc, #332]	@ (8003880 <_printf_i+0x238>)
 8003734:	6033      	str	r3, [r6, #0]
 8003736:	bf14      	ite	ne
 8003738:	230a      	movne	r3, #10
 800373a:	2308      	moveq	r3, #8
 800373c:	2100      	movs	r1, #0
 800373e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003742:	6866      	ldr	r6, [r4, #4]
 8003744:	60a6      	str	r6, [r4, #8]
 8003746:	2e00      	cmp	r6, #0
 8003748:	bfa2      	ittt	ge
 800374a:	6821      	ldrge	r1, [r4, #0]
 800374c:	f021 0104 	bicge.w	r1, r1, #4
 8003750:	6021      	strge	r1, [r4, #0]
 8003752:	b90d      	cbnz	r5, 8003758 <_printf_i+0x110>
 8003754:	2e00      	cmp	r6, #0
 8003756:	d04b      	beq.n	80037f0 <_printf_i+0x1a8>
 8003758:	4616      	mov	r6, r2
 800375a:	fbb5 f1f3 	udiv	r1, r5, r3
 800375e:	fb03 5711 	mls	r7, r3, r1, r5
 8003762:	5dc7      	ldrb	r7, [r0, r7]
 8003764:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003768:	462f      	mov	r7, r5
 800376a:	42bb      	cmp	r3, r7
 800376c:	460d      	mov	r5, r1
 800376e:	d9f4      	bls.n	800375a <_printf_i+0x112>
 8003770:	2b08      	cmp	r3, #8
 8003772:	d10b      	bne.n	800378c <_printf_i+0x144>
 8003774:	6823      	ldr	r3, [r4, #0]
 8003776:	07df      	lsls	r7, r3, #31
 8003778:	d508      	bpl.n	800378c <_printf_i+0x144>
 800377a:	6923      	ldr	r3, [r4, #16]
 800377c:	6861      	ldr	r1, [r4, #4]
 800377e:	4299      	cmp	r1, r3
 8003780:	bfde      	ittt	le
 8003782:	2330      	movle	r3, #48	@ 0x30
 8003784:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003788:	f106 36ff 	addle.w	r6, r6, #4294967295
 800378c:	1b92      	subs	r2, r2, r6
 800378e:	6122      	str	r2, [r4, #16]
 8003790:	f8cd a000 	str.w	sl, [sp]
 8003794:	464b      	mov	r3, r9
 8003796:	aa03      	add	r2, sp, #12
 8003798:	4621      	mov	r1, r4
 800379a:	4640      	mov	r0, r8
 800379c:	f7ff fee6 	bl	800356c <_printf_common>
 80037a0:	3001      	adds	r0, #1
 80037a2:	d14a      	bne.n	800383a <_printf_i+0x1f2>
 80037a4:	f04f 30ff 	mov.w	r0, #4294967295
 80037a8:	b004      	add	sp, #16
 80037aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037ae:	6823      	ldr	r3, [r4, #0]
 80037b0:	f043 0320 	orr.w	r3, r3, #32
 80037b4:	6023      	str	r3, [r4, #0]
 80037b6:	4833      	ldr	r0, [pc, #204]	@ (8003884 <_printf_i+0x23c>)
 80037b8:	2778      	movs	r7, #120	@ 0x78
 80037ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	6831      	ldr	r1, [r6, #0]
 80037c2:	061f      	lsls	r7, r3, #24
 80037c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80037c8:	d402      	bmi.n	80037d0 <_printf_i+0x188>
 80037ca:	065f      	lsls	r7, r3, #25
 80037cc:	bf48      	it	mi
 80037ce:	b2ad      	uxthmi	r5, r5
 80037d0:	6031      	str	r1, [r6, #0]
 80037d2:	07d9      	lsls	r1, r3, #31
 80037d4:	bf44      	itt	mi
 80037d6:	f043 0320 	orrmi.w	r3, r3, #32
 80037da:	6023      	strmi	r3, [r4, #0]
 80037dc:	b11d      	cbz	r5, 80037e6 <_printf_i+0x19e>
 80037de:	2310      	movs	r3, #16
 80037e0:	e7ac      	b.n	800373c <_printf_i+0xf4>
 80037e2:	4827      	ldr	r0, [pc, #156]	@ (8003880 <_printf_i+0x238>)
 80037e4:	e7e9      	b.n	80037ba <_printf_i+0x172>
 80037e6:	6823      	ldr	r3, [r4, #0]
 80037e8:	f023 0320 	bic.w	r3, r3, #32
 80037ec:	6023      	str	r3, [r4, #0]
 80037ee:	e7f6      	b.n	80037de <_printf_i+0x196>
 80037f0:	4616      	mov	r6, r2
 80037f2:	e7bd      	b.n	8003770 <_printf_i+0x128>
 80037f4:	6833      	ldr	r3, [r6, #0]
 80037f6:	6825      	ldr	r5, [r4, #0]
 80037f8:	6961      	ldr	r1, [r4, #20]
 80037fa:	1d18      	adds	r0, r3, #4
 80037fc:	6030      	str	r0, [r6, #0]
 80037fe:	062e      	lsls	r6, r5, #24
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	d501      	bpl.n	8003808 <_printf_i+0x1c0>
 8003804:	6019      	str	r1, [r3, #0]
 8003806:	e002      	b.n	800380e <_printf_i+0x1c6>
 8003808:	0668      	lsls	r0, r5, #25
 800380a:	d5fb      	bpl.n	8003804 <_printf_i+0x1bc>
 800380c:	8019      	strh	r1, [r3, #0]
 800380e:	2300      	movs	r3, #0
 8003810:	6123      	str	r3, [r4, #16]
 8003812:	4616      	mov	r6, r2
 8003814:	e7bc      	b.n	8003790 <_printf_i+0x148>
 8003816:	6833      	ldr	r3, [r6, #0]
 8003818:	1d1a      	adds	r2, r3, #4
 800381a:	6032      	str	r2, [r6, #0]
 800381c:	681e      	ldr	r6, [r3, #0]
 800381e:	6862      	ldr	r2, [r4, #4]
 8003820:	2100      	movs	r1, #0
 8003822:	4630      	mov	r0, r6
 8003824:	f7fc fcd4 	bl	80001d0 <memchr>
 8003828:	b108      	cbz	r0, 800382e <_printf_i+0x1e6>
 800382a:	1b80      	subs	r0, r0, r6
 800382c:	6060      	str	r0, [r4, #4]
 800382e:	6863      	ldr	r3, [r4, #4]
 8003830:	6123      	str	r3, [r4, #16]
 8003832:	2300      	movs	r3, #0
 8003834:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003838:	e7aa      	b.n	8003790 <_printf_i+0x148>
 800383a:	6923      	ldr	r3, [r4, #16]
 800383c:	4632      	mov	r2, r6
 800383e:	4649      	mov	r1, r9
 8003840:	4640      	mov	r0, r8
 8003842:	47d0      	blx	sl
 8003844:	3001      	adds	r0, #1
 8003846:	d0ad      	beq.n	80037a4 <_printf_i+0x15c>
 8003848:	6823      	ldr	r3, [r4, #0]
 800384a:	079b      	lsls	r3, r3, #30
 800384c:	d413      	bmi.n	8003876 <_printf_i+0x22e>
 800384e:	68e0      	ldr	r0, [r4, #12]
 8003850:	9b03      	ldr	r3, [sp, #12]
 8003852:	4298      	cmp	r0, r3
 8003854:	bfb8      	it	lt
 8003856:	4618      	movlt	r0, r3
 8003858:	e7a6      	b.n	80037a8 <_printf_i+0x160>
 800385a:	2301      	movs	r3, #1
 800385c:	4632      	mov	r2, r6
 800385e:	4649      	mov	r1, r9
 8003860:	4640      	mov	r0, r8
 8003862:	47d0      	blx	sl
 8003864:	3001      	adds	r0, #1
 8003866:	d09d      	beq.n	80037a4 <_printf_i+0x15c>
 8003868:	3501      	adds	r5, #1
 800386a:	68e3      	ldr	r3, [r4, #12]
 800386c:	9903      	ldr	r1, [sp, #12]
 800386e:	1a5b      	subs	r3, r3, r1
 8003870:	42ab      	cmp	r3, r5
 8003872:	dcf2      	bgt.n	800385a <_printf_i+0x212>
 8003874:	e7eb      	b.n	800384e <_printf_i+0x206>
 8003876:	2500      	movs	r5, #0
 8003878:	f104 0619 	add.w	r6, r4, #25
 800387c:	e7f5      	b.n	800386a <_printf_i+0x222>
 800387e:	bf00      	nop
 8003880:	08003cc5 	.word	0x08003cc5
 8003884:	08003cd6 	.word	0x08003cd6

08003888 <__sflush_r>:
 8003888:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800388c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003890:	0716      	lsls	r6, r2, #28
 8003892:	4605      	mov	r5, r0
 8003894:	460c      	mov	r4, r1
 8003896:	d454      	bmi.n	8003942 <__sflush_r+0xba>
 8003898:	684b      	ldr	r3, [r1, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	dc02      	bgt.n	80038a4 <__sflush_r+0x1c>
 800389e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	dd48      	ble.n	8003936 <__sflush_r+0xae>
 80038a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80038a6:	2e00      	cmp	r6, #0
 80038a8:	d045      	beq.n	8003936 <__sflush_r+0xae>
 80038aa:	2300      	movs	r3, #0
 80038ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80038b0:	682f      	ldr	r7, [r5, #0]
 80038b2:	6a21      	ldr	r1, [r4, #32]
 80038b4:	602b      	str	r3, [r5, #0]
 80038b6:	d030      	beq.n	800391a <__sflush_r+0x92>
 80038b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80038ba:	89a3      	ldrh	r3, [r4, #12]
 80038bc:	0759      	lsls	r1, r3, #29
 80038be:	d505      	bpl.n	80038cc <__sflush_r+0x44>
 80038c0:	6863      	ldr	r3, [r4, #4]
 80038c2:	1ad2      	subs	r2, r2, r3
 80038c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80038c6:	b10b      	cbz	r3, 80038cc <__sflush_r+0x44>
 80038c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80038ca:	1ad2      	subs	r2, r2, r3
 80038cc:	2300      	movs	r3, #0
 80038ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80038d0:	6a21      	ldr	r1, [r4, #32]
 80038d2:	4628      	mov	r0, r5
 80038d4:	47b0      	blx	r6
 80038d6:	1c43      	adds	r3, r0, #1
 80038d8:	89a3      	ldrh	r3, [r4, #12]
 80038da:	d106      	bne.n	80038ea <__sflush_r+0x62>
 80038dc:	6829      	ldr	r1, [r5, #0]
 80038de:	291d      	cmp	r1, #29
 80038e0:	d82b      	bhi.n	800393a <__sflush_r+0xb2>
 80038e2:	4a2a      	ldr	r2, [pc, #168]	@ (800398c <__sflush_r+0x104>)
 80038e4:	410a      	asrs	r2, r1
 80038e6:	07d6      	lsls	r6, r2, #31
 80038e8:	d427      	bmi.n	800393a <__sflush_r+0xb2>
 80038ea:	2200      	movs	r2, #0
 80038ec:	6062      	str	r2, [r4, #4]
 80038ee:	04d9      	lsls	r1, r3, #19
 80038f0:	6922      	ldr	r2, [r4, #16]
 80038f2:	6022      	str	r2, [r4, #0]
 80038f4:	d504      	bpl.n	8003900 <__sflush_r+0x78>
 80038f6:	1c42      	adds	r2, r0, #1
 80038f8:	d101      	bne.n	80038fe <__sflush_r+0x76>
 80038fa:	682b      	ldr	r3, [r5, #0]
 80038fc:	b903      	cbnz	r3, 8003900 <__sflush_r+0x78>
 80038fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8003900:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003902:	602f      	str	r7, [r5, #0]
 8003904:	b1b9      	cbz	r1, 8003936 <__sflush_r+0xae>
 8003906:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800390a:	4299      	cmp	r1, r3
 800390c:	d002      	beq.n	8003914 <__sflush_r+0x8c>
 800390e:	4628      	mov	r0, r5
 8003910:	f7ff fbf2 	bl	80030f8 <_free_r>
 8003914:	2300      	movs	r3, #0
 8003916:	6363      	str	r3, [r4, #52]	@ 0x34
 8003918:	e00d      	b.n	8003936 <__sflush_r+0xae>
 800391a:	2301      	movs	r3, #1
 800391c:	4628      	mov	r0, r5
 800391e:	47b0      	blx	r6
 8003920:	4602      	mov	r2, r0
 8003922:	1c50      	adds	r0, r2, #1
 8003924:	d1c9      	bne.n	80038ba <__sflush_r+0x32>
 8003926:	682b      	ldr	r3, [r5, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0c6      	beq.n	80038ba <__sflush_r+0x32>
 800392c:	2b1d      	cmp	r3, #29
 800392e:	d001      	beq.n	8003934 <__sflush_r+0xac>
 8003930:	2b16      	cmp	r3, #22
 8003932:	d11e      	bne.n	8003972 <__sflush_r+0xea>
 8003934:	602f      	str	r7, [r5, #0]
 8003936:	2000      	movs	r0, #0
 8003938:	e022      	b.n	8003980 <__sflush_r+0xf8>
 800393a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800393e:	b21b      	sxth	r3, r3
 8003940:	e01b      	b.n	800397a <__sflush_r+0xf2>
 8003942:	690f      	ldr	r7, [r1, #16]
 8003944:	2f00      	cmp	r7, #0
 8003946:	d0f6      	beq.n	8003936 <__sflush_r+0xae>
 8003948:	0793      	lsls	r3, r2, #30
 800394a:	680e      	ldr	r6, [r1, #0]
 800394c:	bf08      	it	eq
 800394e:	694b      	ldreq	r3, [r1, #20]
 8003950:	600f      	str	r7, [r1, #0]
 8003952:	bf18      	it	ne
 8003954:	2300      	movne	r3, #0
 8003956:	eba6 0807 	sub.w	r8, r6, r7
 800395a:	608b      	str	r3, [r1, #8]
 800395c:	f1b8 0f00 	cmp.w	r8, #0
 8003960:	dde9      	ble.n	8003936 <__sflush_r+0xae>
 8003962:	6a21      	ldr	r1, [r4, #32]
 8003964:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003966:	4643      	mov	r3, r8
 8003968:	463a      	mov	r2, r7
 800396a:	4628      	mov	r0, r5
 800396c:	47b0      	blx	r6
 800396e:	2800      	cmp	r0, #0
 8003970:	dc08      	bgt.n	8003984 <__sflush_r+0xfc>
 8003972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003976:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800397a:	81a3      	strh	r3, [r4, #12]
 800397c:	f04f 30ff 	mov.w	r0, #4294967295
 8003980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003984:	4407      	add	r7, r0
 8003986:	eba8 0800 	sub.w	r8, r8, r0
 800398a:	e7e7      	b.n	800395c <__sflush_r+0xd4>
 800398c:	dfbffffe 	.word	0xdfbffffe

08003990 <_fflush_r>:
 8003990:	b538      	push	{r3, r4, r5, lr}
 8003992:	690b      	ldr	r3, [r1, #16]
 8003994:	4605      	mov	r5, r0
 8003996:	460c      	mov	r4, r1
 8003998:	b913      	cbnz	r3, 80039a0 <_fflush_r+0x10>
 800399a:	2500      	movs	r5, #0
 800399c:	4628      	mov	r0, r5
 800399e:	bd38      	pop	{r3, r4, r5, pc}
 80039a0:	b118      	cbz	r0, 80039aa <_fflush_r+0x1a>
 80039a2:	6a03      	ldr	r3, [r0, #32]
 80039a4:	b90b      	cbnz	r3, 80039aa <_fflush_r+0x1a>
 80039a6:	f7ff fa9f 	bl	8002ee8 <__sinit>
 80039aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0f3      	beq.n	800399a <_fflush_r+0xa>
 80039b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80039b4:	07d0      	lsls	r0, r2, #31
 80039b6:	d404      	bmi.n	80039c2 <_fflush_r+0x32>
 80039b8:	0599      	lsls	r1, r3, #22
 80039ba:	d402      	bmi.n	80039c2 <_fflush_r+0x32>
 80039bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039be:	f7ff fb98 	bl	80030f2 <__retarget_lock_acquire_recursive>
 80039c2:	4628      	mov	r0, r5
 80039c4:	4621      	mov	r1, r4
 80039c6:	f7ff ff5f 	bl	8003888 <__sflush_r>
 80039ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80039cc:	07da      	lsls	r2, r3, #31
 80039ce:	4605      	mov	r5, r0
 80039d0:	d4e4      	bmi.n	800399c <_fflush_r+0xc>
 80039d2:	89a3      	ldrh	r3, [r4, #12]
 80039d4:	059b      	lsls	r3, r3, #22
 80039d6:	d4e1      	bmi.n	800399c <_fflush_r+0xc>
 80039d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039da:	f7ff fb8b 	bl	80030f4 <__retarget_lock_release_recursive>
 80039de:	e7dd      	b.n	800399c <_fflush_r+0xc>

080039e0 <__swbuf_r>:
 80039e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039e2:	460e      	mov	r6, r1
 80039e4:	4614      	mov	r4, r2
 80039e6:	4605      	mov	r5, r0
 80039e8:	b118      	cbz	r0, 80039f2 <__swbuf_r+0x12>
 80039ea:	6a03      	ldr	r3, [r0, #32]
 80039ec:	b90b      	cbnz	r3, 80039f2 <__swbuf_r+0x12>
 80039ee:	f7ff fa7b 	bl	8002ee8 <__sinit>
 80039f2:	69a3      	ldr	r3, [r4, #24]
 80039f4:	60a3      	str	r3, [r4, #8]
 80039f6:	89a3      	ldrh	r3, [r4, #12]
 80039f8:	071a      	lsls	r2, r3, #28
 80039fa:	d501      	bpl.n	8003a00 <__swbuf_r+0x20>
 80039fc:	6923      	ldr	r3, [r4, #16]
 80039fe:	b943      	cbnz	r3, 8003a12 <__swbuf_r+0x32>
 8003a00:	4621      	mov	r1, r4
 8003a02:	4628      	mov	r0, r5
 8003a04:	f000 f82a 	bl	8003a5c <__swsetup_r>
 8003a08:	b118      	cbz	r0, 8003a12 <__swbuf_r+0x32>
 8003a0a:	f04f 37ff 	mov.w	r7, #4294967295
 8003a0e:	4638      	mov	r0, r7
 8003a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a12:	6823      	ldr	r3, [r4, #0]
 8003a14:	6922      	ldr	r2, [r4, #16]
 8003a16:	1a98      	subs	r0, r3, r2
 8003a18:	6963      	ldr	r3, [r4, #20]
 8003a1a:	b2f6      	uxtb	r6, r6
 8003a1c:	4283      	cmp	r3, r0
 8003a1e:	4637      	mov	r7, r6
 8003a20:	dc05      	bgt.n	8003a2e <__swbuf_r+0x4e>
 8003a22:	4621      	mov	r1, r4
 8003a24:	4628      	mov	r0, r5
 8003a26:	f7ff ffb3 	bl	8003990 <_fflush_r>
 8003a2a:	2800      	cmp	r0, #0
 8003a2c:	d1ed      	bne.n	8003a0a <__swbuf_r+0x2a>
 8003a2e:	68a3      	ldr	r3, [r4, #8]
 8003a30:	3b01      	subs	r3, #1
 8003a32:	60a3      	str	r3, [r4, #8]
 8003a34:	6823      	ldr	r3, [r4, #0]
 8003a36:	1c5a      	adds	r2, r3, #1
 8003a38:	6022      	str	r2, [r4, #0]
 8003a3a:	701e      	strb	r6, [r3, #0]
 8003a3c:	6962      	ldr	r2, [r4, #20]
 8003a3e:	1c43      	adds	r3, r0, #1
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d004      	beq.n	8003a4e <__swbuf_r+0x6e>
 8003a44:	89a3      	ldrh	r3, [r4, #12]
 8003a46:	07db      	lsls	r3, r3, #31
 8003a48:	d5e1      	bpl.n	8003a0e <__swbuf_r+0x2e>
 8003a4a:	2e0a      	cmp	r6, #10
 8003a4c:	d1df      	bne.n	8003a0e <__swbuf_r+0x2e>
 8003a4e:	4621      	mov	r1, r4
 8003a50:	4628      	mov	r0, r5
 8003a52:	f7ff ff9d 	bl	8003990 <_fflush_r>
 8003a56:	2800      	cmp	r0, #0
 8003a58:	d0d9      	beq.n	8003a0e <__swbuf_r+0x2e>
 8003a5a:	e7d6      	b.n	8003a0a <__swbuf_r+0x2a>

08003a5c <__swsetup_r>:
 8003a5c:	b538      	push	{r3, r4, r5, lr}
 8003a5e:	4b29      	ldr	r3, [pc, #164]	@ (8003b04 <__swsetup_r+0xa8>)
 8003a60:	4605      	mov	r5, r0
 8003a62:	6818      	ldr	r0, [r3, #0]
 8003a64:	460c      	mov	r4, r1
 8003a66:	b118      	cbz	r0, 8003a70 <__swsetup_r+0x14>
 8003a68:	6a03      	ldr	r3, [r0, #32]
 8003a6a:	b90b      	cbnz	r3, 8003a70 <__swsetup_r+0x14>
 8003a6c:	f7ff fa3c 	bl	8002ee8 <__sinit>
 8003a70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a74:	0719      	lsls	r1, r3, #28
 8003a76:	d422      	bmi.n	8003abe <__swsetup_r+0x62>
 8003a78:	06da      	lsls	r2, r3, #27
 8003a7a:	d407      	bmi.n	8003a8c <__swsetup_r+0x30>
 8003a7c:	2209      	movs	r2, #9
 8003a7e:	602a      	str	r2, [r5, #0]
 8003a80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a84:	81a3      	strh	r3, [r4, #12]
 8003a86:	f04f 30ff 	mov.w	r0, #4294967295
 8003a8a:	e033      	b.n	8003af4 <__swsetup_r+0x98>
 8003a8c:	0758      	lsls	r0, r3, #29
 8003a8e:	d512      	bpl.n	8003ab6 <__swsetup_r+0x5a>
 8003a90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a92:	b141      	cbz	r1, 8003aa6 <__swsetup_r+0x4a>
 8003a94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a98:	4299      	cmp	r1, r3
 8003a9a:	d002      	beq.n	8003aa2 <__swsetup_r+0x46>
 8003a9c:	4628      	mov	r0, r5
 8003a9e:	f7ff fb2b 	bl	80030f8 <_free_r>
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	6363      	str	r3, [r4, #52]	@ 0x34
 8003aa6:	89a3      	ldrh	r3, [r4, #12]
 8003aa8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003aac:	81a3      	strh	r3, [r4, #12]
 8003aae:	2300      	movs	r3, #0
 8003ab0:	6063      	str	r3, [r4, #4]
 8003ab2:	6923      	ldr	r3, [r4, #16]
 8003ab4:	6023      	str	r3, [r4, #0]
 8003ab6:	89a3      	ldrh	r3, [r4, #12]
 8003ab8:	f043 0308 	orr.w	r3, r3, #8
 8003abc:	81a3      	strh	r3, [r4, #12]
 8003abe:	6923      	ldr	r3, [r4, #16]
 8003ac0:	b94b      	cbnz	r3, 8003ad6 <__swsetup_r+0x7a>
 8003ac2:	89a3      	ldrh	r3, [r4, #12]
 8003ac4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003ac8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003acc:	d003      	beq.n	8003ad6 <__swsetup_r+0x7a>
 8003ace:	4621      	mov	r1, r4
 8003ad0:	4628      	mov	r0, r5
 8003ad2:	f000 f84f 	bl	8003b74 <__smakebuf_r>
 8003ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ada:	f013 0201 	ands.w	r2, r3, #1
 8003ade:	d00a      	beq.n	8003af6 <__swsetup_r+0x9a>
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	60a2      	str	r2, [r4, #8]
 8003ae4:	6962      	ldr	r2, [r4, #20]
 8003ae6:	4252      	negs	r2, r2
 8003ae8:	61a2      	str	r2, [r4, #24]
 8003aea:	6922      	ldr	r2, [r4, #16]
 8003aec:	b942      	cbnz	r2, 8003b00 <__swsetup_r+0xa4>
 8003aee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003af2:	d1c5      	bne.n	8003a80 <__swsetup_r+0x24>
 8003af4:	bd38      	pop	{r3, r4, r5, pc}
 8003af6:	0799      	lsls	r1, r3, #30
 8003af8:	bf58      	it	pl
 8003afa:	6962      	ldrpl	r2, [r4, #20]
 8003afc:	60a2      	str	r2, [r4, #8]
 8003afe:	e7f4      	b.n	8003aea <__swsetup_r+0x8e>
 8003b00:	2000      	movs	r0, #0
 8003b02:	e7f7      	b.n	8003af4 <__swsetup_r+0x98>
 8003b04:	20000018 	.word	0x20000018

08003b08 <_sbrk_r>:
 8003b08:	b538      	push	{r3, r4, r5, lr}
 8003b0a:	4d06      	ldr	r5, [pc, #24]	@ (8003b24 <_sbrk_r+0x1c>)
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	4604      	mov	r4, r0
 8003b10:	4608      	mov	r0, r1
 8003b12:	602b      	str	r3, [r5, #0]
 8003b14:	f7fc fec4 	bl	80008a0 <_sbrk>
 8003b18:	1c43      	adds	r3, r0, #1
 8003b1a:	d102      	bne.n	8003b22 <_sbrk_r+0x1a>
 8003b1c:	682b      	ldr	r3, [r5, #0]
 8003b1e:	b103      	cbz	r3, 8003b22 <_sbrk_r+0x1a>
 8003b20:	6023      	str	r3, [r4, #0]
 8003b22:	bd38      	pop	{r3, r4, r5, pc}
 8003b24:	20000260 	.word	0x20000260

08003b28 <__swhatbuf_r>:
 8003b28:	b570      	push	{r4, r5, r6, lr}
 8003b2a:	460c      	mov	r4, r1
 8003b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b30:	2900      	cmp	r1, #0
 8003b32:	b096      	sub	sp, #88	@ 0x58
 8003b34:	4615      	mov	r5, r2
 8003b36:	461e      	mov	r6, r3
 8003b38:	da0d      	bge.n	8003b56 <__swhatbuf_r+0x2e>
 8003b3a:	89a3      	ldrh	r3, [r4, #12]
 8003b3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003b40:	f04f 0100 	mov.w	r1, #0
 8003b44:	bf14      	ite	ne
 8003b46:	2340      	movne	r3, #64	@ 0x40
 8003b48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003b4c:	2000      	movs	r0, #0
 8003b4e:	6031      	str	r1, [r6, #0]
 8003b50:	602b      	str	r3, [r5, #0]
 8003b52:	b016      	add	sp, #88	@ 0x58
 8003b54:	bd70      	pop	{r4, r5, r6, pc}
 8003b56:	466a      	mov	r2, sp
 8003b58:	f000 f848 	bl	8003bec <_fstat_r>
 8003b5c:	2800      	cmp	r0, #0
 8003b5e:	dbec      	blt.n	8003b3a <__swhatbuf_r+0x12>
 8003b60:	9901      	ldr	r1, [sp, #4]
 8003b62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003b66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003b6a:	4259      	negs	r1, r3
 8003b6c:	4159      	adcs	r1, r3
 8003b6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b72:	e7eb      	b.n	8003b4c <__swhatbuf_r+0x24>

08003b74 <__smakebuf_r>:
 8003b74:	898b      	ldrh	r3, [r1, #12]
 8003b76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b78:	079d      	lsls	r5, r3, #30
 8003b7a:	4606      	mov	r6, r0
 8003b7c:	460c      	mov	r4, r1
 8003b7e:	d507      	bpl.n	8003b90 <__smakebuf_r+0x1c>
 8003b80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003b84:	6023      	str	r3, [r4, #0]
 8003b86:	6123      	str	r3, [r4, #16]
 8003b88:	2301      	movs	r3, #1
 8003b8a:	6163      	str	r3, [r4, #20]
 8003b8c:	b003      	add	sp, #12
 8003b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b90:	ab01      	add	r3, sp, #4
 8003b92:	466a      	mov	r2, sp
 8003b94:	f7ff ffc8 	bl	8003b28 <__swhatbuf_r>
 8003b98:	9f00      	ldr	r7, [sp, #0]
 8003b9a:	4605      	mov	r5, r0
 8003b9c:	4639      	mov	r1, r7
 8003b9e:	4630      	mov	r0, r6
 8003ba0:	f7ff fb16 	bl	80031d0 <_malloc_r>
 8003ba4:	b948      	cbnz	r0, 8003bba <__smakebuf_r+0x46>
 8003ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003baa:	059a      	lsls	r2, r3, #22
 8003bac:	d4ee      	bmi.n	8003b8c <__smakebuf_r+0x18>
 8003bae:	f023 0303 	bic.w	r3, r3, #3
 8003bb2:	f043 0302 	orr.w	r3, r3, #2
 8003bb6:	81a3      	strh	r3, [r4, #12]
 8003bb8:	e7e2      	b.n	8003b80 <__smakebuf_r+0xc>
 8003bba:	89a3      	ldrh	r3, [r4, #12]
 8003bbc:	6020      	str	r0, [r4, #0]
 8003bbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bc2:	81a3      	strh	r3, [r4, #12]
 8003bc4:	9b01      	ldr	r3, [sp, #4]
 8003bc6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003bca:	b15b      	cbz	r3, 8003be4 <__smakebuf_r+0x70>
 8003bcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bd0:	4630      	mov	r0, r6
 8003bd2:	f000 f81d 	bl	8003c10 <_isatty_r>
 8003bd6:	b128      	cbz	r0, 8003be4 <__smakebuf_r+0x70>
 8003bd8:	89a3      	ldrh	r3, [r4, #12]
 8003bda:	f023 0303 	bic.w	r3, r3, #3
 8003bde:	f043 0301 	orr.w	r3, r3, #1
 8003be2:	81a3      	strh	r3, [r4, #12]
 8003be4:	89a3      	ldrh	r3, [r4, #12]
 8003be6:	431d      	orrs	r5, r3
 8003be8:	81a5      	strh	r5, [r4, #12]
 8003bea:	e7cf      	b.n	8003b8c <__smakebuf_r+0x18>

08003bec <_fstat_r>:
 8003bec:	b538      	push	{r3, r4, r5, lr}
 8003bee:	4d07      	ldr	r5, [pc, #28]	@ (8003c0c <_fstat_r+0x20>)
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	4604      	mov	r4, r0
 8003bf4:	4608      	mov	r0, r1
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	602b      	str	r3, [r5, #0]
 8003bfa:	f7fc fe29 	bl	8000850 <_fstat>
 8003bfe:	1c43      	adds	r3, r0, #1
 8003c00:	d102      	bne.n	8003c08 <_fstat_r+0x1c>
 8003c02:	682b      	ldr	r3, [r5, #0]
 8003c04:	b103      	cbz	r3, 8003c08 <_fstat_r+0x1c>
 8003c06:	6023      	str	r3, [r4, #0]
 8003c08:	bd38      	pop	{r3, r4, r5, pc}
 8003c0a:	bf00      	nop
 8003c0c:	20000260 	.word	0x20000260

08003c10 <_isatty_r>:
 8003c10:	b538      	push	{r3, r4, r5, lr}
 8003c12:	4d06      	ldr	r5, [pc, #24]	@ (8003c2c <_isatty_r+0x1c>)
 8003c14:	2300      	movs	r3, #0
 8003c16:	4604      	mov	r4, r0
 8003c18:	4608      	mov	r0, r1
 8003c1a:	602b      	str	r3, [r5, #0]
 8003c1c:	f7fc fe28 	bl	8000870 <_isatty>
 8003c20:	1c43      	adds	r3, r0, #1
 8003c22:	d102      	bne.n	8003c2a <_isatty_r+0x1a>
 8003c24:	682b      	ldr	r3, [r5, #0]
 8003c26:	b103      	cbz	r3, 8003c2a <_isatty_r+0x1a>
 8003c28:	6023      	str	r3, [r4, #0]
 8003c2a:	bd38      	pop	{r3, r4, r5, pc}
 8003c2c:	20000260 	.word	0x20000260

08003c30 <_init>:
 8003c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c32:	bf00      	nop
 8003c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c36:	bc08      	pop	{r3}
 8003c38:	469e      	mov	lr, r3
 8003c3a:	4770      	bx	lr

08003c3c <_fini>:
 8003c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c3e:	bf00      	nop
 8003c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c42:	bc08      	pop	{r3}
 8003c44:	469e      	mov	lr, r3
 8003c46:	4770      	bx	lr
