
Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069b8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08006b48  08006b48  00007b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d4c  08006d4c  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006d4c  08006d4c  00007d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d54  08006d54  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d54  08006d54  00007d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d58  08006d58  00007d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006d5c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  20000068  08006dc4  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  08006dc4  00008364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119f9  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026c4  00000000  00000000  00019a91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001028  00000000  00000000  0001c158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c92  00000000  00000000  0001d180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027f54  00000000  00000000  0001de12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000138cb  00000000  00000000  00045d66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4396  00000000  00000000  00059631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014d9c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d0c  00000000  00000000  0014da0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00152718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b30 	.word	0x08006b30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006b30 	.word	0x08006b30

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 fdf0 	bl	800114a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f9c9 	bl	8000900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 fb67 	bl	8000c40 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000572:	f000 fa17 	bl	80009a4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000576:	f000 fae5 	bl	8000b44 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800057a:	f000 fb31 	bl	8000be0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800057e:	2100      	movs	r1, #0
 8000580:	4892      	ldr	r0, [pc, #584]	@ (80007cc <main+0x26c>)
 8000582:	f002 fd69 	bl	8003058 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000586:	2104      	movs	r1, #4
 8000588:	4890      	ldr	r0, [pc, #576]	@ (80007cc <main+0x26c>)
 800058a:	f002 fd65 	bl	8003058 <HAL_TIM_PWM_Start>
  motor_t mot1 = {.duty    = 0,
 800058e:	4a90      	ldr	r2, [pc, #576]	@ (80007d0 <main+0x270>)
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	ca07      	ldmia	r2, {r0, r1, r2}
 8000596:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  				  .channel = 1,
				  .timer = TIM1};
  motor_t mot2 = {.duty    = 0,
 800059a:	4a8e      	ldr	r2, [pc, #568]	@ (80007d4 <main+0x274>)
 800059c:	463b      	mov	r3, r7
 800059e:	ca07      	ldmia	r2, {r0, r1, r2}
 80005a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  				  .channel = 2,
      			  .timer = TIM1};
  start_PWM(&htim1);
 80005a4:	4889      	ldr	r0, [pc, #548]	@ (80007cc <main+0x26c>)
 80005a6:	f000 fbbb 	bl	8000d20 <start_PWM>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart2,(uint8_t*) &chara,1);
 80005aa:	2201      	movs	r2, #1
 80005ac:	498a      	ldr	r1, [pc, #552]	@ (80007d8 <main+0x278>)
 80005ae:	488b      	ldr	r0, [pc, #556]	@ (80007dc <main+0x27c>)
 80005b0:	f003 fe44 	bl	800423c <HAL_UART_Receive_IT>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    	if (char_flg){
 80005b4:	4b8a      	ldr	r3, [pc, #552]	@ (80007e0 <main+0x280>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0fb      	beq.n	80005b4 <main+0x54>
    		char_flg = 0;
 80005bc:	4b88      	ldr	r3, [pc, #544]	@ (80007e0 <main+0x280>)
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]

    		HAL_UART_Transmit(&huart2,(uint8_t*) &chara,1,1);
 80005c2:	2301      	movs	r3, #1
 80005c4:	2201      	movs	r2, #1
 80005c6:	4984      	ldr	r1, [pc, #528]	@ (80007d8 <main+0x278>)
 80005c8:	4884      	ldr	r0, [pc, #528]	@ (80007dc <main+0x27c>)
 80005ca:	f003 fdad 	bl	8004128 <HAL_UART_Transmit>
    		HAL_UART_Receive_IT(&huart2,(uint8_t*) &chara,1);
 80005ce:	2201      	movs	r2, #1
 80005d0:	4981      	ldr	r1, [pc, #516]	@ (80007d8 <main+0x278>)
 80005d2:	4882      	ldr	r0, [pc, #520]	@ (80007dc <main+0x27c>)
 80005d4:	f003 fe32 	bl	800423c <HAL_UART_Receive_IT>
    		buffer[idx] = chara;
 80005d8:	4b82      	ldr	r3, [pc, #520]	@ (80007e4 <main+0x284>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a7e      	ldr	r2, [pc, #504]	@ (80007d8 <main+0x278>)
 80005de:	7811      	ldrb	r1, [r2, #0]
 80005e0:	4a81      	ldr	r2, [pc, #516]	@ (80007e8 <main+0x288>)
 80005e2:	54d1      	strb	r1, [r2, r3]
    		idx++;
 80005e4:	4b7f      	ldr	r3, [pc, #508]	@ (80007e4 <main+0x284>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	3301      	adds	r3, #1
 80005ea:	4a7e      	ldr	r2, [pc, #504]	@ (80007e4 <main+0x284>)
 80005ec:	6013      	str	r3, [r2, #0]


    		if (chara == '\177'){
 80005ee:	4b7a      	ldr	r3, [pc, #488]	@ (80007d8 <main+0x278>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80005f4:	d103      	bne.n	80005fe <main+0x9e>
    			cas = 1;
 80005f6:	4b7d      	ldr	r3, [pc, #500]	@ (80007ec <main+0x28c>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	e00a      	b.n	8000614 <main+0xb4>
    		}
    		else if (chara == '\r'){
 80005fe:	4b76      	ldr	r3, [pc, #472]	@ (80007d8 <main+0x278>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b0d      	cmp	r3, #13
 8000604:	d103      	bne.n	800060e <main+0xae>
    			cas = 2;
 8000606:	4b79      	ldr	r3, [pc, #484]	@ (80007ec <main+0x28c>)
 8000608:	2202      	movs	r2, #2
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	e002      	b.n	8000614 <main+0xb4>
    		}
    		else{
    			cas = 0;
 800060e:	4b77      	ldr	r3, [pc, #476]	@ (80007ec <main+0x28c>)
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
    		}


    		switch (cas){
 8000614:	4b75      	ldr	r3, [pc, #468]	@ (80007ec <main+0x28c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d002      	beq.n	8000622 <main+0xc2>
 800061c:	2b02      	cmp	r3, #2
 800061e:	d015      	beq.n	800064c <main+0xec>
 8000620:	e0a0      	b.n	8000764 <main+0x204>
			case 1:
				idx--;
 8000622:	4b70      	ldr	r3, [pc, #448]	@ (80007e4 <main+0x284>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	3b01      	subs	r3, #1
 8000628:	4a6e      	ldr	r2, [pc, #440]	@ (80007e4 <main+0x284>)
 800062a:	6013      	str	r3, [r2, #0]
				buffer[idx] = '\0';
 800062c:	4b6d      	ldr	r3, [pc, #436]	@ (80007e4 <main+0x284>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a6d      	ldr	r2, [pc, #436]	@ (80007e8 <main+0x288>)
 8000632:	2100      	movs	r1, #0
 8000634:	54d1      	strb	r1, [r2, r3]
				idx--;
 8000636:	4b6b      	ldr	r3, [pc, #428]	@ (80007e4 <main+0x284>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	3b01      	subs	r3, #1
 800063c:	4a69      	ldr	r2, [pc, #420]	@ (80007e4 <main+0x284>)
 800063e:	6013      	str	r3, [r2, #0]
				buffer[idx] = '\0';
 8000640:	4b68      	ldr	r3, [pc, #416]	@ (80007e4 <main+0x284>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a68      	ldr	r2, [pc, #416]	@ (80007e8 <main+0x288>)
 8000646:	2100      	movs	r1, #0
 8000648:	54d1      	strb	r1, [r2, r3]
				break;
 800064a:	e08b      	b.n	8000764 <main+0x204>
			case 2:
				if (idx != 5){
 800064c:	4b65      	ldr	r3, [pc, #404]	@ (80007e4 <main+0x284>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b05      	cmp	r3, #5
 8000652:	d003      	beq.n	800065c <main+0xfc>
					err = 1;
 8000654:	4b66      	ldr	r3, [pc, #408]	@ (80007f0 <main+0x290>)
 8000656:	2201      	movs	r2, #1
 8000658:	601a      	str	r2, [r3, #0]
					}
					ep = sprintf(error, "\nSuccess!\n");
					HAL_UART_Transmit(&huart2,error,ep,400);
					idx = 0;
				}
				break;
 800065a:	e082      	b.n	8000762 <main+0x202>
				else if (buffer[0] != 'm' && buffer[0] != 'M'){
 800065c:	4b62      	ldr	r3, [pc, #392]	@ (80007e8 <main+0x288>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b6d      	cmp	r3, #109	@ 0x6d
 8000662:	d007      	beq.n	8000674 <main+0x114>
 8000664:	4b60      	ldr	r3, [pc, #384]	@ (80007e8 <main+0x288>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b4d      	cmp	r3, #77	@ 0x4d
 800066a:	d003      	beq.n	8000674 <main+0x114>
					err = 2;
 800066c:	4b60      	ldr	r3, [pc, #384]	@ (80007f0 <main+0x290>)
 800066e:	2202      	movs	r2, #2
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	e076      	b.n	8000762 <main+0x202>
				else if (buffer[1] != '1' && buffer[1] != '2'){
 8000674:	4b5c      	ldr	r3, [pc, #368]	@ (80007e8 <main+0x288>)
 8000676:	785b      	ldrb	r3, [r3, #1]
 8000678:	2b31      	cmp	r3, #49	@ 0x31
 800067a:	d007      	beq.n	800068c <main+0x12c>
 800067c:	4b5a      	ldr	r3, [pc, #360]	@ (80007e8 <main+0x288>)
 800067e:	785b      	ldrb	r3, [r3, #1]
 8000680:	2b32      	cmp	r3, #50	@ 0x32
 8000682:	d003      	beq.n	800068c <main+0x12c>
					err = 3;
 8000684:	4b5a      	ldr	r3, [pc, #360]	@ (80007f0 <main+0x290>)
 8000686:	2203      	movs	r2, #3
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	e06a      	b.n	8000762 <main+0x202>
				else if (((buffer[3] < '0' || buffer[3] > '9') && (buffer[3] < 'A' || buffer[3] > 'F')) && ((buffer[2] < '0' || buffer[2] > '9') && (buffer[2] < 'A' || buffer[2] > 'F'))){
 800068c:	4b56      	ldr	r3, [pc, #344]	@ (80007e8 <main+0x288>)
 800068e:	78db      	ldrb	r3, [r3, #3]
 8000690:	2b2f      	cmp	r3, #47	@ 0x2f
 8000692:	d903      	bls.n	800069c <main+0x13c>
 8000694:	4b54      	ldr	r3, [pc, #336]	@ (80007e8 <main+0x288>)
 8000696:	78db      	ldrb	r3, [r3, #3]
 8000698:	2b39      	cmp	r3, #57	@ 0x39
 800069a:	d91b      	bls.n	80006d4 <main+0x174>
 800069c:	4b52      	ldr	r3, [pc, #328]	@ (80007e8 <main+0x288>)
 800069e:	78db      	ldrb	r3, [r3, #3]
 80006a0:	2b40      	cmp	r3, #64	@ 0x40
 80006a2:	d903      	bls.n	80006ac <main+0x14c>
 80006a4:	4b50      	ldr	r3, [pc, #320]	@ (80007e8 <main+0x288>)
 80006a6:	78db      	ldrb	r3, [r3, #3]
 80006a8:	2b46      	cmp	r3, #70	@ 0x46
 80006aa:	d913      	bls.n	80006d4 <main+0x174>
 80006ac:	4b4e      	ldr	r3, [pc, #312]	@ (80007e8 <main+0x288>)
 80006ae:	789b      	ldrb	r3, [r3, #2]
 80006b0:	2b2f      	cmp	r3, #47	@ 0x2f
 80006b2:	d903      	bls.n	80006bc <main+0x15c>
 80006b4:	4b4c      	ldr	r3, [pc, #304]	@ (80007e8 <main+0x288>)
 80006b6:	789b      	ldrb	r3, [r3, #2]
 80006b8:	2b39      	cmp	r3, #57	@ 0x39
 80006ba:	d90b      	bls.n	80006d4 <main+0x174>
 80006bc:	4b4a      	ldr	r3, [pc, #296]	@ (80007e8 <main+0x288>)
 80006be:	789b      	ldrb	r3, [r3, #2]
 80006c0:	2b40      	cmp	r3, #64	@ 0x40
 80006c2:	d903      	bls.n	80006cc <main+0x16c>
 80006c4:	4b48      	ldr	r3, [pc, #288]	@ (80007e8 <main+0x288>)
 80006c6:	789b      	ldrb	r3, [r3, #2]
 80006c8:	2b46      	cmp	r3, #70	@ 0x46
 80006ca:	d903      	bls.n	80006d4 <main+0x174>
					err = 4;
 80006cc:	4b48      	ldr	r3, [pc, #288]	@ (80007f0 <main+0x290>)
 80006ce:	2204      	movs	r2, #4
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	e046      	b.n	8000762 <main+0x202>
					err = 0;
 80006d4:	4b46      	ldr	r3, [pc, #280]	@ (80007f0 <main+0x290>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
					lazy[0] = buffer[2];
 80006da:	4b43      	ldr	r3, [pc, #268]	@ (80007e8 <main+0x288>)
 80006dc:	789a      	ldrb	r2, [r3, #2]
 80006de:	4b45      	ldr	r3, [pc, #276]	@ (80007f4 <main+0x294>)
 80006e0:	701a      	strb	r2, [r3, #0]
					lazy[1] = buffer[3];
 80006e2:	4b41      	ldr	r3, [pc, #260]	@ (80007e8 <main+0x288>)
 80006e4:	78da      	ldrb	r2, [r3, #3]
 80006e6:	4b43      	ldr	r3, [pc, #268]	@ (80007f4 <main+0x294>)
 80006e8:	705a      	strb	r2, [r3, #1]
					dc = strtol(lazy,&p,16);
 80006ea:	2210      	movs	r2, #16
 80006ec:	4942      	ldr	r1, [pc, #264]	@ (80007f8 <main+0x298>)
 80006ee:	4841      	ldr	r0, [pc, #260]	@ (80007f4 <main+0x294>)
 80006f0:	f005 f90e 	bl	8005910 <strtol>
 80006f4:	4603      	mov	r3, r0
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	4b40      	ldr	r3, [pc, #256]	@ (80007fc <main+0x29c>)
 80006fa:	701a      	strb	r2, [r3, #0]
					if (dc > 127){
 80006fc:	4b3f      	ldr	r3, [pc, #252]	@ (80007fc <main+0x29c>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	b25b      	sxtb	r3, r3
 8000702:	2b00      	cmp	r3, #0
 8000704:	da03      	bge.n	800070e <main+0x1ae>
						dc -= 256;
 8000706:	4b3d      	ldr	r3, [pc, #244]	@ (80007fc <main+0x29c>)
 8000708:	781a      	ldrb	r2, [r3, #0]
 800070a:	4b3c      	ldr	r3, [pc, #240]	@ (80007fc <main+0x29c>)
 800070c:	701a      	strb	r2, [r3, #0]
					if (buffer[1] - '0' == 1){
 800070e:	4b36      	ldr	r3, [pc, #216]	@ (80007e8 <main+0x288>)
 8000710:	785b      	ldrb	r3, [r3, #1]
 8000712:	2b31      	cmp	r3, #49	@ 0x31
 8000714:	d109      	bne.n	800072a <main+0x1ca>
						set_duty(&mot1, dc);
 8000716:	4b39      	ldr	r3, [pc, #228]	@ (80007fc <main+0x29c>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	461a      	mov	r2, r3
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	4611      	mov	r1, r2
 8000722:	4618      	mov	r0, r3
 8000724:	f000 faba 	bl	8000c9c <set_duty>
 8000728:	e007      	b.n	800073a <main+0x1da>
						set_duty(&mot2, dc);
 800072a:	4b34      	ldr	r3, [pc, #208]	@ (80007fc <main+0x29c>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	461a      	mov	r2, r3
 8000730:	463b      	mov	r3, r7
 8000732:	4611      	mov	r1, r2
 8000734:	4618      	mov	r0, r3
 8000736:	f000 fab1 	bl	8000c9c <set_duty>
					ep = sprintf(error, "\nSuccess!\n");
 800073a:	4931      	ldr	r1, [pc, #196]	@ (8000800 <main+0x2a0>)
 800073c:	4831      	ldr	r0, [pc, #196]	@ (8000804 <main+0x2a4>)
 800073e:	f005 f9c5 	bl	8005acc <siprintf>
 8000742:	4603      	mov	r3, r0
 8000744:	4a30      	ldr	r2, [pc, #192]	@ (8000808 <main+0x2a8>)
 8000746:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit(&huart2,error,ep,400);
 8000748:	4b2f      	ldr	r3, [pc, #188]	@ (8000808 <main+0x2a8>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	b29a      	uxth	r2, r3
 800074e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000752:	492c      	ldr	r1, [pc, #176]	@ (8000804 <main+0x2a4>)
 8000754:	4821      	ldr	r0, [pc, #132]	@ (80007dc <main+0x27c>)
 8000756:	f003 fce7 	bl	8004128 <HAL_UART_Transmit>
					idx = 0;
 800075a:	4b22      	ldr	r3, [pc, #136]	@ (80007e4 <main+0x284>)
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
				break;
 8000760:	e7ff      	b.n	8000762 <main+0x202>
 8000762:	bf00      	nop

    		}
    		switch (err){
 8000764:	4b22      	ldr	r3, [pc, #136]	@ (80007f0 <main+0x290>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	3b01      	subs	r3, #1
 800076a:	2b03      	cmp	r3, #3
 800076c:	f63f af22 	bhi.w	80005b4 <main+0x54>
 8000770:	a201      	add	r2, pc, #4	@ (adr r2, 8000778 <main+0x218>)
 8000772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000776:	bf00      	nop
 8000778:	08000789 	.word	0x08000789
 800077c:	08000811 	.word	0x08000811
 8000780:	08000855 	.word	0x08000855
 8000784:	08000899 	.word	0x08000899
				case 1:
					ep = sprintf(error, "\nError 1\n\r");
 8000788:	4920      	ldr	r1, [pc, #128]	@ (800080c <main+0x2ac>)
 800078a:	481e      	ldr	r0, [pc, #120]	@ (8000804 <main+0x2a4>)
 800078c:	f005 f99e 	bl	8005acc <siprintf>
 8000790:	4603      	mov	r3, r0
 8000792:	4a1d      	ldr	r2, [pc, #116]	@ (8000808 <main+0x2a8>)
 8000794:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit(&huart2,error,ep,400);
 8000796:	4b1c      	ldr	r3, [pc, #112]	@ (8000808 <main+0x2a8>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	b29a      	uxth	r2, r3
 800079c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80007a0:	4918      	ldr	r1, [pc, #96]	@ (8000804 <main+0x2a4>)
 80007a2:	480e      	ldr	r0, [pc, #56]	@ (80007dc <main+0x27c>)
 80007a4:	f003 fcc0 	bl	8004128 <HAL_UART_Transmit>
					idx = 0;
 80007a8:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <main+0x284>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
					err = 0;
 80007ae:	4b10      	ldr	r3, [pc, #64]	@ (80007f0 <main+0x290>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
					set_duty(&mot1,0);
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 fa6e 	bl	8000c9c <set_duty>
					set_duty(&mot2,0);
 80007c0:	463b      	mov	r3, r7
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 fa69 	bl	8000c9c <set_duty>
					break;
 80007ca:	e088      	b.n	80008de <main+0x37e>
 80007cc:	20000084 	.word	0x20000084
 80007d0:	08006b84 	.word	0x08006b84
 80007d4:	08006b90 	.word	0x08006b90
 80007d8:	2000020c 	.word	0x2000020c
 80007dc:	2000011c 	.word	0x2000011c
 80007e0:	200001a4 	.word	0x200001a4
 80007e4:	200001a8 	.word	0x200001a8
 80007e8:	200001f8 	.word	0x200001f8
 80007ec:	200001ac 	.word	0x200001ac
 80007f0:	200001b0 	.word	0x200001b0
 80007f4:	200001f4 	.word	0x200001f4
 80007f8:	200001b8 	.word	0x200001b8
 80007fc:	200001b4 	.word	0x200001b4
 8000800:	08006b48 	.word	0x08006b48
 8000804:	200001c0 	.word	0x200001c0
 8000808:	200001bc 	.word	0x200001bc
 800080c:	08006b54 	.word	0x08006b54
				case 2:
					ep = sprintf(error, "\nError 2\n\r");
 8000810:	4933      	ldr	r1, [pc, #204]	@ (80008e0 <main+0x380>)
 8000812:	4834      	ldr	r0, [pc, #208]	@ (80008e4 <main+0x384>)
 8000814:	f005 f95a 	bl	8005acc <siprintf>
 8000818:	4603      	mov	r3, r0
 800081a:	4a33      	ldr	r2, [pc, #204]	@ (80008e8 <main+0x388>)
 800081c:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit(&huart2,error,ep,400);
 800081e:	4b32      	ldr	r3, [pc, #200]	@ (80008e8 <main+0x388>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	b29a      	uxth	r2, r3
 8000824:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000828:	492e      	ldr	r1, [pc, #184]	@ (80008e4 <main+0x384>)
 800082a:	4830      	ldr	r0, [pc, #192]	@ (80008ec <main+0x38c>)
 800082c:	f003 fc7c 	bl	8004128 <HAL_UART_Transmit>
					idx = 0;
 8000830:	4b2f      	ldr	r3, [pc, #188]	@ (80008f0 <main+0x390>)
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
					err = 0;
 8000836:	4b2f      	ldr	r3, [pc, #188]	@ (80008f4 <main+0x394>)
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
					set_duty(&mot1,0);
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f000 fa2a 	bl	8000c9c <set_duty>
					set_duty(&mot2,0);
 8000848:	463b      	mov	r3, r7
 800084a:	2100      	movs	r1, #0
 800084c:	4618      	mov	r0, r3
 800084e:	f000 fa25 	bl	8000c9c <set_duty>
					break;
 8000852:	e044      	b.n	80008de <main+0x37e>
				case 3:
					ep = sprintf(error, "\nError 3\n\r");
 8000854:	4928      	ldr	r1, [pc, #160]	@ (80008f8 <main+0x398>)
 8000856:	4823      	ldr	r0, [pc, #140]	@ (80008e4 <main+0x384>)
 8000858:	f005 f938 	bl	8005acc <siprintf>
 800085c:	4603      	mov	r3, r0
 800085e:	4a22      	ldr	r2, [pc, #136]	@ (80008e8 <main+0x388>)
 8000860:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit(&huart2,error,ep,400);
 8000862:	4b21      	ldr	r3, [pc, #132]	@ (80008e8 <main+0x388>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	b29a      	uxth	r2, r3
 8000868:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800086c:	491d      	ldr	r1, [pc, #116]	@ (80008e4 <main+0x384>)
 800086e:	481f      	ldr	r0, [pc, #124]	@ (80008ec <main+0x38c>)
 8000870:	f003 fc5a 	bl	8004128 <HAL_UART_Transmit>
					idx = 0;
 8000874:	4b1e      	ldr	r3, [pc, #120]	@ (80008f0 <main+0x390>)
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
					err = 0;
 800087a:	4b1e      	ldr	r3, [pc, #120]	@ (80008f4 <main+0x394>)
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
					set_duty(&mot1,0);
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f000 fa08 	bl	8000c9c <set_duty>
					set_duty(&mot2,0);
 800088c:	463b      	mov	r3, r7
 800088e:	2100      	movs	r1, #0
 8000890:	4618      	mov	r0, r3
 8000892:	f000 fa03 	bl	8000c9c <set_duty>
					break;
 8000896:	e022      	b.n	80008de <main+0x37e>
				case 4:
					ep = sprintf(error, "\nError 4\n\r");
 8000898:	4918      	ldr	r1, [pc, #96]	@ (80008fc <main+0x39c>)
 800089a:	4812      	ldr	r0, [pc, #72]	@ (80008e4 <main+0x384>)
 800089c:	f005 f916 	bl	8005acc <siprintf>
 80008a0:	4603      	mov	r3, r0
 80008a2:	4a11      	ldr	r2, [pc, #68]	@ (80008e8 <main+0x388>)
 80008a4:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit(&huart2,error,ep,400);
 80008a6:	4b10      	ldr	r3, [pc, #64]	@ (80008e8 <main+0x388>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80008b0:	490c      	ldr	r1, [pc, #48]	@ (80008e4 <main+0x384>)
 80008b2:	480e      	ldr	r0, [pc, #56]	@ (80008ec <main+0x38c>)
 80008b4:	f003 fc38 	bl	8004128 <HAL_UART_Transmit>
					idx = 0;
 80008b8:	4b0d      	ldr	r3, [pc, #52]	@ (80008f0 <main+0x390>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
					err = 0;
 80008be:	4b0d      	ldr	r3, [pc, #52]	@ (80008f4 <main+0x394>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
					set_duty(&mot1,0);
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 f9e6 	bl	8000c9c <set_duty>
					set_duty(&mot2,0);
 80008d0:	463b      	mov	r3, r7
 80008d2:	2100      	movs	r1, #0
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 f9e1 	bl	8000c9c <set_duty>
					break;
 80008da:	bf00      	nop
 80008dc:	e66a      	b.n	80005b4 <main+0x54>
    	if (char_flg){
 80008de:	e669      	b.n	80005b4 <main+0x54>
 80008e0:	08006b60 	.word	0x08006b60
 80008e4:	200001c0 	.word	0x200001c0
 80008e8:	200001bc 	.word	0x200001bc
 80008ec:	2000011c 	.word	0x2000011c
 80008f0:	200001a8 	.word	0x200001a8
 80008f4:	200001b0 	.word	0x200001b0
 80008f8:	08006b6c 	.word	0x08006b6c
 80008fc:	08006b78 	.word	0x08006b78

08000900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b096      	sub	sp, #88	@ 0x58
 8000904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	2244      	movs	r2, #68	@ 0x44
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f005 f93f 	bl	8005b92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000914:	463b      	mov	r3, r7
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000922:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000926:	f000 ffcd 	bl	80018c4 <HAL_PWREx_ControlVoltageScaling>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000930:	f000 f9ae 	bl	8000c90 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000934:	2310      	movs	r3, #16
 8000936:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000938:	2301      	movs	r3, #1
 800093a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000940:	2360      	movs	r3, #96	@ 0x60
 8000942:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000944:	2302      	movs	r3, #2
 8000946:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000948:	2301      	movs	r3, #1
 800094a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800094c:	2301      	movs	r3, #1
 800094e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000950:	2328      	movs	r3, #40	@ 0x28
 8000952:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000954:	2307      	movs	r3, #7
 8000956:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000958:	2302      	movs	r3, #2
 800095a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800095c:	2302      	movs	r3, #2
 800095e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	4618      	mov	r0, r3
 8000966:	f001 f803 	bl	8001970 <HAL_RCC_OscConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000970:	f000 f98e 	bl	8000c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000974:	230f      	movs	r3, #15
 8000976:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000978:	2303      	movs	r3, #3
 800097a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000980:	2300      	movs	r3, #0
 8000982:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000988:	463b      	mov	r3, r7
 800098a:	2104      	movs	r1, #4
 800098c:	4618      	mov	r0, r3
 800098e:	f001 fbcb 	bl	8002128 <HAL_RCC_ClockConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000998:	f000 f97a 	bl	8000c90 <Error_Handler>
  }
}
 800099c:	bf00      	nop
 800099e:	3758      	adds	r7, #88	@ 0x58
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b09a      	sub	sp, #104	@ 0x68
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009aa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
 80009d4:	615a      	str	r2, [r3, #20]
 80009d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	222c      	movs	r2, #44	@ 0x2c
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f005 f8d7 	bl	8005b92 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009e4:	4b55      	ldr	r3, [pc, #340]	@ (8000b3c <MX_TIM1_Init+0x198>)
 80009e6:	4a56      	ldr	r2, [pc, #344]	@ (8000b40 <MX_TIM1_Init+0x19c>)
 80009e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8;
 80009ea:	4b54      	ldr	r3, [pc, #336]	@ (8000b3c <MX_TIM1_Init+0x198>)
 80009ec:	2208      	movs	r2, #8
 80009ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f0:	4b52      	ldr	r3, [pc, #328]	@ (8000b3c <MX_TIM1_Init+0x198>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 265;
 80009f6:	4b51      	ldr	r3, [pc, #324]	@ (8000b3c <MX_TIM1_Init+0x198>)
 80009f8:	f240 1209 	movw	r2, #265	@ 0x109
 80009fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fe:	4b4f      	ldr	r3, [pc, #316]	@ (8000b3c <MX_TIM1_Init+0x198>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a04:	4b4d      	ldr	r3, [pc, #308]	@ (8000b3c <MX_TIM1_Init+0x198>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0a:	4b4c      	ldr	r3, [pc, #304]	@ (8000b3c <MX_TIM1_Init+0x198>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a10:	484a      	ldr	r0, [pc, #296]	@ (8000b3c <MX_TIM1_Init+0x198>)
 8000a12:	f002 fa69 	bl	8002ee8 <HAL_TIM_Base_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000a1c:	f000 f938 	bl	8000c90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a24:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a26:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4843      	ldr	r0, [pc, #268]	@ (8000b3c <MX_TIM1_Init+0x198>)
 8000a2e:	f002 fd2d 	bl	800348c <HAL_TIM_ConfigClockSource>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a38:	f000 f92a 	bl	8000c90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a3c:	483f      	ldr	r0, [pc, #252]	@ (8000b3c <MX_TIM1_Init+0x198>)
 8000a3e:	f002 faaa 	bl	8002f96 <HAL_TIM_PWM_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000a48:	f000 f922 	bl	8000c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a50:	2300      	movs	r3, #0
 8000a52:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a58:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4837      	ldr	r0, [pc, #220]	@ (8000b3c <MX_TIM1_Init+0x198>)
 8000a60:	f003 fa0e 	bl	8003e80 <HAL_TIMEx_MasterConfigSynchronization>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000a6a:	f000 f911 	bl	8000c90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a6e:	2360      	movs	r3, #96	@ 0x60
 8000a70:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a76:	2300      	movs	r3, #0
 8000a78:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a82:	2300      	movs	r3, #0
 8000a84:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a86:	2300      	movs	r3, #0
 8000a88:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a8a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a8e:	2200      	movs	r2, #0
 8000a90:	4619      	mov	r1, r3
 8000a92:	482a      	ldr	r0, [pc, #168]	@ (8000b3c <MX_TIM1_Init+0x198>)
 8000a94:	f002 fbe6 	bl	8003264 <HAL_TIM_PWM_ConfigChannel>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000a9e:	f000 f8f7 	bl	8000c90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000aa2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000aa6:	2204      	movs	r2, #4
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4824      	ldr	r0, [pc, #144]	@ (8000b3c <MX_TIM1_Init+0x198>)
 8000aac:	f002 fbda 	bl	8003264 <HAL_TIM_PWM_ConfigChannel>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000ab6:	f000 f8eb 	bl	8000c90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000aba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000abe:	2208      	movs	r2, #8
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	481e      	ldr	r0, [pc, #120]	@ (8000b3c <MX_TIM1_Init+0x198>)
 8000ac4:	f002 fbce 	bl	8003264 <HAL_TIM_PWM_ConfigChannel>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000ace:	f000 f8df 	bl	8000c90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ad2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4818      	ldr	r0, [pc, #96]	@ (8000b3c <MX_TIM1_Init+0x198>)
 8000adc:	f002 fbc2 	bl	8003264 <HAL_TIM_PWM_ConfigChannel>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000ae6:	f000 f8d3 	bl	8000c90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000aee:	2300      	movs	r3, #0
 8000af0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000afe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b02:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b0c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b10:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4807      	ldr	r0, [pc, #28]	@ (8000b3c <MX_TIM1_Init+0x198>)
 8000b20:	f003 fa36 	bl	8003f90 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8000b2a:	f000 f8b1 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b2e:	4803      	ldr	r0, [pc, #12]	@ (8000b3c <MX_TIM1_Init+0x198>)
 8000b30:	f000 f956 	bl	8000de0 <HAL_TIM_MspPostInit>

}
 8000b34:	bf00      	nop
 8000b36:	3768      	adds	r7, #104	@ 0x68
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000084 	.word	0x20000084
 8000b40:	40012c00 	.word	0x40012c00

08000b44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b4a:	f107 0310 	add.w	r3, r7, #16
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b62:	4b1e      	ldr	r3, [pc, #120]	@ (8000bdc <MX_TIM2_Init+0x98>)
 8000b64:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bdc <MX_TIM2_Init+0x98>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b70:	4b1a      	ldr	r3, [pc, #104]	@ (8000bdc <MX_TIM2_Init+0x98>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000b76:	4b19      	ldr	r3, [pc, #100]	@ (8000bdc <MX_TIM2_Init+0x98>)
 8000b78:	f04f 32ff 	mov.w	r2, #4294967295
 8000b7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7e:	4b17      	ldr	r3, [pc, #92]	@ (8000bdc <MX_TIM2_Init+0x98>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b84:	4b15      	ldr	r3, [pc, #84]	@ (8000bdc <MX_TIM2_Init+0x98>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b8a:	4814      	ldr	r0, [pc, #80]	@ (8000bdc <MX_TIM2_Init+0x98>)
 8000b8c:	f002 f9ac 	bl	8002ee8 <HAL_TIM_Base_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000b96:	f000 f87b 	bl	8000c90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ba0:	f107 0310 	add.w	r3, r7, #16
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	480d      	ldr	r0, [pc, #52]	@ (8000bdc <MX_TIM2_Init+0x98>)
 8000ba8:	f002 fc70 	bl	800348c <HAL_TIM_ConfigClockSource>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000bb2:	f000 f86d 	bl	8000c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	@ (8000bdc <MX_TIM2_Init+0x98>)
 8000bc4:	f003 f95c 	bl	8003e80 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000bce:	f000 f85f 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3720      	adds	r7, #32
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200000d0 	.word	0x200000d0

08000be0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000be4:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <MX_USART2_UART_Init+0x58>)
 8000be6:	4a15      	ldr	r2, [pc, #84]	@ (8000c3c <MX_USART2_UART_Init+0x5c>)
 8000be8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bea:	4b13      	ldr	r3, [pc, #76]	@ (8000c38 <MX_USART2_UART_Init+0x58>)
 8000bec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bf0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf2:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <MX_USART2_UART_Init+0x58>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c38 <MX_USART2_UART_Init+0x58>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000c38 <MX_USART2_UART_Init+0x58>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c04:	4b0c      	ldr	r3, [pc, #48]	@ (8000c38 <MX_USART2_UART_Init+0x58>)
 8000c06:	220c      	movs	r2, #12
 8000c08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c38 <MX_USART2_UART_Init+0x58>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c10:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <MX_USART2_UART_Init+0x58>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c16:	4b08      	ldr	r3, [pc, #32]	@ (8000c38 <MX_USART2_UART_Init+0x58>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <MX_USART2_UART_Init+0x58>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c22:	4805      	ldr	r0, [pc, #20]	@ (8000c38 <MX_USART2_UART_Init+0x58>)
 8000c24:	f003 fa32 	bl	800408c <HAL_UART_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c2e:	f000 f82f 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	2000011c 	.word	0x2000011c
 8000c3c:	40004400 	.word	0x40004400

08000c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	4b09      	ldr	r3, [pc, #36]	@ (8000c6c <MX_GPIO_Init+0x2c>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4a:	4a08      	ldr	r2, [pc, #32]	@ (8000c6c <MX_GPIO_Init+0x2c>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c52:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <MX_GPIO_Init+0x2c>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40021000 	.word	0x40021000

08000c70 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  char_flg = 1;
 8000c78:	4b04      	ldr	r3, [pc, #16]	@ (8000c8c <HAL_UART_RxCpltCallback+0x1c>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	601a      	str	r2, [r3, #0]


}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	200001a4 	.word	0x200001a4

08000c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c94:	b672      	cpsid	i
}
 8000c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <Error_Handler+0x8>

08000c9c <set_duty>:
 *      Author: Aiden
 */
#include "motor_driver.h"

// The implementation of the motor object method should go in the .c file
void set_duty(motor_t* p_mot, int32_t duty){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
    // Print to the console so we can see what's happening
    printf("Setting Motor Duty Cycle to %d", duty);
 8000ca6:	6839      	ldr	r1, [r7, #0]
 8000ca8:	481b      	ldr	r0, [pc, #108]	@ (8000d18 <set_duty+0x7c>)
 8000caa:	f004 fefd 	bl	8005aa8 <iprintf>

    // Assign the duty cycle to a field in the structure
    p_mot->duty = duty;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	683a      	ldr	r2, [r7, #0]
 8000cb2:	601a      	str	r2, [r3, #0]
    	if (duty>=0){
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db15      	blt.n	8000ce6 <set_duty+0x4a>
    		duty = duty*265/100;
 8000cba:	683a      	ldr	r2, [r7, #0]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	015b      	lsls	r3, r3, #5
 8000cc0:	4413      	add	r3, r2
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	4413      	add	r3, r2
 8000cc6:	4a15      	ldr	r2, [pc, #84]	@ (8000d1c <set_duty+0x80>)
 8000cc8:	fb82 1203 	smull	r1, r2, r2, r3
 8000ccc:	1152      	asrs	r2, r2, #5
 8000cce:	17db      	asrs	r3, r3, #31
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	603b      	str	r3, [r7, #0]
    		p_mot->timer->CCR1 = duty;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	683a      	ldr	r2, [r7, #0]
 8000cda:	635a      	str	r2, [r3, #52]	@ 0x34
    		p_mot->timer->CCR2 = 0;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	639a      	str	r2, [r3, #56]	@ 0x38
    	else{
    		duty = -1*duty*265/100;
    		p_mot->timer->CCR1 = 0;
    		p_mot->timer->CCR2 = duty;
    	}
}
 8000ce4:	e013      	b.n	8000d0e <set_duty+0x72>
    		duty = -1*duty*265/100;
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	f46f 7284 	mvn.w	r2, #264	@ 0x108
 8000cec:	fb02 f303 	mul.w	r3, r2, r3
 8000cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8000d1c <set_duty+0x80>)
 8000cf2:	fb82 1203 	smull	r1, r2, r2, r3
 8000cf6:	1152      	asrs	r2, r2, #5
 8000cf8:	17db      	asrs	r3, r3, #31
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	603b      	str	r3, [r7, #0]
    		p_mot->timer->CCR1 = 0;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	2200      	movs	r2, #0
 8000d04:	635a      	str	r2, [r3, #52]	@ 0x34
    		p_mot->timer->CCR2 = duty;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	683a      	ldr	r2, [r7, #0]
 8000d0c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	08006b9c 	.word	0x08006b9c
 8000d1c:	51eb851f 	.word	0x51eb851f

08000d20 <start_PWM>:

void start_PWM(TIM_HandleTypeDef* htim){
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	//printf("Starting the PWM");
//	HAL_TIM_PWM_Start(&htim, TIM_CHANNEL_1);
//	HAL_TIM_PWM_Start(&htim, TIM_CHANNEL_2);
//	HAL_TIM_PWM_Start(&htim, TIM_CHANNEL_3);
//	HAL_TIM_PWM_Start(&htim, TIM_CHANNEL_4);
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d78 <HAL_MspInit+0x44>)
 8000d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d78 <HAL_MspInit+0x44>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d46:	4b0c      	ldr	r3, [pc, #48]	@ (8000d78 <HAL_MspInit+0x44>)
 8000d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d52:	4b09      	ldr	r3, [pc, #36]	@ (8000d78 <HAL_MspInit+0x44>)
 8000d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d56:	4a08      	ldr	r2, [pc, #32]	@ (8000d78 <HAL_MspInit+0x44>)
 8000d58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d5e:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <HAL_MspInit+0x44>)
 8000d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d66:	603b      	str	r3, [r7, #0]
 8000d68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40021000 	.word	0x40021000

08000d7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a13      	ldr	r2, [pc, #76]	@ (8000dd8 <HAL_TIM_Base_MspInit+0x5c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d10c      	bne.n	8000da8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d8e:	4b13      	ldr	r3, [pc, #76]	@ (8000ddc <HAL_TIM_Base_MspInit+0x60>)
 8000d90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d92:	4a12      	ldr	r2, [pc, #72]	@ (8000ddc <HAL_TIM_Base_MspInit+0x60>)
 8000d94:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d98:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d9a:	4b10      	ldr	r3, [pc, #64]	@ (8000ddc <HAL_TIM_Base_MspInit+0x60>)
 8000d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000da6:	e010      	b.n	8000dca <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000db0:	d10b      	bne.n	8000dca <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000db2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ddc <HAL_TIM_Base_MspInit+0x60>)
 8000db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000db6:	4a09      	ldr	r2, [pc, #36]	@ (8000ddc <HAL_TIM_Base_MspInit+0x60>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dbe:	4b07      	ldr	r3, [pc, #28]	@ (8000ddc <HAL_TIM_Base_MspInit+0x60>)
 8000dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	40012c00 	.word	0x40012c00
 8000ddc:	40021000 	.word	0x40021000

08000de0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a12      	ldr	r2, [pc, #72]	@ (8000e48 <HAL_TIM_MspPostInit+0x68>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d11d      	bne.n	8000e3e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	4b12      	ldr	r3, [pc, #72]	@ (8000e4c <HAL_TIM_MspPostInit+0x6c>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e06:	4a11      	ldr	r2, [pc, #68]	@ (8000e4c <HAL_TIM_MspPostInit+0x6c>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e4c <HAL_TIM_MspPostInit+0x6c>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000e1a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000e1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	4619      	mov	r1, r3
 8000e36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e3a:	f000 fb8b 	bl	8001554 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e3e:	bf00      	nop
 8000e40:	3720      	adds	r7, #32
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40012c00 	.word	0x40012c00
 8000e4c:	40021000 	.word	0x40021000

08000e50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b0ac      	sub	sp, #176	@ 0xb0
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2288      	movs	r2, #136	@ 0x88
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f004 fe8e 	bl	8005b92 <memset>
  if(huart->Instance==USART2)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a25      	ldr	r2, [pc, #148]	@ (8000f10 <HAL_UART_MspInit+0xc0>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d143      	bne.n	8000f08 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e80:	2302      	movs	r3, #2
 8000e82:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f001 fb6f 	bl	8002570 <HAL_RCCEx_PeriphCLKConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e98:	f7ff fefa 	bl	8000c90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f14 <HAL_UART_MspInit+0xc4>)
 8000e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ea0:	4a1c      	ldr	r2, [pc, #112]	@ (8000f14 <HAL_UART_MspInit+0xc4>)
 8000ea2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ea6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f14 <HAL_UART_MspInit+0xc4>)
 8000eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb4:	4b17      	ldr	r3, [pc, #92]	@ (8000f14 <HAL_UART_MspInit+0xc4>)
 8000eb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb8:	4a16      	ldr	r2, [pc, #88]	@ (8000f14 <HAL_UART_MspInit+0xc4>)
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ec0:	4b14      	ldr	r3, [pc, #80]	@ (8000f14 <HAL_UART_MspInit+0xc4>)
 8000ec2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ecc:	230c      	movs	r3, #12
 8000ece:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ee4:	2307      	movs	r3, #7
 8000ee6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eea:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ef4:	f000 fb2e 	bl	8001554 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2100      	movs	r1, #0
 8000efc:	2026      	movs	r0, #38	@ 0x26
 8000efe:	f000 fa74 	bl	80013ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f02:	2026      	movs	r0, #38	@ 0x26
 8000f04:	f000 fa8d 	bl	8001422 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f08:	bf00      	nop
 8000f0a:	37b0      	adds	r7, #176	@ 0xb0
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40004400 	.word	0x40004400
 8000f14:	40021000 	.word	0x40021000

08000f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <NMI_Handler+0x4>

08000f20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <HardFault_Handler+0x4>

08000f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <MemManage_Handler+0x4>

08000f30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f34:	bf00      	nop
 8000f36:	e7fd      	b.n	8000f34 <BusFault_Handler+0x4>

08000f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <UsageFault_Handler+0x4>

08000f40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f6e:	f000 f941 	bl	80011f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f7c:	4802      	ldr	r0, [pc, #8]	@ (8000f88 <USART2_IRQHandler+0x10>)
 8000f7e:	f003 f9a9 	bl	80042d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	2000011c 	.word	0x2000011c

08000f8c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	e00a      	b.n	8000fb4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f9e:	f3af 8000 	nop.w
 8000fa2:	4601      	mov	r1, r0
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	1c5a      	adds	r2, r3, #1
 8000fa8:	60ba      	str	r2, [r7, #8]
 8000faa:	b2ca      	uxtb	r2, r1
 8000fac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	697a      	ldr	r2, [r7, #20]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	dbf0      	blt.n	8000f9e <_read+0x12>
  }

  return len;
 8000fbc:	687b      	ldr	r3, [r7, #4]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b086      	sub	sp, #24
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	60f8      	str	r0, [r7, #12]
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	e009      	b.n	8000fec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	1c5a      	adds	r2, r3, #1
 8000fdc:	60ba      	str	r2, [r7, #8]
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	697a      	ldr	r2, [r7, #20]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	dbf1      	blt.n	8000fd8 <_write+0x12>
  }
  return len;
 8000ff4:	687b      	ldr	r3, [r7, #4]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <_close>:

int _close(int file)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001006:	f04f 33ff 	mov.w	r3, #4294967295
}
 800100a:	4618      	mov	r0, r3
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
 800101e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001026:	605a      	str	r2, [r3, #4]
  return 0;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <_isatty>:

int _isatty(int file)
{
 8001036:	b480      	push	{r7}
 8001038:	b083      	sub	sp, #12
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800103e:	2301      	movs	r3, #1
}
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001070:	4a14      	ldr	r2, [pc, #80]	@ (80010c4 <_sbrk+0x5c>)
 8001072:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <_sbrk+0x60>)
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800107c:	4b13      	ldr	r3, [pc, #76]	@ (80010cc <_sbrk+0x64>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d102      	bne.n	800108a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001084:	4b11      	ldr	r3, [pc, #68]	@ (80010cc <_sbrk+0x64>)
 8001086:	4a12      	ldr	r2, [pc, #72]	@ (80010d0 <_sbrk+0x68>)
 8001088:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800108a:	4b10      	ldr	r3, [pc, #64]	@ (80010cc <_sbrk+0x64>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	429a      	cmp	r2, r3
 8001096:	d207      	bcs.n	80010a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001098:	f004 fdca 	bl	8005c30 <__errno>
 800109c:	4603      	mov	r3, r0
 800109e:	220c      	movs	r2, #12
 80010a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
 80010a6:	e009      	b.n	80010bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010a8:	4b08      	ldr	r3, [pc, #32]	@ (80010cc <_sbrk+0x64>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ae:	4b07      	ldr	r3, [pc, #28]	@ (80010cc <_sbrk+0x64>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	4a05      	ldr	r2, [pc, #20]	@ (80010cc <_sbrk+0x64>)
 80010b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ba:	68fb      	ldr	r3, [r7, #12]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20018000 	.word	0x20018000
 80010c8:	00000400 	.word	0x00000400
 80010cc:	20000210 	.word	0x20000210
 80010d0:	20000368 	.word	0x20000368

080010d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010d8:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <SystemInit+0x20>)
 80010da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010de:	4a05      	ldr	r2, [pc, #20]	@ (80010f4 <SystemInit+0x20>)
 80010e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001130 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010fc:	f7ff ffea 	bl	80010d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001100:	480c      	ldr	r0, [pc, #48]	@ (8001134 <LoopForever+0x6>)
  ldr r1, =_edata
 8001102:	490d      	ldr	r1, [pc, #52]	@ (8001138 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001104:	4a0d      	ldr	r2, [pc, #52]	@ (800113c <LoopForever+0xe>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001108:	e002      	b.n	8001110 <LoopCopyDataInit>

0800110a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800110a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800110c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110e:	3304      	adds	r3, #4

08001110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001114:	d3f9      	bcc.n	800110a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001116:	4a0a      	ldr	r2, [pc, #40]	@ (8001140 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001118:	4c0a      	ldr	r4, [pc, #40]	@ (8001144 <LoopForever+0x16>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800111c:	e001      	b.n	8001122 <LoopFillZerobss>

0800111e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001120:	3204      	adds	r2, #4

08001122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001124:	d3fb      	bcc.n	800111e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001126:	f004 fd89 	bl	8005c3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800112a:	f7ff fa19 	bl	8000560 <main>

0800112e <LoopForever>:

LoopForever:
    b LoopForever
 800112e:	e7fe      	b.n	800112e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001130:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001134:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001138:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800113c:	08006d5c 	.word	0x08006d5c
  ldr r2, =_sbss
 8001140:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001144:	20000364 	.word	0x20000364

08001148 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001148:	e7fe      	b.n	8001148 <ADC1_2_IRQHandler>

0800114a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001150:	2300      	movs	r3, #0
 8001152:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001154:	2003      	movs	r0, #3
 8001156:	f000 f93d 	bl	80013d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800115a:	200f      	movs	r0, #15
 800115c:	f000 f80e 	bl	800117c <HAL_InitTick>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d002      	beq.n	800116c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	71fb      	strb	r3, [r7, #7]
 800116a:	e001      	b.n	8001170 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800116c:	f7ff fde2 	bl	8000d34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001170:	79fb      	ldrb	r3, [r7, #7]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001184:	2300      	movs	r3, #0
 8001186:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001188:	4b17      	ldr	r3, [pc, #92]	@ (80011e8 <HAL_InitTick+0x6c>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d023      	beq.n	80011d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001190:	4b16      	ldr	r3, [pc, #88]	@ (80011ec <HAL_InitTick+0x70>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4b14      	ldr	r3, [pc, #80]	@ (80011e8 <HAL_InitTick+0x6c>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	4619      	mov	r1, r3
 800119a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800119e:	fbb3 f3f1 	udiv	r3, r3, r1
 80011a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 f949 	bl	800143e <HAL_SYSTICK_Config>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d10f      	bne.n	80011d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2b0f      	cmp	r3, #15
 80011b6:	d809      	bhi.n	80011cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b8:	2200      	movs	r2, #0
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	f04f 30ff 	mov.w	r0, #4294967295
 80011c0:	f000 f913 	bl	80013ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011c4:	4a0a      	ldr	r2, [pc, #40]	@ (80011f0 <HAL_InitTick+0x74>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	e007      	b.n	80011dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	73fb      	strb	r3, [r7, #15]
 80011d0:	e004      	b.n	80011dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	73fb      	strb	r3, [r7, #15]
 80011d6:	e001      	b.n	80011dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000008 	.word	0x20000008
 80011ec:	20000000 	.word	0x20000000
 80011f0:	20000004 	.word	0x20000004

080011f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011f8:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <HAL_IncTick+0x20>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <HAL_IncTick+0x24>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4413      	add	r3, r2
 8001204:	4a04      	ldr	r2, [pc, #16]	@ (8001218 <HAL_IncTick+0x24>)
 8001206:	6013      	str	r3, [r2, #0]
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20000008 	.word	0x20000008
 8001218:	20000214 	.word	0x20000214

0800121c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return uwTick;
 8001220:	4b03      	ldr	r3, [pc, #12]	@ (8001230 <HAL_GetTick+0x14>)
 8001222:	681b      	ldr	r3, [r3, #0]
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000214 	.word	0x20000214

08001234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001244:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001250:	4013      	ands	r3, r2
 8001252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800125c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001260:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001266:	4a04      	ldr	r2, [pc, #16]	@ (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	60d3      	str	r3, [r2, #12]
}
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001280:	4b04      	ldr	r3, [pc, #16]	@ (8001294 <__NVIC_GetPriorityGrouping+0x18>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	0a1b      	lsrs	r3, r3, #8
 8001286:	f003 0307 	and.w	r3, r3, #7
}
 800128a:	4618      	mov	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	db0b      	blt.n	80012c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	f003 021f 	and.w	r2, r3, #31
 80012b0:	4907      	ldr	r1, [pc, #28]	@ (80012d0 <__NVIC_EnableIRQ+0x38>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	095b      	lsrs	r3, r3, #5
 80012b8:	2001      	movs	r0, #1
 80012ba:	fa00 f202 	lsl.w	r2, r0, r2
 80012be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000e100 	.word	0xe000e100

080012d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	6039      	str	r1, [r7, #0]
 80012de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	db0a      	blt.n	80012fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	490c      	ldr	r1, [pc, #48]	@ (8001320 <__NVIC_SetPriority+0x4c>)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	0112      	lsls	r2, r2, #4
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	440b      	add	r3, r1
 80012f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012fc:	e00a      	b.n	8001314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4908      	ldr	r1, [pc, #32]	@ (8001324 <__NVIC_SetPriority+0x50>)
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	3b04      	subs	r3, #4
 800130c:	0112      	lsls	r2, r2, #4
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	440b      	add	r3, r1
 8001312:	761a      	strb	r2, [r3, #24]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000e100 	.word	0xe000e100
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001328:	b480      	push	{r7}
 800132a:	b089      	sub	sp, #36	@ 0x24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f1c3 0307 	rsb	r3, r3, #7
 8001342:	2b04      	cmp	r3, #4
 8001344:	bf28      	it	cs
 8001346:	2304      	movcs	r3, #4
 8001348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3304      	adds	r3, #4
 800134e:	2b06      	cmp	r3, #6
 8001350:	d902      	bls.n	8001358 <NVIC_EncodePriority+0x30>
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3b03      	subs	r3, #3
 8001356:	e000      	b.n	800135a <NVIC_EncodePriority+0x32>
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	f04f 32ff 	mov.w	r2, #4294967295
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43da      	mvns	r2, r3
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	401a      	ands	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001370:	f04f 31ff 	mov.w	r1, #4294967295
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	fa01 f303 	lsl.w	r3, r1, r3
 800137a:	43d9      	mvns	r1, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001380:	4313      	orrs	r3, r2
         );
}
 8001382:	4618      	mov	r0, r3
 8001384:	3724      	adds	r7, #36	@ 0x24
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3b01      	subs	r3, #1
 800139c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013a0:	d301      	bcc.n	80013a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a2:	2301      	movs	r3, #1
 80013a4:	e00f      	b.n	80013c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a6:	4a0a      	ldr	r2, [pc, #40]	@ (80013d0 <SysTick_Config+0x40>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ae:	210f      	movs	r1, #15
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295
 80013b4:	f7ff ff8e 	bl	80012d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b8:	4b05      	ldr	r3, [pc, #20]	@ (80013d0 <SysTick_Config+0x40>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013be:	4b04      	ldr	r3, [pc, #16]	@ (80013d0 <SysTick_Config+0x40>)
 80013c0:	2207      	movs	r2, #7
 80013c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	e000e010 	.word	0xe000e010

080013d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff ff29 	bl	8001234 <__NVIC_SetPriorityGrouping>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b086      	sub	sp, #24
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	4603      	mov	r3, r0
 80013f2:	60b9      	str	r1, [r7, #8]
 80013f4:	607a      	str	r2, [r7, #4]
 80013f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013fc:	f7ff ff3e 	bl	800127c <__NVIC_GetPriorityGrouping>
 8001400:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	68b9      	ldr	r1, [r7, #8]
 8001406:	6978      	ldr	r0, [r7, #20]
 8001408:	f7ff ff8e 	bl	8001328 <NVIC_EncodePriority>
 800140c:	4602      	mov	r2, r0
 800140e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001412:	4611      	mov	r1, r2
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ff5d 	bl	80012d4 <__NVIC_SetPriority>
}
 800141a:	bf00      	nop
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	4603      	mov	r3, r0
 800142a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800142c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff31 	bl	8001298 <__NVIC_EnableIRQ>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ffa2 	bl	8001390 <SysTick_Config>
 800144c:	4603      	mov	r3, r0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001456:	b480      	push	{r7}
 8001458:	b085      	sub	sp, #20
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d008      	beq.n	8001480 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2204      	movs	r2, #4
 8001472:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e022      	b.n	80014c6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f022 020e 	bic.w	r2, r2, #14
 800148e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 0201 	bic.w	r2, r2, #1
 800149e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a4:	f003 021c 	and.w	r2, r3, #28
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ac:	2101      	movs	r1, #1
 80014ae:	fa01 f202 	lsl.w	r2, r1, r2
 80014b2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2201      	movs	r2, #1
 80014b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b084      	sub	sp, #16
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d005      	beq.n	80014f6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2204      	movs	r2, #4
 80014ee:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	73fb      	strb	r3, [r7, #15]
 80014f4:	e029      	b.n	800154a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 020e 	bic.w	r2, r2, #14
 8001504:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0201 	bic.w	r2, r2, #1
 8001514:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151a:	f003 021c 	and.w	r2, r3, #28
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001522:	2101      	movs	r1, #1
 8001524:	fa01 f202 	lsl.w	r2, r1, r2
 8001528:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	4798      	blx	r3
    }
  }
  return status;
 800154a:	7bfb      	ldrb	r3, [r7, #15]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001554:	b480      	push	{r7}
 8001556:	b087      	sub	sp, #28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001562:	e17f      	b.n	8001864 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	2101      	movs	r1, #1
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	fa01 f303 	lsl.w	r3, r1, r3
 8001570:	4013      	ands	r3, r2
 8001572:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 8171 	beq.w	800185e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	2b01      	cmp	r3, #1
 8001586:	d005      	beq.n	8001594 <HAL_GPIO_Init+0x40>
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d130      	bne.n	80015f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	2203      	movs	r2, #3
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4013      	ands	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	68da      	ldr	r2, [r3, #12]
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015ca:	2201      	movs	r2, #1
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	4013      	ands	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	091b      	lsrs	r3, r3, #4
 80015e0:	f003 0201 	and.w	r2, r3, #1
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 0303 	and.w	r3, r3, #3
 80015fe:	2b03      	cmp	r3, #3
 8001600:	d118      	bne.n	8001634 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001606:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001608:	2201      	movs	r2, #1
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4013      	ands	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	08db      	lsrs	r3, r3, #3
 800161e:	f003 0201 	and.w	r2, r3, #1
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	4313      	orrs	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 0303 	and.w	r3, r3, #3
 800163c:	2b03      	cmp	r3, #3
 800163e:	d017      	beq.n	8001670 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	2203      	movs	r2, #3
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	4313      	orrs	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 0303 	and.w	r3, r3, #3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d123      	bne.n	80016c4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	08da      	lsrs	r2, r3, #3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3208      	adds	r2, #8
 8001684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001688:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	220f      	movs	r2, #15
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4013      	ands	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	691a      	ldr	r2, [r3, #16]
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	08da      	lsrs	r2, r3, #3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	3208      	adds	r2, #8
 80016be:	6939      	ldr	r1, [r7, #16]
 80016c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	2203      	movs	r2, #3
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4013      	ands	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 0203 	and.w	r2, r3, #3
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 80ac 	beq.w	800185e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001706:	4b5f      	ldr	r3, [pc, #380]	@ (8001884 <HAL_GPIO_Init+0x330>)
 8001708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800170a:	4a5e      	ldr	r2, [pc, #376]	@ (8001884 <HAL_GPIO_Init+0x330>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6613      	str	r3, [r2, #96]	@ 0x60
 8001712:	4b5c      	ldr	r3, [pc, #368]	@ (8001884 <HAL_GPIO_Init+0x330>)
 8001714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800171e:	4a5a      	ldr	r2, [pc, #360]	@ (8001888 <HAL_GPIO_Init+0x334>)
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	089b      	lsrs	r3, r3, #2
 8001724:	3302      	adds	r3, #2
 8001726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	f003 0303 	and.w	r3, r3, #3
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	220f      	movs	r2, #15
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	4013      	ands	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001748:	d025      	beq.n	8001796 <HAL_GPIO_Init+0x242>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a4f      	ldr	r2, [pc, #316]	@ (800188c <HAL_GPIO_Init+0x338>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d01f      	beq.n	8001792 <HAL_GPIO_Init+0x23e>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a4e      	ldr	r2, [pc, #312]	@ (8001890 <HAL_GPIO_Init+0x33c>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d019      	beq.n	800178e <HAL_GPIO_Init+0x23a>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a4d      	ldr	r2, [pc, #308]	@ (8001894 <HAL_GPIO_Init+0x340>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d013      	beq.n	800178a <HAL_GPIO_Init+0x236>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a4c      	ldr	r2, [pc, #304]	@ (8001898 <HAL_GPIO_Init+0x344>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d00d      	beq.n	8001786 <HAL_GPIO_Init+0x232>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a4b      	ldr	r2, [pc, #300]	@ (800189c <HAL_GPIO_Init+0x348>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d007      	beq.n	8001782 <HAL_GPIO_Init+0x22e>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a4a      	ldr	r2, [pc, #296]	@ (80018a0 <HAL_GPIO_Init+0x34c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d101      	bne.n	800177e <HAL_GPIO_Init+0x22a>
 800177a:	2306      	movs	r3, #6
 800177c:	e00c      	b.n	8001798 <HAL_GPIO_Init+0x244>
 800177e:	2307      	movs	r3, #7
 8001780:	e00a      	b.n	8001798 <HAL_GPIO_Init+0x244>
 8001782:	2305      	movs	r3, #5
 8001784:	e008      	b.n	8001798 <HAL_GPIO_Init+0x244>
 8001786:	2304      	movs	r3, #4
 8001788:	e006      	b.n	8001798 <HAL_GPIO_Init+0x244>
 800178a:	2303      	movs	r3, #3
 800178c:	e004      	b.n	8001798 <HAL_GPIO_Init+0x244>
 800178e:	2302      	movs	r3, #2
 8001790:	e002      	b.n	8001798 <HAL_GPIO_Init+0x244>
 8001792:	2301      	movs	r3, #1
 8001794:	e000      	b.n	8001798 <HAL_GPIO_Init+0x244>
 8001796:	2300      	movs	r3, #0
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	f002 0203 	and.w	r2, r2, #3
 800179e:	0092      	lsls	r2, r2, #2
 80017a0:	4093      	lsls	r3, r2
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017a8:	4937      	ldr	r1, [pc, #220]	@ (8001888 <HAL_GPIO_Init+0x334>)
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	089b      	lsrs	r3, r3, #2
 80017ae:	3302      	adds	r3, #2
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017b6:	4b3b      	ldr	r3, [pc, #236]	@ (80018a4 <HAL_GPIO_Init+0x350>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	43db      	mvns	r3, r3
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4013      	ands	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017da:	4a32      	ldr	r2, [pc, #200]	@ (80018a4 <HAL_GPIO_Init+0x350>)
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017e0:	4b30      	ldr	r3, [pc, #192]	@ (80018a4 <HAL_GPIO_Init+0x350>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	43db      	mvns	r3, r3
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4013      	ands	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001804:	4a27      	ldr	r2, [pc, #156]	@ (80018a4 <HAL_GPIO_Init+0x350>)
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800180a:	4b26      	ldr	r3, [pc, #152]	@ (80018a4 <HAL_GPIO_Init+0x350>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	43db      	mvns	r3, r3
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4013      	ands	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4313      	orrs	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800182e:	4a1d      	ldr	r2, [pc, #116]	@ (80018a4 <HAL_GPIO_Init+0x350>)
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001834:	4b1b      	ldr	r3, [pc, #108]	@ (80018a4 <HAL_GPIO_Init+0x350>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	43db      	mvns	r3, r3
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4013      	ands	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	4313      	orrs	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001858:	4a12      	ldr	r2, [pc, #72]	@ (80018a4 <HAL_GPIO_Init+0x350>)
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	3301      	adds	r3, #1
 8001862:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	fa22 f303 	lsr.w	r3, r2, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	f47f ae78 	bne.w	8001564 <HAL_GPIO_Init+0x10>
  }
}
 8001874:	bf00      	nop
 8001876:	bf00      	nop
 8001878:	371c      	adds	r7, #28
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	40021000 	.word	0x40021000
 8001888:	40010000 	.word	0x40010000
 800188c:	48000400 	.word	0x48000400
 8001890:	48000800 	.word	0x48000800
 8001894:	48000c00 	.word	0x48000c00
 8001898:	48001000 	.word	0x48001000
 800189c:	48001400 	.word	0x48001400
 80018a0:	48001800 	.word	0x48001800
 80018a4:	40010400 	.word	0x40010400

080018a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80018ac:	4b04      	ldr	r3, [pc, #16]	@ (80018c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40007000 	.word	0x40007000

080018c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018d2:	d130      	bne.n	8001936 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018d4:	4b23      	ldr	r3, [pc, #140]	@ (8001964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80018dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018e0:	d038      	beq.n	8001954 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018e2:	4b20      	ldr	r3, [pc, #128]	@ (8001964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001968 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2232      	movs	r2, #50	@ 0x32
 80018f8:	fb02 f303 	mul.w	r3, r2, r3
 80018fc:	4a1b      	ldr	r2, [pc, #108]	@ (800196c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001902:	0c9b      	lsrs	r3, r3, #18
 8001904:	3301      	adds	r3, #1
 8001906:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001908:	e002      	b.n	8001910 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	3b01      	subs	r3, #1
 800190e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001910:	4b14      	ldr	r3, [pc, #80]	@ (8001964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001918:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800191c:	d102      	bne.n	8001924 <HAL_PWREx_ControlVoltageScaling+0x60>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1f2      	bne.n	800190a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001924:	4b0f      	ldr	r3, [pc, #60]	@ (8001964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800192c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001930:	d110      	bne.n	8001954 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e00f      	b.n	8001956 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001936:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800193e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001942:	d007      	beq.n	8001954 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001944:	4b07      	ldr	r3, [pc, #28]	@ (8001964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800194c:	4a05      	ldr	r2, [pc, #20]	@ (8001964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800194e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001952:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40007000 	.word	0x40007000
 8001968:	20000000 	.word	0x20000000
 800196c:	431bde83 	.word	0x431bde83

08001970 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e3ca      	b.n	8002118 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001982:	4b97      	ldr	r3, [pc, #604]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 030c 	and.w	r3, r3, #12
 800198a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800198c:	4b94      	ldr	r3, [pc, #592]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0310 	and.w	r3, r3, #16
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 80e4 	beq.w	8001b6c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d007      	beq.n	80019ba <HAL_RCC_OscConfig+0x4a>
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	2b0c      	cmp	r3, #12
 80019ae:	f040 808b 	bne.w	8001ac8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	f040 8087 	bne.w	8001ac8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019ba:	4b89      	ldr	r3, [pc, #548]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d005      	beq.n	80019d2 <HAL_RCC_OscConfig+0x62>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e3a2      	b.n	8002118 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a1a      	ldr	r2, [r3, #32]
 80019d6:	4b82      	ldr	r3, [pc, #520]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d004      	beq.n	80019ec <HAL_RCC_OscConfig+0x7c>
 80019e2:	4b7f      	ldr	r3, [pc, #508]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019ea:	e005      	b.n	80019f8 <HAL_RCC_OscConfig+0x88>
 80019ec:	4b7c      	ldr	r3, [pc, #496]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 80019ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019f2:	091b      	lsrs	r3, r3, #4
 80019f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d223      	bcs.n	8001a44 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 fd55 	bl	80024b0 <RCC_SetFlashLatencyFromMSIRange>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e383      	b.n	8002118 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a10:	4b73      	ldr	r3, [pc, #460]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a72      	ldr	r2, [pc, #456]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a16:	f043 0308 	orr.w	r3, r3, #8
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	4b70      	ldr	r3, [pc, #448]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	496d      	ldr	r1, [pc, #436]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a2e:	4b6c      	ldr	r3, [pc, #432]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	021b      	lsls	r3, r3, #8
 8001a3c:	4968      	ldr	r1, [pc, #416]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	604b      	str	r3, [r1, #4]
 8001a42:	e025      	b.n	8001a90 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a44:	4b66      	ldr	r3, [pc, #408]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a65      	ldr	r2, [pc, #404]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a4a:	f043 0308 	orr.w	r3, r3, #8
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	4b63      	ldr	r3, [pc, #396]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	4960      	ldr	r1, [pc, #384]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a62:	4b5f      	ldr	r3, [pc, #380]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	021b      	lsls	r3, r3, #8
 8001a70:	495b      	ldr	r1, [pc, #364]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d109      	bne.n	8001a90 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f000 fd15 	bl	80024b0 <RCC_SetFlashLatencyFromMSIRange>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e343      	b.n	8002118 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a90:	f000 fc4a 	bl	8002328 <HAL_RCC_GetSysClockFreq>
 8001a94:	4602      	mov	r2, r0
 8001a96:	4b52      	ldr	r3, [pc, #328]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	091b      	lsrs	r3, r3, #4
 8001a9c:	f003 030f 	and.w	r3, r3, #15
 8001aa0:	4950      	ldr	r1, [pc, #320]	@ (8001be4 <HAL_RCC_OscConfig+0x274>)
 8001aa2:	5ccb      	ldrb	r3, [r1, r3]
 8001aa4:	f003 031f 	and.w	r3, r3, #31
 8001aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8001aac:	4a4e      	ldr	r2, [pc, #312]	@ (8001be8 <HAL_RCC_OscConfig+0x278>)
 8001aae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ab0:	4b4e      	ldr	r3, [pc, #312]	@ (8001bec <HAL_RCC_OscConfig+0x27c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fb61 	bl	800117c <HAL_InitTick>
 8001aba:	4603      	mov	r3, r0
 8001abc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d052      	beq.n	8001b6a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
 8001ac6:	e327      	b.n	8002118 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d032      	beq.n	8001b36 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ad0:	4b43      	ldr	r3, [pc, #268]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a42      	ldr	r2, [pc, #264]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001adc:	f7ff fb9e 	bl	800121c <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ae4:	f7ff fb9a 	bl	800121c <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e310      	b.n	8002118 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001af6:	4b3a      	ldr	r3, [pc, #232]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b02:	4b37      	ldr	r3, [pc, #220]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a36      	ldr	r2, [pc, #216]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b08:	f043 0308 	orr.w	r3, r3, #8
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	4b34      	ldr	r3, [pc, #208]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	4931      	ldr	r1, [pc, #196]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b20:	4b2f      	ldr	r3, [pc, #188]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	021b      	lsls	r3, r3, #8
 8001b2e:	492c      	ldr	r1, [pc, #176]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]
 8001b34:	e01a      	b.n	8001b6c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b36:	4b2a      	ldr	r3, [pc, #168]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a29      	ldr	r2, [pc, #164]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b3c:	f023 0301 	bic.w	r3, r3, #1
 8001b40:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b42:	f7ff fb6b 	bl	800121c <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b4a:	f7ff fb67 	bl	800121c <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e2dd      	b.n	8002118 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b5c:	4b20      	ldr	r3, [pc, #128]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1f0      	bne.n	8001b4a <HAL_RCC_OscConfig+0x1da>
 8001b68:	e000      	b.n	8001b6c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b6a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d074      	beq.n	8001c62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d005      	beq.n	8001b8a <HAL_RCC_OscConfig+0x21a>
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	2b0c      	cmp	r3, #12
 8001b82:	d10e      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	2b03      	cmp	r3, #3
 8001b88:	d10b      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8a:	4b15      	ldr	r3, [pc, #84]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d064      	beq.n	8001c60 <HAL_RCC_OscConfig+0x2f0>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d160      	bne.n	8001c60 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e2ba      	b.n	8002118 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001baa:	d106      	bne.n	8001bba <HAL_RCC_OscConfig+0x24a>
 8001bac:	4b0c      	ldr	r3, [pc, #48]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0b      	ldr	r2, [pc, #44]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001bb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	e026      	b.n	8001c08 <HAL_RCC_OscConfig+0x298>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bc2:	d115      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x280>
 8001bc4:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a05      	ldr	r2, [pc, #20]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001bca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	4b03      	ldr	r3, [pc, #12]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a02      	ldr	r2, [pc, #8]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001bd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bda:	6013      	str	r3, [r2, #0]
 8001bdc:	e014      	b.n	8001c08 <HAL_RCC_OscConfig+0x298>
 8001bde:	bf00      	nop
 8001be0:	40021000 	.word	0x40021000
 8001be4:	08006bd0 	.word	0x08006bd0
 8001be8:	20000000 	.word	0x20000000
 8001bec:	20000004 	.word	0x20000004
 8001bf0:	4ba0      	ldr	r3, [pc, #640]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a9f      	ldr	r2, [pc, #636]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001bf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bfa:	6013      	str	r3, [r2, #0]
 8001bfc:	4b9d      	ldr	r3, [pc, #628]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a9c      	ldr	r2, [pc, #624]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001c02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d013      	beq.n	8001c38 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c10:	f7ff fb04 	bl	800121c <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c18:	f7ff fb00 	bl	800121c <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b64      	cmp	r3, #100	@ 0x64
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e276      	b.n	8002118 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c2a:	4b92      	ldr	r3, [pc, #584]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0f0      	beq.n	8001c18 <HAL_RCC_OscConfig+0x2a8>
 8001c36:	e014      	b.n	8001c62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c38:	f7ff faf0 	bl	800121c <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c40:	f7ff faec 	bl	800121c <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b64      	cmp	r3, #100	@ 0x64
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e262      	b.n	8002118 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c52:	4b88      	ldr	r3, [pc, #544]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0x2d0>
 8001c5e:	e000      	b.n	8001c62 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d060      	beq.n	8001d30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d005      	beq.n	8001c80 <HAL_RCC_OscConfig+0x310>
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	2b0c      	cmp	r3, #12
 8001c78:	d119      	bne.n	8001cae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d116      	bne.n	8001cae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c80:	4b7c      	ldr	r3, [pc, #496]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <HAL_RCC_OscConfig+0x328>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e23f      	b.n	8002118 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c98:	4b76      	ldr	r3, [pc, #472]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	061b      	lsls	r3, r3, #24
 8001ca6:	4973      	ldr	r1, [pc, #460]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cac:	e040      	b.n	8001d30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d023      	beq.n	8001cfe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cb6:	4b6f      	ldr	r3, [pc, #444]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a6e      	ldr	r2, [pc, #440]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001cbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc2:	f7ff faab 	bl	800121c <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cca:	f7ff faa7 	bl	800121c <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e21d      	b.n	8002118 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cdc:	4b65      	ldr	r3, [pc, #404]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0f0      	beq.n	8001cca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce8:	4b62      	ldr	r3, [pc, #392]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	061b      	lsls	r3, r3, #24
 8001cf6:	495f      	ldr	r1, [pc, #380]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	604b      	str	r3, [r1, #4]
 8001cfc:	e018      	b.n	8001d30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cfe:	4b5d      	ldr	r3, [pc, #372]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a5c      	ldr	r2, [pc, #368]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001d04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0a:	f7ff fa87 	bl	800121c <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d12:	f7ff fa83 	bl	800121c <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e1f9      	b.n	8002118 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d24:	4b53      	ldr	r3, [pc, #332]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1f0      	bne.n	8001d12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d03c      	beq.n	8001db6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d01c      	beq.n	8001d7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d44:	4b4b      	ldr	r3, [pc, #300]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d4a:	4a4a      	ldr	r2, [pc, #296]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d54:	f7ff fa62 	bl	800121c <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d5c:	f7ff fa5e 	bl	800121c <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e1d4      	b.n	8002118 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d6e:	4b41      	ldr	r3, [pc, #260]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0ef      	beq.n	8001d5c <HAL_RCC_OscConfig+0x3ec>
 8001d7c:	e01b      	b.n	8001db6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d84:	4a3b      	ldr	r2, [pc, #236]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001d86:	f023 0301 	bic.w	r3, r3, #1
 8001d8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d8e:	f7ff fa45 	bl	800121c <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d96:	f7ff fa41 	bl	800121c <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e1b7      	b.n	8002118 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001da8:	4b32      	ldr	r3, [pc, #200]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1ef      	bne.n	8001d96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 80a6 	beq.w	8001f10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10d      	bne.n	8001df0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd4:	4b27      	ldr	r3, [pc, #156]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd8:	4a26      	ldr	r2, [pc, #152]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001dda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dde:	6593      	str	r3, [r2, #88]	@ 0x58
 8001de0:	4b24      	ldr	r3, [pc, #144]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dec:	2301      	movs	r3, #1
 8001dee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df0:	4b21      	ldr	r3, [pc, #132]	@ (8001e78 <HAL_RCC_OscConfig+0x508>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d118      	bne.n	8001e2e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dfc:	4b1e      	ldr	r3, [pc, #120]	@ (8001e78 <HAL_RCC_OscConfig+0x508>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a1d      	ldr	r2, [pc, #116]	@ (8001e78 <HAL_RCC_OscConfig+0x508>)
 8001e02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e08:	f7ff fa08 	bl	800121c <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e10:	f7ff fa04 	bl	800121c <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e17a      	b.n	8002118 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e22:	4b15      	ldr	r3, [pc, #84]	@ (8001e78 <HAL_RCC_OscConfig+0x508>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d108      	bne.n	8001e48 <HAL_RCC_OscConfig+0x4d8>
 8001e36:	4b0f      	ldr	r3, [pc, #60]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e46:	e029      	b.n	8001e9c <HAL_RCC_OscConfig+0x52c>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2b05      	cmp	r3, #5
 8001e4e:	d115      	bne.n	8001e7c <HAL_RCC_OscConfig+0x50c>
 8001e50:	4b08      	ldr	r3, [pc, #32]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e56:	4a07      	ldr	r2, [pc, #28]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001e58:	f043 0304 	orr.w	r3, r3, #4
 8001e5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e60:	4b04      	ldr	r3, [pc, #16]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e66:	4a03      	ldr	r2, [pc, #12]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e70:	e014      	b.n	8001e9c <HAL_RCC_OscConfig+0x52c>
 8001e72:	bf00      	nop
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40007000 	.word	0x40007000
 8001e7c:	4b9c      	ldr	r3, [pc, #624]	@ (80020f0 <HAL_RCC_OscConfig+0x780>)
 8001e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e82:	4a9b      	ldr	r2, [pc, #620]	@ (80020f0 <HAL_RCC_OscConfig+0x780>)
 8001e84:	f023 0301 	bic.w	r3, r3, #1
 8001e88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e8c:	4b98      	ldr	r3, [pc, #608]	@ (80020f0 <HAL_RCC_OscConfig+0x780>)
 8001e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e92:	4a97      	ldr	r2, [pc, #604]	@ (80020f0 <HAL_RCC_OscConfig+0x780>)
 8001e94:	f023 0304 	bic.w	r3, r3, #4
 8001e98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d016      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea4:	f7ff f9ba 	bl	800121c <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eaa:	e00a      	b.n	8001ec2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eac:	f7ff f9b6 	bl	800121c <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e12a      	b.n	8002118 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ec2:	4b8b      	ldr	r3, [pc, #556]	@ (80020f0 <HAL_RCC_OscConfig+0x780>)
 8001ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0ed      	beq.n	8001eac <HAL_RCC_OscConfig+0x53c>
 8001ed0:	e015      	b.n	8001efe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed2:	f7ff f9a3 	bl	800121c <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ed8:	e00a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eda:	f7ff f99f 	bl	800121c <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e113      	b.n	8002118 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ef0:	4b7f      	ldr	r3, [pc, #508]	@ (80020f0 <HAL_RCC_OscConfig+0x780>)
 8001ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1ed      	bne.n	8001eda <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001efe:	7ffb      	ldrb	r3, [r7, #31]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d105      	bne.n	8001f10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f04:	4b7a      	ldr	r3, [pc, #488]	@ (80020f0 <HAL_RCC_OscConfig+0x780>)
 8001f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f08:	4a79      	ldr	r2, [pc, #484]	@ (80020f0 <HAL_RCC_OscConfig+0x780>)
 8001f0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f0e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 80fe 	beq.w	8002116 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	f040 80d0 	bne.w	80020c4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f24:	4b72      	ldr	r3, [pc, #456]	@ (80020f0 <HAL_RCC_OscConfig+0x780>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f003 0203 	and.w	r2, r3, #3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d130      	bne.n	8001f9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f42:	3b01      	subs	r3, #1
 8001f44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d127      	bne.n	8001f9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f54:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d11f      	bne.n	8001f9a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001f64:	2a07      	cmp	r2, #7
 8001f66:	bf14      	ite	ne
 8001f68:	2201      	movne	r2, #1
 8001f6a:	2200      	moveq	r2, #0
 8001f6c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d113      	bne.n	8001f9a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f7c:	085b      	lsrs	r3, r3, #1
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d109      	bne.n	8001f9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f90:	085b      	lsrs	r3, r3, #1
 8001f92:	3b01      	subs	r3, #1
 8001f94:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d06e      	beq.n	8002078 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	2b0c      	cmp	r3, #12
 8001f9e:	d069      	beq.n	8002074 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fa0:	4b53      	ldr	r3, [pc, #332]	@ (80020f0 <HAL_RCC_OscConfig+0x780>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d105      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001fac:	4b50      	ldr	r3, [pc, #320]	@ (80020f0 <HAL_RCC_OscConfig+0x780>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e0ad      	b.n	8002118 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001fbc:	4b4c      	ldr	r3, [pc, #304]	@ (80020f0 <HAL_RCC_OscConfig+0x780>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a4b      	ldr	r2, [pc, #300]	@ (80020f0 <HAL_RCC_OscConfig+0x780>)
 8001fc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fc6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fc8:	f7ff f928 	bl	800121c <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd0:	f7ff f924 	bl	800121c <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e09a      	b.n	8002118 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fe2:	4b43      	ldr	r3, [pc, #268]	@ (80020f0 <HAL_RCC_OscConfig+0x780>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fee:	4b40      	ldr	r3, [pc, #256]	@ (80020f0 <HAL_RCC_OscConfig+0x780>)
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	4b40      	ldr	r3, [pc, #256]	@ (80020f4 <HAL_RCC_OscConfig+0x784>)
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001ffe:	3a01      	subs	r2, #1
 8002000:	0112      	lsls	r2, r2, #4
 8002002:	4311      	orrs	r1, r2
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002008:	0212      	lsls	r2, r2, #8
 800200a:	4311      	orrs	r1, r2
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002010:	0852      	lsrs	r2, r2, #1
 8002012:	3a01      	subs	r2, #1
 8002014:	0552      	lsls	r2, r2, #21
 8002016:	4311      	orrs	r1, r2
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800201c:	0852      	lsrs	r2, r2, #1
 800201e:	3a01      	subs	r2, #1
 8002020:	0652      	lsls	r2, r2, #25
 8002022:	4311      	orrs	r1, r2
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002028:	0912      	lsrs	r2, r2, #4
 800202a:	0452      	lsls	r2, r2, #17
 800202c:	430a      	orrs	r2, r1
 800202e:	4930      	ldr	r1, [pc, #192]	@ (80020f0 <HAL_RCC_OscConfig+0x780>)
 8002030:	4313      	orrs	r3, r2
 8002032:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002034:	4b2e      	ldr	r3, [pc, #184]	@ (80020f0 <HAL_RCC_OscConfig+0x780>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a2d      	ldr	r2, [pc, #180]	@ (80020f0 <HAL_RCC_OscConfig+0x780>)
 800203a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800203e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002040:	4b2b      	ldr	r3, [pc, #172]	@ (80020f0 <HAL_RCC_OscConfig+0x780>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	4a2a      	ldr	r2, [pc, #168]	@ (80020f0 <HAL_RCC_OscConfig+0x780>)
 8002046:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800204a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800204c:	f7ff f8e6 	bl	800121c <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002054:	f7ff f8e2 	bl	800121c <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e058      	b.n	8002118 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002066:	4b22      	ldr	r3, [pc, #136]	@ (80020f0 <HAL_RCC_OscConfig+0x780>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0f0      	beq.n	8002054 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002072:	e050      	b.n	8002116 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e04f      	b.n	8002118 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002078:	4b1d      	ldr	r3, [pc, #116]	@ (80020f0 <HAL_RCC_OscConfig+0x780>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d148      	bne.n	8002116 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002084:	4b1a      	ldr	r3, [pc, #104]	@ (80020f0 <HAL_RCC_OscConfig+0x780>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a19      	ldr	r2, [pc, #100]	@ (80020f0 <HAL_RCC_OscConfig+0x780>)
 800208a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800208e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002090:	4b17      	ldr	r3, [pc, #92]	@ (80020f0 <HAL_RCC_OscConfig+0x780>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	4a16      	ldr	r2, [pc, #88]	@ (80020f0 <HAL_RCC_OscConfig+0x780>)
 8002096:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800209a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800209c:	f7ff f8be 	bl	800121c <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a4:	f7ff f8ba 	bl	800121c <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e030      	b.n	8002118 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020b6:	4b0e      	ldr	r3, [pc, #56]	@ (80020f0 <HAL_RCC_OscConfig+0x780>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0f0      	beq.n	80020a4 <HAL_RCC_OscConfig+0x734>
 80020c2:	e028      	b.n	8002116 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	2b0c      	cmp	r3, #12
 80020c8:	d023      	beq.n	8002112 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ca:	4b09      	ldr	r3, [pc, #36]	@ (80020f0 <HAL_RCC_OscConfig+0x780>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a08      	ldr	r2, [pc, #32]	@ (80020f0 <HAL_RCC_OscConfig+0x780>)
 80020d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d6:	f7ff f8a1 	bl	800121c <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020dc:	e00c      	b.n	80020f8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020de:	f7ff f89d 	bl	800121c <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d905      	bls.n	80020f8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e013      	b.n	8002118 <HAL_RCC_OscConfig+0x7a8>
 80020f0:	40021000 	.word	0x40021000
 80020f4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020f8:	4b09      	ldr	r3, [pc, #36]	@ (8002120 <HAL_RCC_OscConfig+0x7b0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1ec      	bne.n	80020de <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002104:	4b06      	ldr	r3, [pc, #24]	@ (8002120 <HAL_RCC_OscConfig+0x7b0>)
 8002106:	68da      	ldr	r2, [r3, #12]
 8002108:	4905      	ldr	r1, [pc, #20]	@ (8002120 <HAL_RCC_OscConfig+0x7b0>)
 800210a:	4b06      	ldr	r3, [pc, #24]	@ (8002124 <HAL_RCC_OscConfig+0x7b4>)
 800210c:	4013      	ands	r3, r2
 800210e:	60cb      	str	r3, [r1, #12]
 8002110:	e001      	b.n	8002116 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3720      	adds	r7, #32
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40021000 	.word	0x40021000
 8002124:	feeefffc 	.word	0xfeeefffc

08002128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e0e7      	b.n	800230c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800213c:	4b75      	ldr	r3, [pc, #468]	@ (8002314 <HAL_RCC_ClockConfig+0x1ec>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d910      	bls.n	800216c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214a:	4b72      	ldr	r3, [pc, #456]	@ (8002314 <HAL_RCC_ClockConfig+0x1ec>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f023 0207 	bic.w	r2, r3, #7
 8002152:	4970      	ldr	r1, [pc, #448]	@ (8002314 <HAL_RCC_ClockConfig+0x1ec>)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	4313      	orrs	r3, r2
 8002158:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800215a:	4b6e      	ldr	r3, [pc, #440]	@ (8002314 <HAL_RCC_ClockConfig+0x1ec>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d001      	beq.n	800216c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e0cf      	b.n	800230c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d010      	beq.n	800219a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	4b66      	ldr	r3, [pc, #408]	@ (8002318 <HAL_RCC_ClockConfig+0x1f0>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002184:	429a      	cmp	r2, r3
 8002186:	d908      	bls.n	800219a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002188:	4b63      	ldr	r3, [pc, #396]	@ (8002318 <HAL_RCC_ClockConfig+0x1f0>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	4960      	ldr	r1, [pc, #384]	@ (8002318 <HAL_RCC_ClockConfig+0x1f0>)
 8002196:	4313      	orrs	r3, r2
 8002198:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d04c      	beq.n	8002240 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b03      	cmp	r3, #3
 80021ac:	d107      	bne.n	80021be <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ae:	4b5a      	ldr	r3, [pc, #360]	@ (8002318 <HAL_RCC_ClockConfig+0x1f0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d121      	bne.n	80021fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e0a6      	b.n	800230c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d107      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021c6:	4b54      	ldr	r3, [pc, #336]	@ (8002318 <HAL_RCC_ClockConfig+0x1f0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d115      	bne.n	80021fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e09a      	b.n	800230c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d107      	bne.n	80021ee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021de:	4b4e      	ldr	r3, [pc, #312]	@ (8002318 <HAL_RCC_ClockConfig+0x1f0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d109      	bne.n	80021fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e08e      	b.n	800230c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002318 <HAL_RCC_ClockConfig+0x1f0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e086      	b.n	800230c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021fe:	4b46      	ldr	r3, [pc, #280]	@ (8002318 <HAL_RCC_ClockConfig+0x1f0>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f023 0203 	bic.w	r2, r3, #3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	4943      	ldr	r1, [pc, #268]	@ (8002318 <HAL_RCC_ClockConfig+0x1f0>)
 800220c:	4313      	orrs	r3, r2
 800220e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002210:	f7ff f804 	bl	800121c <HAL_GetTick>
 8002214:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002216:	e00a      	b.n	800222e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002218:	f7ff f800 	bl	800121c <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002226:	4293      	cmp	r3, r2
 8002228:	d901      	bls.n	800222e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e06e      	b.n	800230c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222e:	4b3a      	ldr	r3, [pc, #232]	@ (8002318 <HAL_RCC_ClockConfig+0x1f0>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 020c 	and.w	r2, r3, #12
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	429a      	cmp	r2, r3
 800223e:	d1eb      	bne.n	8002218 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d010      	beq.n	800226e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	4b31      	ldr	r3, [pc, #196]	@ (8002318 <HAL_RCC_ClockConfig+0x1f0>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002258:	429a      	cmp	r2, r3
 800225a:	d208      	bcs.n	800226e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800225c:	4b2e      	ldr	r3, [pc, #184]	@ (8002318 <HAL_RCC_ClockConfig+0x1f0>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	492b      	ldr	r1, [pc, #172]	@ (8002318 <HAL_RCC_ClockConfig+0x1f0>)
 800226a:	4313      	orrs	r3, r2
 800226c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800226e:	4b29      	ldr	r3, [pc, #164]	@ (8002314 <HAL_RCC_ClockConfig+0x1ec>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d210      	bcs.n	800229e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227c:	4b25      	ldr	r3, [pc, #148]	@ (8002314 <HAL_RCC_ClockConfig+0x1ec>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f023 0207 	bic.w	r2, r3, #7
 8002284:	4923      	ldr	r1, [pc, #140]	@ (8002314 <HAL_RCC_ClockConfig+0x1ec>)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	4313      	orrs	r3, r2
 800228a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800228c:	4b21      	ldr	r3, [pc, #132]	@ (8002314 <HAL_RCC_ClockConfig+0x1ec>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	429a      	cmp	r2, r3
 8002298:	d001      	beq.n	800229e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e036      	b.n	800230c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0304 	and.w	r3, r3, #4
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d008      	beq.n	80022bc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002318 <HAL_RCC_ClockConfig+0x1f0>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	4918      	ldr	r1, [pc, #96]	@ (8002318 <HAL_RCC_ClockConfig+0x1f0>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0308 	and.w	r3, r3, #8
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d009      	beq.n	80022dc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022c8:	4b13      	ldr	r3, [pc, #76]	@ (8002318 <HAL_RCC_ClockConfig+0x1f0>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	4910      	ldr	r1, [pc, #64]	@ (8002318 <HAL_RCC_ClockConfig+0x1f0>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022dc:	f000 f824 	bl	8002328 <HAL_RCC_GetSysClockFreq>
 80022e0:	4602      	mov	r2, r0
 80022e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002318 <HAL_RCC_ClockConfig+0x1f0>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	091b      	lsrs	r3, r3, #4
 80022e8:	f003 030f 	and.w	r3, r3, #15
 80022ec:	490b      	ldr	r1, [pc, #44]	@ (800231c <HAL_RCC_ClockConfig+0x1f4>)
 80022ee:	5ccb      	ldrb	r3, [r1, r3]
 80022f0:	f003 031f 	and.w	r3, r3, #31
 80022f4:	fa22 f303 	lsr.w	r3, r2, r3
 80022f8:	4a09      	ldr	r2, [pc, #36]	@ (8002320 <HAL_RCC_ClockConfig+0x1f8>)
 80022fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022fc:	4b09      	ldr	r3, [pc, #36]	@ (8002324 <HAL_RCC_ClockConfig+0x1fc>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe ff3b 	bl	800117c <HAL_InitTick>
 8002306:	4603      	mov	r3, r0
 8002308:	72fb      	strb	r3, [r7, #11]

  return status;
 800230a:	7afb      	ldrb	r3, [r7, #11]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40022000 	.word	0x40022000
 8002318:	40021000 	.word	0x40021000
 800231c:	08006bd0 	.word	0x08006bd0
 8002320:	20000000 	.word	0x20000000
 8002324:	20000004 	.word	0x20000004

08002328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b089      	sub	sp, #36	@ 0x24
 800232c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
 8002332:	2300      	movs	r3, #0
 8002334:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002336:	4b3e      	ldr	r3, [pc, #248]	@ (8002430 <HAL_RCC_GetSysClockFreq+0x108>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 030c 	and.w	r3, r3, #12
 800233e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002340:	4b3b      	ldr	r3, [pc, #236]	@ (8002430 <HAL_RCC_GetSysClockFreq+0x108>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	f003 0303 	and.w	r3, r3, #3
 8002348:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d005      	beq.n	800235c <HAL_RCC_GetSysClockFreq+0x34>
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	2b0c      	cmp	r3, #12
 8002354:	d121      	bne.n	800239a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d11e      	bne.n	800239a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800235c:	4b34      	ldr	r3, [pc, #208]	@ (8002430 <HAL_RCC_GetSysClockFreq+0x108>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0308 	and.w	r3, r3, #8
 8002364:	2b00      	cmp	r3, #0
 8002366:	d107      	bne.n	8002378 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002368:	4b31      	ldr	r3, [pc, #196]	@ (8002430 <HAL_RCC_GetSysClockFreq+0x108>)
 800236a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800236e:	0a1b      	lsrs	r3, r3, #8
 8002370:	f003 030f 	and.w	r3, r3, #15
 8002374:	61fb      	str	r3, [r7, #28]
 8002376:	e005      	b.n	8002384 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002378:	4b2d      	ldr	r3, [pc, #180]	@ (8002430 <HAL_RCC_GetSysClockFreq+0x108>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	091b      	lsrs	r3, r3, #4
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002384:	4a2b      	ldr	r2, [pc, #172]	@ (8002434 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10d      	bne.n	80023b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002398:	e00a      	b.n	80023b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	2b04      	cmp	r3, #4
 800239e:	d102      	bne.n	80023a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023a0:	4b25      	ldr	r3, [pc, #148]	@ (8002438 <HAL_RCC_GetSysClockFreq+0x110>)
 80023a2:	61bb      	str	r3, [r7, #24]
 80023a4:	e004      	b.n	80023b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d101      	bne.n	80023b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023ac:	4b23      	ldr	r3, [pc, #140]	@ (800243c <HAL_RCC_GetSysClockFreq+0x114>)
 80023ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	2b0c      	cmp	r3, #12
 80023b4:	d134      	bne.n	8002420 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002430 <HAL_RCC_GetSysClockFreq+0x108>)
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d003      	beq.n	80023ce <HAL_RCC_GetSysClockFreq+0xa6>
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	d003      	beq.n	80023d4 <HAL_RCC_GetSysClockFreq+0xac>
 80023cc:	e005      	b.n	80023da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002438 <HAL_RCC_GetSysClockFreq+0x110>)
 80023d0:	617b      	str	r3, [r7, #20]
      break;
 80023d2:	e005      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023d4:	4b19      	ldr	r3, [pc, #100]	@ (800243c <HAL_RCC_GetSysClockFreq+0x114>)
 80023d6:	617b      	str	r3, [r7, #20]
      break;
 80023d8:	e002      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	617b      	str	r3, [r7, #20]
      break;
 80023de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023e0:	4b13      	ldr	r3, [pc, #76]	@ (8002430 <HAL_RCC_GetSysClockFreq+0x108>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	091b      	lsrs	r3, r3, #4
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	3301      	adds	r3, #1
 80023ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023ee:	4b10      	ldr	r3, [pc, #64]	@ (8002430 <HAL_RCC_GetSysClockFreq+0x108>)
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	0a1b      	lsrs	r3, r3, #8
 80023f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	fb03 f202 	mul.w	r2, r3, r2
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	fbb2 f3f3 	udiv	r3, r2, r3
 8002404:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002406:	4b0a      	ldr	r3, [pc, #40]	@ (8002430 <HAL_RCC_GetSysClockFreq+0x108>)
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	0e5b      	lsrs	r3, r3, #25
 800240c:	f003 0303 	and.w	r3, r3, #3
 8002410:	3301      	adds	r3, #1
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	fbb2 f3f3 	udiv	r3, r2, r3
 800241e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002420:	69bb      	ldr	r3, [r7, #24]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3724      	adds	r7, #36	@ 0x24
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	40021000 	.word	0x40021000
 8002434:	08006be8 	.word	0x08006be8
 8002438:	00f42400 	.word	0x00f42400
 800243c:	007a1200 	.word	0x007a1200

08002440 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002444:	4b03      	ldr	r3, [pc, #12]	@ (8002454 <HAL_RCC_GetHCLKFreq+0x14>)
 8002446:	681b      	ldr	r3, [r3, #0]
}
 8002448:	4618      	mov	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	20000000 	.word	0x20000000

08002458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800245c:	f7ff fff0 	bl	8002440 <HAL_RCC_GetHCLKFreq>
 8002460:	4602      	mov	r2, r0
 8002462:	4b06      	ldr	r3, [pc, #24]	@ (800247c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	0a1b      	lsrs	r3, r3, #8
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	4904      	ldr	r1, [pc, #16]	@ (8002480 <HAL_RCC_GetPCLK1Freq+0x28>)
 800246e:	5ccb      	ldrb	r3, [r1, r3]
 8002470:	f003 031f 	and.w	r3, r3, #31
 8002474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002478:	4618      	mov	r0, r3
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40021000 	.word	0x40021000
 8002480:	08006be0 	.word	0x08006be0

08002484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002488:	f7ff ffda 	bl	8002440 <HAL_RCC_GetHCLKFreq>
 800248c:	4602      	mov	r2, r0
 800248e:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	0adb      	lsrs	r3, r3, #11
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	4904      	ldr	r1, [pc, #16]	@ (80024ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800249a:	5ccb      	ldrb	r3, [r1, r3]
 800249c:	f003 031f 	and.w	r3, r3, #31
 80024a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40021000 	.word	0x40021000
 80024ac:	08006be0 	.word	0x08006be0

080024b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024b8:	2300      	movs	r3, #0
 80024ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024c8:	f7ff f9ee 	bl	80018a8 <HAL_PWREx_GetVoltageRange>
 80024cc:	6178      	str	r0, [r7, #20]
 80024ce:	e014      	b.n	80024fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024d0:	4b25      	ldr	r3, [pc, #148]	@ (8002568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d4:	4a24      	ldr	r2, [pc, #144]	@ (8002568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024da:	6593      	str	r3, [r2, #88]	@ 0x58
 80024dc:	4b22      	ldr	r3, [pc, #136]	@ (8002568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024e8:	f7ff f9de 	bl	80018a8 <HAL_PWREx_GetVoltageRange>
 80024ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f2:	4a1d      	ldr	r2, [pc, #116]	@ (8002568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002500:	d10b      	bne.n	800251a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b80      	cmp	r3, #128	@ 0x80
 8002506:	d919      	bls.n	800253c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2ba0      	cmp	r3, #160	@ 0xa0
 800250c:	d902      	bls.n	8002514 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800250e:	2302      	movs	r3, #2
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	e013      	b.n	800253c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002514:	2301      	movs	r3, #1
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	e010      	b.n	800253c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b80      	cmp	r3, #128	@ 0x80
 800251e:	d902      	bls.n	8002526 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002520:	2303      	movs	r3, #3
 8002522:	613b      	str	r3, [r7, #16]
 8002524:	e00a      	b.n	800253c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b80      	cmp	r3, #128	@ 0x80
 800252a:	d102      	bne.n	8002532 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800252c:	2302      	movs	r3, #2
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	e004      	b.n	800253c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b70      	cmp	r3, #112	@ 0x70
 8002536:	d101      	bne.n	800253c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002538:	2301      	movs	r3, #1
 800253a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800253c:	4b0b      	ldr	r3, [pc, #44]	@ (800256c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f023 0207 	bic.w	r2, r3, #7
 8002544:	4909      	ldr	r1, [pc, #36]	@ (800256c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800254c:	4b07      	ldr	r3, [pc, #28]	@ (800256c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	429a      	cmp	r2, r3
 8002558:	d001      	beq.n	800255e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40021000 	.word	0x40021000
 800256c:	40022000 	.word	0x40022000

08002570 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002578:	2300      	movs	r3, #0
 800257a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800257c:	2300      	movs	r3, #0
 800257e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002588:	2b00      	cmp	r3, #0
 800258a:	d041      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002590:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002594:	d02a      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002596:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800259a:	d824      	bhi.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800259c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80025a0:	d008      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80025a6:	d81e      	bhi.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00a      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80025ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025b0:	d010      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025b2:	e018      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025b4:	4b86      	ldr	r3, [pc, #536]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	4a85      	ldr	r2, [pc, #532]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025c0:	e015      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3304      	adds	r3, #4
 80025c6:	2100      	movs	r1, #0
 80025c8:	4618      	mov	r0, r3
 80025ca:	f000 fabb 	bl	8002b44 <RCCEx_PLLSAI1_Config>
 80025ce:	4603      	mov	r3, r0
 80025d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025d2:	e00c      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3320      	adds	r3, #32
 80025d8:	2100      	movs	r1, #0
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 fba6 	bl	8002d2c <RCCEx_PLLSAI2_Config>
 80025e0:	4603      	mov	r3, r0
 80025e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025e4:	e003      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	74fb      	strb	r3, [r7, #19]
      break;
 80025ea:	e000      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80025ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025ee:	7cfb      	ldrb	r3, [r7, #19]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10b      	bne.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025f4:	4b76      	ldr	r3, [pc, #472]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025fa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002602:	4973      	ldr	r1, [pc, #460]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002604:	4313      	orrs	r3, r2
 8002606:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800260a:	e001      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800260c:	7cfb      	ldrb	r3, [r7, #19]
 800260e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d041      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002620:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002624:	d02a      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002626:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800262a:	d824      	bhi.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800262c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002630:	d008      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002632:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002636:	d81e      	bhi.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00a      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800263c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002640:	d010      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002642:	e018      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002644:	4b62      	ldr	r3, [pc, #392]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	4a61      	ldr	r2, [pc, #388]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800264a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800264e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002650:	e015      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3304      	adds	r3, #4
 8002656:	2100      	movs	r1, #0
 8002658:	4618      	mov	r0, r3
 800265a:	f000 fa73 	bl	8002b44 <RCCEx_PLLSAI1_Config>
 800265e:	4603      	mov	r3, r0
 8002660:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002662:	e00c      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3320      	adds	r3, #32
 8002668:	2100      	movs	r1, #0
 800266a:	4618      	mov	r0, r3
 800266c:	f000 fb5e 	bl	8002d2c <RCCEx_PLLSAI2_Config>
 8002670:	4603      	mov	r3, r0
 8002672:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002674:	e003      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	74fb      	strb	r3, [r7, #19]
      break;
 800267a:	e000      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800267c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800267e:	7cfb      	ldrb	r3, [r7, #19]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10b      	bne.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002684:	4b52      	ldr	r3, [pc, #328]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800268a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002692:	494f      	ldr	r1, [pc, #316]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800269a:	e001      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800269c:	7cfb      	ldrb	r3, [r7, #19]
 800269e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 80a0 	beq.w	80027ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ae:	2300      	movs	r3, #0
 80026b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026b2:	4b47      	ldr	r3, [pc, #284]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80026c2:	2300      	movs	r3, #0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00d      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026c8:	4b41      	ldr	r3, [pc, #260]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026cc:	4a40      	ldr	r2, [pc, #256]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80026d4:	4b3e      	ldr	r3, [pc, #248]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026e0:	2301      	movs	r3, #1
 80026e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026e4:	4b3b      	ldr	r3, [pc, #236]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a3a      	ldr	r2, [pc, #232]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026f0:	f7fe fd94 	bl	800121c <HAL_GetTick>
 80026f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026f6:	e009      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f8:	f7fe fd90 	bl	800121c <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d902      	bls.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	74fb      	strb	r3, [r7, #19]
        break;
 800270a:	e005      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800270c:	4b31      	ldr	r3, [pc, #196]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0ef      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002718:	7cfb      	ldrb	r3, [r7, #19]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d15c      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800271e:	4b2c      	ldr	r3, [pc, #176]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002724:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002728:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d01f      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	429a      	cmp	r2, r3
 800273a:	d019      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800273c:	4b24      	ldr	r3, [pc, #144]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800273e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002742:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002746:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002748:	4b21      	ldr	r3, [pc, #132]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800274a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800274e:	4a20      	ldr	r2, [pc, #128]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002750:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002754:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002758:	4b1d      	ldr	r3, [pc, #116]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800275a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800275e:	4a1c      	ldr	r2, [pc, #112]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002760:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002764:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002768:	4a19      	ldr	r2, [pc, #100]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d016      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277a:	f7fe fd4f 	bl	800121c <HAL_GetTick>
 800277e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002780:	e00b      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002782:	f7fe fd4b 	bl	800121c <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002790:	4293      	cmp	r3, r2
 8002792:	d902      	bls.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	74fb      	strb	r3, [r7, #19]
            break;
 8002798:	e006      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800279a:	4b0d      	ldr	r3, [pc, #52]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800279c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0ec      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80027a8:	7cfb      	ldrb	r3, [r7, #19]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10c      	bne.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027ae:	4b08      	ldr	r3, [pc, #32]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027be:	4904      	ldr	r1, [pc, #16]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80027c6:	e009      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027c8:	7cfb      	ldrb	r3, [r7, #19]
 80027ca:	74bb      	strb	r3, [r7, #18]
 80027cc:	e006      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80027ce:	bf00      	nop
 80027d0:	40021000 	.word	0x40021000
 80027d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027d8:	7cfb      	ldrb	r3, [r7, #19]
 80027da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027dc:	7c7b      	ldrb	r3, [r7, #17]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d105      	bne.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e2:	4b9e      	ldr	r3, [pc, #632]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e6:	4a9d      	ldr	r2, [pc, #628]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027ec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00a      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027fa:	4b98      	ldr	r3, [pc, #608]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002800:	f023 0203 	bic.w	r2, r3, #3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002808:	4994      	ldr	r1, [pc, #592]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280a:	4313      	orrs	r3, r2
 800280c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00a      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800281c:	4b8f      	ldr	r3, [pc, #572]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002822:	f023 020c 	bic.w	r2, r3, #12
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800282a:	498c      	ldr	r1, [pc, #560]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0304 	and.w	r3, r3, #4
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00a      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800283e:	4b87      	ldr	r3, [pc, #540]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002840:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002844:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284c:	4983      	ldr	r1, [pc, #524]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284e:	4313      	orrs	r3, r2
 8002850:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0308 	and.w	r3, r3, #8
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00a      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002860:	4b7e      	ldr	r3, [pc, #504]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002866:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286e:	497b      	ldr	r1, [pc, #492]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0310 	and.w	r3, r3, #16
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00a      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002882:	4b76      	ldr	r3, [pc, #472]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002884:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002888:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002890:	4972      	ldr	r1, [pc, #456]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002892:	4313      	orrs	r3, r2
 8002894:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0320 	and.w	r3, r3, #32
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00a      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028a4:	4b6d      	ldr	r3, [pc, #436]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028b2:	496a      	ldr	r1, [pc, #424]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00a      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028c6:	4b65      	ldr	r3, [pc, #404]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d4:	4961      	ldr	r1, [pc, #388]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00a      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028e8:	4b5c      	ldr	r3, [pc, #368]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028f6:	4959      	ldr	r1, [pc, #356]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800290a:	4b54      	ldr	r3, [pc, #336]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800290c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002910:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002918:	4950      	ldr	r1, [pc, #320]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291a:	4313      	orrs	r3, r2
 800291c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00a      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800292c:	4b4b      	ldr	r3, [pc, #300]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800292e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002932:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800293a:	4948      	ldr	r1, [pc, #288]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00a      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800294e:	4b43      	ldr	r3, [pc, #268]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002954:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800295c:	493f      	ldr	r1, [pc, #252]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d028      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002970:	4b3a      	ldr	r3, [pc, #232]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002976:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800297e:	4937      	ldr	r1, [pc, #220]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800298a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800298e:	d106      	bne.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002990:	4b32      	ldr	r3, [pc, #200]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	4a31      	ldr	r2, [pc, #196]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002996:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800299a:	60d3      	str	r3, [r2, #12]
 800299c:	e011      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029a6:	d10c      	bne.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3304      	adds	r3, #4
 80029ac:	2101      	movs	r1, #1
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 f8c8 	bl	8002b44 <RCCEx_PLLSAI1_Config>
 80029b4:	4603      	mov	r3, r0
 80029b6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80029b8:	7cfb      	ldrb	r3, [r7, #19]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80029be:	7cfb      	ldrb	r3, [r7, #19]
 80029c0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d028      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029ce:	4b23      	ldr	r3, [pc, #140]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029dc:	491f      	ldr	r1, [pc, #124]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029ec:	d106      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029ee:	4b1b      	ldr	r3, [pc, #108]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	4a1a      	ldr	r2, [pc, #104]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029f8:	60d3      	str	r3, [r2, #12]
 80029fa:	e011      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a04:	d10c      	bne.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3304      	adds	r3, #4
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f000 f899 	bl	8002b44 <RCCEx_PLLSAI1_Config>
 8002a12:	4603      	mov	r3, r0
 8002a14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a16:	7cfb      	ldrb	r3, [r7, #19]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002a1c:	7cfb      	ldrb	r3, [r7, #19]
 8002a1e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d02b      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a32:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a3a:	4908      	ldr	r1, [pc, #32]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a4a:	d109      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a4c:	4b03      	ldr	r3, [pc, #12]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	4a02      	ldr	r2, [pc, #8]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a56:	60d3      	str	r3, [r2, #12]
 8002a58:	e014      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002a5a:	bf00      	nop
 8002a5c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a68:	d10c      	bne.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	2101      	movs	r1, #1
 8002a70:	4618      	mov	r0, r3
 8002a72:	f000 f867 	bl	8002b44 <RCCEx_PLLSAI1_Config>
 8002a76:	4603      	mov	r3, r0
 8002a78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a7a:	7cfb      	ldrb	r3, [r7, #19]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002a80:	7cfb      	ldrb	r3, [r7, #19]
 8002a82:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d02f      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a90:	4b2b      	ldr	r3, [pc, #172]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a96:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a9e:	4928      	ldr	r1, [pc, #160]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002aaa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002aae:	d10d      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3304      	adds	r3, #4
 8002ab4:	2102      	movs	r1, #2
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 f844 	bl	8002b44 <RCCEx_PLLSAI1_Config>
 8002abc:	4603      	mov	r3, r0
 8002abe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ac0:	7cfb      	ldrb	r3, [r7, #19]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d014      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ac6:	7cfb      	ldrb	r3, [r7, #19]
 8002ac8:	74bb      	strb	r3, [r7, #18]
 8002aca:	e011      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ad0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ad4:	d10c      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	3320      	adds	r3, #32
 8002ada:	2102      	movs	r1, #2
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 f925 	bl	8002d2c <RCCEx_PLLSAI2_Config>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ae6:	7cfb      	ldrb	r3, [r7, #19]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002aec:	7cfb      	ldrb	r3, [r7, #19]
 8002aee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00a      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002afc:	4b10      	ldr	r3, [pc, #64]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b02:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b0a:	490d      	ldr	r1, [pc, #52]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00b      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b1e:	4b08      	ldr	r3, [pc, #32]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b24:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b2e:	4904      	ldr	r1, [pc, #16]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b36:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40021000 	.word	0x40021000

08002b44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b52:	4b75      	ldr	r3, [pc, #468]	@ (8002d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d018      	beq.n	8002b90 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b5e:	4b72      	ldr	r3, [pc, #456]	@ (8002d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f003 0203 	and.w	r2, r3, #3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d10d      	bne.n	8002b8a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
       ||
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d009      	beq.n	8002b8a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b76:	4b6c      	ldr	r3, [pc, #432]	@ (8002d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	091b      	lsrs	r3, r3, #4
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	1c5a      	adds	r2, r3, #1
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
       ||
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d047      	beq.n	8002c1a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	73fb      	strb	r3, [r7, #15]
 8002b8e:	e044      	b.n	8002c1a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d018      	beq.n	8002bca <RCCEx_PLLSAI1_Config+0x86>
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d825      	bhi.n	8002be8 <RCCEx_PLLSAI1_Config+0xa4>
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d002      	beq.n	8002ba6 <RCCEx_PLLSAI1_Config+0x62>
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d009      	beq.n	8002bb8 <RCCEx_PLLSAI1_Config+0x74>
 8002ba4:	e020      	b.n	8002be8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ba6:	4b60      	ldr	r3, [pc, #384]	@ (8002d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d11d      	bne.n	8002bee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bb6:	e01a      	b.n	8002bee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bb8:	4b5b      	ldr	r3, [pc, #364]	@ (8002d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d116      	bne.n	8002bf2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bc8:	e013      	b.n	8002bf2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bca:	4b57      	ldr	r3, [pc, #348]	@ (8002d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10f      	bne.n	8002bf6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bd6:	4b54      	ldr	r3, [pc, #336]	@ (8002d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d109      	bne.n	8002bf6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002be6:	e006      	b.n	8002bf6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	73fb      	strb	r3, [r7, #15]
      break;
 8002bec:	e004      	b.n	8002bf8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bee:	bf00      	nop
 8002bf0:	e002      	b.n	8002bf8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bf2:	bf00      	nop
 8002bf4:	e000      	b.n	8002bf8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bf6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10d      	bne.n	8002c1a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bfe:	4b4a      	ldr	r3, [pc, #296]	@ (8002d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6819      	ldr	r1, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	430b      	orrs	r3, r1
 8002c14:	4944      	ldr	r1, [pc, #272]	@ (8002d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d17d      	bne.n	8002d1c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c20:	4b41      	ldr	r3, [pc, #260]	@ (8002d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a40      	ldr	r2, [pc, #256]	@ (8002d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002c2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c2c:	f7fe faf6 	bl	800121c <HAL_GetTick>
 8002c30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c32:	e009      	b.n	8002c48 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c34:	f7fe faf2 	bl	800121c <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d902      	bls.n	8002c48 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	73fb      	strb	r3, [r7, #15]
        break;
 8002c46:	e005      	b.n	8002c54 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c48:	4b37      	ldr	r3, [pc, #220]	@ (8002d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1ef      	bne.n	8002c34 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d160      	bne.n	8002d1c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d111      	bne.n	8002c84 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c60:	4b31      	ldr	r3, [pc, #196]	@ (8002d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002c68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6892      	ldr	r2, [r2, #8]
 8002c70:	0211      	lsls	r1, r2, #8
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	68d2      	ldr	r2, [r2, #12]
 8002c76:	0912      	lsrs	r2, r2, #4
 8002c78:	0452      	lsls	r2, r2, #17
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	492a      	ldr	r1, [pc, #168]	@ (8002d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	610b      	str	r3, [r1, #16]
 8002c82:	e027      	b.n	8002cd4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d112      	bne.n	8002cb0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c8a:	4b27      	ldr	r3, [pc, #156]	@ (8002d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002c92:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6892      	ldr	r2, [r2, #8]
 8002c9a:	0211      	lsls	r1, r2, #8
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6912      	ldr	r2, [r2, #16]
 8002ca0:	0852      	lsrs	r2, r2, #1
 8002ca2:	3a01      	subs	r2, #1
 8002ca4:	0552      	lsls	r2, r2, #21
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	491f      	ldr	r1, [pc, #124]	@ (8002d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	610b      	str	r3, [r1, #16]
 8002cae:	e011      	b.n	8002cd4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002cb8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6892      	ldr	r2, [r2, #8]
 8002cc0:	0211      	lsls	r1, r2, #8
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6952      	ldr	r2, [r2, #20]
 8002cc6:	0852      	lsrs	r2, r2, #1
 8002cc8:	3a01      	subs	r2, #1
 8002cca:	0652      	lsls	r2, r2, #25
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	4916      	ldr	r1, [pc, #88]	@ (8002d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002cd4:	4b14      	ldr	r3, [pc, #80]	@ (8002d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a13      	ldr	r2, [pc, #76]	@ (8002d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cda:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002cde:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce0:	f7fe fa9c 	bl	800121c <HAL_GetTick>
 8002ce4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ce6:	e009      	b.n	8002cfc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ce8:	f7fe fa98 	bl	800121c <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d902      	bls.n	8002cfc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	73fb      	strb	r3, [r7, #15]
          break;
 8002cfa:	e005      	b.n	8002d08 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8002d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0ef      	beq.n	8002ce8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002d08:	7bfb      	ldrb	r3, [r7, #15]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d106      	bne.n	8002d1c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d0e:	4b06      	ldr	r3, [pc, #24]	@ (8002d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d10:	691a      	ldr	r2, [r3, #16]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	4904      	ldr	r1, [pc, #16]	@ (8002d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000

08002d2c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d3a:	4b6a      	ldr	r3, [pc, #424]	@ (8002ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d018      	beq.n	8002d78 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d46:	4b67      	ldr	r3, [pc, #412]	@ (8002ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	f003 0203 	and.w	r2, r3, #3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d10d      	bne.n	8002d72 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
       ||
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d009      	beq.n	8002d72 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d5e:	4b61      	ldr	r3, [pc, #388]	@ (8002ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	091b      	lsrs	r3, r3, #4
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	1c5a      	adds	r2, r3, #1
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
       ||
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d047      	beq.n	8002e02 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	73fb      	strb	r3, [r7, #15]
 8002d76:	e044      	b.n	8002e02 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	d018      	beq.n	8002db2 <RCCEx_PLLSAI2_Config+0x86>
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d825      	bhi.n	8002dd0 <RCCEx_PLLSAI2_Config+0xa4>
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d002      	beq.n	8002d8e <RCCEx_PLLSAI2_Config+0x62>
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d009      	beq.n	8002da0 <RCCEx_PLLSAI2_Config+0x74>
 8002d8c:	e020      	b.n	8002dd0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d8e:	4b55      	ldr	r3, [pc, #340]	@ (8002ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d11d      	bne.n	8002dd6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d9e:	e01a      	b.n	8002dd6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002da0:	4b50      	ldr	r3, [pc, #320]	@ (8002ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d116      	bne.n	8002dda <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002db0:	e013      	b.n	8002dda <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002db2:	4b4c      	ldr	r3, [pc, #304]	@ (8002ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10f      	bne.n	8002dde <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dbe:	4b49      	ldr	r3, [pc, #292]	@ (8002ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d109      	bne.n	8002dde <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dce:	e006      	b.n	8002dde <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8002dd4:	e004      	b.n	8002de0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dd6:	bf00      	nop
 8002dd8:	e002      	b.n	8002de0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dda:	bf00      	nop
 8002ddc:	e000      	b.n	8002de0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dde:	bf00      	nop
    }

    if(status == HAL_OK)
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10d      	bne.n	8002e02 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002de6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6819      	ldr	r1, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	430b      	orrs	r3, r1
 8002dfc:	4939      	ldr	r1, [pc, #228]	@ (8002ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d167      	bne.n	8002ed8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e08:	4b36      	ldr	r3, [pc, #216]	@ (8002ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a35      	ldr	r2, [pc, #212]	@ (8002ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e14:	f7fe fa02 	bl	800121c <HAL_GetTick>
 8002e18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e1a:	e009      	b.n	8002e30 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e1c:	f7fe f9fe 	bl	800121c <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d902      	bls.n	8002e30 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	73fb      	strb	r3, [r7, #15]
        break;
 8002e2e:	e005      	b.n	8002e3c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e30:	4b2c      	ldr	r3, [pc, #176]	@ (8002ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1ef      	bne.n	8002e1c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d14a      	bne.n	8002ed8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d111      	bne.n	8002e6c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e48:	4b26      	ldr	r3, [pc, #152]	@ (8002ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002e50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6892      	ldr	r2, [r2, #8]
 8002e58:	0211      	lsls	r1, r2, #8
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	68d2      	ldr	r2, [r2, #12]
 8002e5e:	0912      	lsrs	r2, r2, #4
 8002e60:	0452      	lsls	r2, r2, #17
 8002e62:	430a      	orrs	r2, r1
 8002e64:	491f      	ldr	r1, [pc, #124]	@ (8002ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	614b      	str	r3, [r1, #20]
 8002e6a:	e011      	b.n	8002e90 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002e74:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6892      	ldr	r2, [r2, #8]
 8002e7c:	0211      	lsls	r1, r2, #8
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6912      	ldr	r2, [r2, #16]
 8002e82:	0852      	lsrs	r2, r2, #1
 8002e84:	3a01      	subs	r2, #1
 8002e86:	0652      	lsls	r2, r2, #25
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	4916      	ldr	r1, [pc, #88]	@ (8002ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e90:	4b14      	ldr	r3, [pc, #80]	@ (8002ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a13      	ldr	r2, [pc, #76]	@ (8002ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9c:	f7fe f9be 	bl	800121c <HAL_GetTick>
 8002ea0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ea2:	e009      	b.n	8002eb8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ea4:	f7fe f9ba 	bl	800121c <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d902      	bls.n	8002eb8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	73fb      	strb	r3, [r7, #15]
          break;
 8002eb6:	e005      	b.n	8002ec4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0ef      	beq.n	8002ea4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d106      	bne.n	8002ed8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002eca:	4b06      	ldr	r3, [pc, #24]	@ (8002ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ecc:	695a      	ldr	r2, [r3, #20]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	4904      	ldr	r1, [pc, #16]	@ (8002ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40021000 	.word	0x40021000

08002ee8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e049      	b.n	8002f8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d106      	bne.n	8002f14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7fd ff34 	bl	8000d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3304      	adds	r3, #4
 8002f24:	4619      	mov	r1, r3
 8002f26:	4610      	mov	r0, r2
 8002f28:	f000 fb7a 	bl	8003620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e049      	b.n	800303c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d106      	bne.n	8002fc2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f841 	bl	8003044 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	f000 fb23 	bl	8003620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d109      	bne.n	800307c <HAL_TIM_PWM_Start+0x24>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b01      	cmp	r3, #1
 8003072:	bf14      	ite	ne
 8003074:	2301      	movne	r3, #1
 8003076:	2300      	moveq	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	e03c      	b.n	80030f6 <HAL_TIM_PWM_Start+0x9e>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	2b04      	cmp	r3, #4
 8003080:	d109      	bne.n	8003096 <HAL_TIM_PWM_Start+0x3e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b01      	cmp	r3, #1
 800308c:	bf14      	ite	ne
 800308e:	2301      	movne	r3, #1
 8003090:	2300      	moveq	r3, #0
 8003092:	b2db      	uxtb	r3, r3
 8003094:	e02f      	b.n	80030f6 <HAL_TIM_PWM_Start+0x9e>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b08      	cmp	r3, #8
 800309a:	d109      	bne.n	80030b0 <HAL_TIM_PWM_Start+0x58>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	bf14      	ite	ne
 80030a8:	2301      	movne	r3, #1
 80030aa:	2300      	moveq	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	e022      	b.n	80030f6 <HAL_TIM_PWM_Start+0x9e>
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	2b0c      	cmp	r3, #12
 80030b4:	d109      	bne.n	80030ca <HAL_TIM_PWM_Start+0x72>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b01      	cmp	r3, #1
 80030c0:	bf14      	ite	ne
 80030c2:	2301      	movne	r3, #1
 80030c4:	2300      	moveq	r3, #0
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	e015      	b.n	80030f6 <HAL_TIM_PWM_Start+0x9e>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	2b10      	cmp	r3, #16
 80030ce:	d109      	bne.n	80030e4 <HAL_TIM_PWM_Start+0x8c>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b01      	cmp	r3, #1
 80030da:	bf14      	ite	ne
 80030dc:	2301      	movne	r3, #1
 80030de:	2300      	moveq	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	e008      	b.n	80030f6 <HAL_TIM_PWM_Start+0x9e>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	bf14      	ite	ne
 80030f0:	2301      	movne	r3, #1
 80030f2:	2300      	moveq	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e09c      	b.n	8003238 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d104      	bne.n	800310e <HAL_TIM_PWM_Start+0xb6>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800310c:	e023      	b.n	8003156 <HAL_TIM_PWM_Start+0xfe>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b04      	cmp	r3, #4
 8003112:	d104      	bne.n	800311e <HAL_TIM_PWM_Start+0xc6>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800311c:	e01b      	b.n	8003156 <HAL_TIM_PWM_Start+0xfe>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b08      	cmp	r3, #8
 8003122:	d104      	bne.n	800312e <HAL_TIM_PWM_Start+0xd6>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2202      	movs	r2, #2
 8003128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800312c:	e013      	b.n	8003156 <HAL_TIM_PWM_Start+0xfe>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b0c      	cmp	r3, #12
 8003132:	d104      	bne.n	800313e <HAL_TIM_PWM_Start+0xe6>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800313c:	e00b      	b.n	8003156 <HAL_TIM_PWM_Start+0xfe>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b10      	cmp	r3, #16
 8003142:	d104      	bne.n	800314e <HAL_TIM_PWM_Start+0xf6>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800314c:	e003      	b.n	8003156 <HAL_TIM_PWM_Start+0xfe>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2202      	movs	r2, #2
 8003152:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2201      	movs	r2, #1
 800315c:	6839      	ldr	r1, [r7, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f000 fe68 	bl	8003e34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a35      	ldr	r2, [pc, #212]	@ (8003240 <HAL_TIM_PWM_Start+0x1e8>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d013      	beq.n	8003196 <HAL_TIM_PWM_Start+0x13e>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a34      	ldr	r2, [pc, #208]	@ (8003244 <HAL_TIM_PWM_Start+0x1ec>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d00e      	beq.n	8003196 <HAL_TIM_PWM_Start+0x13e>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a32      	ldr	r2, [pc, #200]	@ (8003248 <HAL_TIM_PWM_Start+0x1f0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d009      	beq.n	8003196 <HAL_TIM_PWM_Start+0x13e>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a31      	ldr	r2, [pc, #196]	@ (800324c <HAL_TIM_PWM_Start+0x1f4>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d004      	beq.n	8003196 <HAL_TIM_PWM_Start+0x13e>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a2f      	ldr	r2, [pc, #188]	@ (8003250 <HAL_TIM_PWM_Start+0x1f8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d101      	bne.n	800319a <HAL_TIM_PWM_Start+0x142>
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <HAL_TIM_PWM_Start+0x144>
 800319a:	2300      	movs	r3, #0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d007      	beq.n	80031b0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031ae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a22      	ldr	r2, [pc, #136]	@ (8003240 <HAL_TIM_PWM_Start+0x1e8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d01d      	beq.n	80031f6 <HAL_TIM_PWM_Start+0x19e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031c2:	d018      	beq.n	80031f6 <HAL_TIM_PWM_Start+0x19e>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a22      	ldr	r2, [pc, #136]	@ (8003254 <HAL_TIM_PWM_Start+0x1fc>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d013      	beq.n	80031f6 <HAL_TIM_PWM_Start+0x19e>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a21      	ldr	r2, [pc, #132]	@ (8003258 <HAL_TIM_PWM_Start+0x200>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d00e      	beq.n	80031f6 <HAL_TIM_PWM_Start+0x19e>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a1f      	ldr	r2, [pc, #124]	@ (800325c <HAL_TIM_PWM_Start+0x204>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d009      	beq.n	80031f6 <HAL_TIM_PWM_Start+0x19e>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a17      	ldr	r2, [pc, #92]	@ (8003244 <HAL_TIM_PWM_Start+0x1ec>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d004      	beq.n	80031f6 <HAL_TIM_PWM_Start+0x19e>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a15      	ldr	r2, [pc, #84]	@ (8003248 <HAL_TIM_PWM_Start+0x1f0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d115      	bne.n	8003222 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	4b18      	ldr	r3, [pc, #96]	@ (8003260 <HAL_TIM_PWM_Start+0x208>)
 80031fe:	4013      	ands	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2b06      	cmp	r3, #6
 8003206:	d015      	beq.n	8003234 <HAL_TIM_PWM_Start+0x1dc>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800320e:	d011      	beq.n	8003234 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0201 	orr.w	r2, r2, #1
 800321e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003220:	e008      	b.n	8003234 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f042 0201 	orr.w	r2, r2, #1
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	e000      	b.n	8003236 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003234:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40012c00 	.word	0x40012c00
 8003244:	40013400 	.word	0x40013400
 8003248:	40014000 	.word	0x40014000
 800324c:	40014400 	.word	0x40014400
 8003250:	40014800 	.word	0x40014800
 8003254:	40000400 	.word	0x40000400
 8003258:	40000800 	.word	0x40000800
 800325c:	40000c00 	.word	0x40000c00
 8003260:	00010007 	.word	0x00010007

08003264 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003270:	2300      	movs	r3, #0
 8003272:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800327a:	2b01      	cmp	r3, #1
 800327c:	d101      	bne.n	8003282 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800327e:	2302      	movs	r3, #2
 8003280:	e0ff      	b.n	8003482 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b14      	cmp	r3, #20
 800328e:	f200 80f0 	bhi.w	8003472 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003292:	a201      	add	r2, pc, #4	@ (adr r2, 8003298 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003298:	080032ed 	.word	0x080032ed
 800329c:	08003473 	.word	0x08003473
 80032a0:	08003473 	.word	0x08003473
 80032a4:	08003473 	.word	0x08003473
 80032a8:	0800332d 	.word	0x0800332d
 80032ac:	08003473 	.word	0x08003473
 80032b0:	08003473 	.word	0x08003473
 80032b4:	08003473 	.word	0x08003473
 80032b8:	0800336f 	.word	0x0800336f
 80032bc:	08003473 	.word	0x08003473
 80032c0:	08003473 	.word	0x08003473
 80032c4:	08003473 	.word	0x08003473
 80032c8:	080033af 	.word	0x080033af
 80032cc:	08003473 	.word	0x08003473
 80032d0:	08003473 	.word	0x08003473
 80032d4:	08003473 	.word	0x08003473
 80032d8:	080033f1 	.word	0x080033f1
 80032dc:	08003473 	.word	0x08003473
 80032e0:	08003473 	.word	0x08003473
 80032e4:	08003473 	.word	0x08003473
 80032e8:	08003431 	.word	0x08003431
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68b9      	ldr	r1, [r7, #8]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 fa2e 	bl	8003754 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699a      	ldr	r2, [r3, #24]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 0208 	orr.w	r2, r2, #8
 8003306:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	699a      	ldr	r2, [r3, #24]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0204 	bic.w	r2, r2, #4
 8003316:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6999      	ldr	r1, [r3, #24]
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	691a      	ldr	r2, [r3, #16]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	619a      	str	r2, [r3, #24]
      break;
 800332a:	e0a5      	b.n	8003478 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68b9      	ldr	r1, [r7, #8]
 8003332:	4618      	mov	r0, r3
 8003334:	f000 fa9e 	bl	8003874 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699a      	ldr	r2, [r3, #24]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003346:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	699a      	ldr	r2, [r3, #24]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003356:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6999      	ldr	r1, [r3, #24]
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	021a      	lsls	r2, r3, #8
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	619a      	str	r2, [r3, #24]
      break;
 800336c:	e084      	b.n	8003478 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68b9      	ldr	r1, [r7, #8]
 8003374:	4618      	mov	r0, r3
 8003376:	f000 fb07 	bl	8003988 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	69da      	ldr	r2, [r3, #28]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f042 0208 	orr.w	r2, r2, #8
 8003388:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	69da      	ldr	r2, [r3, #28]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0204 	bic.w	r2, r2, #4
 8003398:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	69d9      	ldr	r1, [r3, #28]
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	691a      	ldr	r2, [r3, #16]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	61da      	str	r2, [r3, #28]
      break;
 80033ac:	e064      	b.n	8003478 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68b9      	ldr	r1, [r7, #8]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 fb6f 	bl	8003a98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	69da      	ldr	r2, [r3, #28]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	69da      	ldr	r2, [r3, #28]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	69d9      	ldr	r1, [r3, #28]
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	021a      	lsls	r2, r3, #8
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	61da      	str	r2, [r3, #28]
      break;
 80033ee:	e043      	b.n	8003478 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68b9      	ldr	r1, [r7, #8]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 fbb8 	bl	8003b6c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0208 	orr.w	r2, r2, #8
 800340a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0204 	bic.w	r2, r2, #4
 800341a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	691a      	ldr	r2, [r3, #16]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800342e:	e023      	b.n	8003478 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68b9      	ldr	r1, [r7, #8]
 8003436:	4618      	mov	r0, r3
 8003438:	f000 fbfc 	bl	8003c34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800344a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800345a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	021a      	lsls	r2, r3, #8
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003470:	e002      	b.n	8003478 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	75fb      	strb	r3, [r7, #23]
      break;
 8003476:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003480:	7dfb      	ldrb	r3, [r7, #23]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop

0800348c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003496:	2300      	movs	r3, #0
 8003498:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d101      	bne.n	80034a8 <HAL_TIM_ConfigClockSource+0x1c>
 80034a4:	2302      	movs	r3, #2
 80034a6:	e0b6      	b.n	8003616 <HAL_TIM_ConfigClockSource+0x18a>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2202      	movs	r2, #2
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80034ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034e4:	d03e      	beq.n	8003564 <HAL_TIM_ConfigClockSource+0xd8>
 80034e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034ea:	f200 8087 	bhi.w	80035fc <HAL_TIM_ConfigClockSource+0x170>
 80034ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034f2:	f000 8086 	beq.w	8003602 <HAL_TIM_ConfigClockSource+0x176>
 80034f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034fa:	d87f      	bhi.n	80035fc <HAL_TIM_ConfigClockSource+0x170>
 80034fc:	2b70      	cmp	r3, #112	@ 0x70
 80034fe:	d01a      	beq.n	8003536 <HAL_TIM_ConfigClockSource+0xaa>
 8003500:	2b70      	cmp	r3, #112	@ 0x70
 8003502:	d87b      	bhi.n	80035fc <HAL_TIM_ConfigClockSource+0x170>
 8003504:	2b60      	cmp	r3, #96	@ 0x60
 8003506:	d050      	beq.n	80035aa <HAL_TIM_ConfigClockSource+0x11e>
 8003508:	2b60      	cmp	r3, #96	@ 0x60
 800350a:	d877      	bhi.n	80035fc <HAL_TIM_ConfigClockSource+0x170>
 800350c:	2b50      	cmp	r3, #80	@ 0x50
 800350e:	d03c      	beq.n	800358a <HAL_TIM_ConfigClockSource+0xfe>
 8003510:	2b50      	cmp	r3, #80	@ 0x50
 8003512:	d873      	bhi.n	80035fc <HAL_TIM_ConfigClockSource+0x170>
 8003514:	2b40      	cmp	r3, #64	@ 0x40
 8003516:	d058      	beq.n	80035ca <HAL_TIM_ConfigClockSource+0x13e>
 8003518:	2b40      	cmp	r3, #64	@ 0x40
 800351a:	d86f      	bhi.n	80035fc <HAL_TIM_ConfigClockSource+0x170>
 800351c:	2b30      	cmp	r3, #48	@ 0x30
 800351e:	d064      	beq.n	80035ea <HAL_TIM_ConfigClockSource+0x15e>
 8003520:	2b30      	cmp	r3, #48	@ 0x30
 8003522:	d86b      	bhi.n	80035fc <HAL_TIM_ConfigClockSource+0x170>
 8003524:	2b20      	cmp	r3, #32
 8003526:	d060      	beq.n	80035ea <HAL_TIM_ConfigClockSource+0x15e>
 8003528:	2b20      	cmp	r3, #32
 800352a:	d867      	bhi.n	80035fc <HAL_TIM_ConfigClockSource+0x170>
 800352c:	2b00      	cmp	r3, #0
 800352e:	d05c      	beq.n	80035ea <HAL_TIM_ConfigClockSource+0x15e>
 8003530:	2b10      	cmp	r3, #16
 8003532:	d05a      	beq.n	80035ea <HAL_TIM_ConfigClockSource+0x15e>
 8003534:	e062      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003546:	f000 fc55 	bl	8003df4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003558:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	609a      	str	r2, [r3, #8]
      break;
 8003562:	e04f      	b.n	8003604 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003574:	f000 fc3e 	bl	8003df4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689a      	ldr	r2, [r3, #8]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003586:	609a      	str	r2, [r3, #8]
      break;
 8003588:	e03c      	b.n	8003604 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003596:	461a      	mov	r2, r3
 8003598:	f000 fbb2 	bl	8003d00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2150      	movs	r1, #80	@ 0x50
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 fc0b 	bl	8003dbe <TIM_ITRx_SetConfig>
      break;
 80035a8:	e02c      	b.n	8003604 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035b6:	461a      	mov	r2, r3
 80035b8:	f000 fbd1 	bl	8003d5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2160      	movs	r1, #96	@ 0x60
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 fbfb 	bl	8003dbe <TIM_ITRx_SetConfig>
      break;
 80035c8:	e01c      	b.n	8003604 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035d6:	461a      	mov	r2, r3
 80035d8:	f000 fb92 	bl	8003d00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2140      	movs	r1, #64	@ 0x40
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 fbeb 	bl	8003dbe <TIM_ITRx_SetConfig>
      break;
 80035e8:	e00c      	b.n	8003604 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4619      	mov	r1, r3
 80035f4:	4610      	mov	r0, r2
 80035f6:	f000 fbe2 	bl	8003dbe <TIM_ITRx_SetConfig>
      break;
 80035fa:	e003      	b.n	8003604 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003600:	e000      	b.n	8003604 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003602:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003614:	7bfb      	ldrb	r3, [r7, #15]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
	...

08003620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a40      	ldr	r2, [pc, #256]	@ (8003734 <TIM_Base_SetConfig+0x114>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d013      	beq.n	8003660 <TIM_Base_SetConfig+0x40>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800363e:	d00f      	beq.n	8003660 <TIM_Base_SetConfig+0x40>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a3d      	ldr	r2, [pc, #244]	@ (8003738 <TIM_Base_SetConfig+0x118>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d00b      	beq.n	8003660 <TIM_Base_SetConfig+0x40>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a3c      	ldr	r2, [pc, #240]	@ (800373c <TIM_Base_SetConfig+0x11c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d007      	beq.n	8003660 <TIM_Base_SetConfig+0x40>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a3b      	ldr	r2, [pc, #236]	@ (8003740 <TIM_Base_SetConfig+0x120>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d003      	beq.n	8003660 <TIM_Base_SetConfig+0x40>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a3a      	ldr	r2, [pc, #232]	@ (8003744 <TIM_Base_SetConfig+0x124>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d108      	bne.n	8003672 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003666:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a2f      	ldr	r2, [pc, #188]	@ (8003734 <TIM_Base_SetConfig+0x114>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d01f      	beq.n	80036ba <TIM_Base_SetConfig+0x9a>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003680:	d01b      	beq.n	80036ba <TIM_Base_SetConfig+0x9a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a2c      	ldr	r2, [pc, #176]	@ (8003738 <TIM_Base_SetConfig+0x118>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d017      	beq.n	80036ba <TIM_Base_SetConfig+0x9a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a2b      	ldr	r2, [pc, #172]	@ (800373c <TIM_Base_SetConfig+0x11c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d013      	beq.n	80036ba <TIM_Base_SetConfig+0x9a>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a2a      	ldr	r2, [pc, #168]	@ (8003740 <TIM_Base_SetConfig+0x120>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d00f      	beq.n	80036ba <TIM_Base_SetConfig+0x9a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a29      	ldr	r2, [pc, #164]	@ (8003744 <TIM_Base_SetConfig+0x124>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d00b      	beq.n	80036ba <TIM_Base_SetConfig+0x9a>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a28      	ldr	r2, [pc, #160]	@ (8003748 <TIM_Base_SetConfig+0x128>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d007      	beq.n	80036ba <TIM_Base_SetConfig+0x9a>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a27      	ldr	r2, [pc, #156]	@ (800374c <TIM_Base_SetConfig+0x12c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d003      	beq.n	80036ba <TIM_Base_SetConfig+0x9a>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a26      	ldr	r2, [pc, #152]	@ (8003750 <TIM_Base_SetConfig+0x130>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d108      	bne.n	80036cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a10      	ldr	r2, [pc, #64]	@ (8003734 <TIM_Base_SetConfig+0x114>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d00f      	beq.n	8003718 <TIM_Base_SetConfig+0xf8>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a12      	ldr	r2, [pc, #72]	@ (8003744 <TIM_Base_SetConfig+0x124>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d00b      	beq.n	8003718 <TIM_Base_SetConfig+0xf8>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a11      	ldr	r2, [pc, #68]	@ (8003748 <TIM_Base_SetConfig+0x128>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d007      	beq.n	8003718 <TIM_Base_SetConfig+0xf8>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a10      	ldr	r2, [pc, #64]	@ (800374c <TIM_Base_SetConfig+0x12c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d003      	beq.n	8003718 <TIM_Base_SetConfig+0xf8>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a0f      	ldr	r2, [pc, #60]	@ (8003750 <TIM_Base_SetConfig+0x130>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d103      	bne.n	8003720 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	691a      	ldr	r2, [r3, #16]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	615a      	str	r2, [r3, #20]
}
 8003726:	bf00      	nop
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	40012c00 	.word	0x40012c00
 8003738:	40000400 	.word	0x40000400
 800373c:	40000800 	.word	0x40000800
 8003740:	40000c00 	.word	0x40000c00
 8003744:	40013400 	.word	0x40013400
 8003748:	40014000 	.word	0x40014000
 800374c:	40014400 	.word	0x40014400
 8003750:	40014800 	.word	0x40014800

08003754 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003754:	b480      	push	{r7}
 8003756:	b087      	sub	sp, #28
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	f023 0201 	bic.w	r2, r3, #1
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f023 0303 	bic.w	r3, r3, #3
 800378e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	4313      	orrs	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f023 0302 	bic.w	r3, r3, #2
 80037a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a2c      	ldr	r2, [pc, #176]	@ (8003860 <TIM_OC1_SetConfig+0x10c>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d00f      	beq.n	80037d4 <TIM_OC1_SetConfig+0x80>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a2b      	ldr	r2, [pc, #172]	@ (8003864 <TIM_OC1_SetConfig+0x110>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d00b      	beq.n	80037d4 <TIM_OC1_SetConfig+0x80>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a2a      	ldr	r2, [pc, #168]	@ (8003868 <TIM_OC1_SetConfig+0x114>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d007      	beq.n	80037d4 <TIM_OC1_SetConfig+0x80>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a29      	ldr	r2, [pc, #164]	@ (800386c <TIM_OC1_SetConfig+0x118>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d003      	beq.n	80037d4 <TIM_OC1_SetConfig+0x80>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a28      	ldr	r2, [pc, #160]	@ (8003870 <TIM_OC1_SetConfig+0x11c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d10c      	bne.n	80037ee <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f023 0308 	bic.w	r3, r3, #8
 80037da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f023 0304 	bic.w	r3, r3, #4
 80037ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a1b      	ldr	r2, [pc, #108]	@ (8003860 <TIM_OC1_SetConfig+0x10c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d00f      	beq.n	8003816 <TIM_OC1_SetConfig+0xc2>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a1a      	ldr	r2, [pc, #104]	@ (8003864 <TIM_OC1_SetConfig+0x110>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d00b      	beq.n	8003816 <TIM_OC1_SetConfig+0xc2>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a19      	ldr	r2, [pc, #100]	@ (8003868 <TIM_OC1_SetConfig+0x114>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d007      	beq.n	8003816 <TIM_OC1_SetConfig+0xc2>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a18      	ldr	r2, [pc, #96]	@ (800386c <TIM_OC1_SetConfig+0x118>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d003      	beq.n	8003816 <TIM_OC1_SetConfig+0xc2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a17      	ldr	r2, [pc, #92]	@ (8003870 <TIM_OC1_SetConfig+0x11c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d111      	bne.n	800383a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800381c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003824:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	4313      	orrs	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4313      	orrs	r3, r2
 8003838:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	621a      	str	r2, [r3, #32]
}
 8003854:	bf00      	nop
 8003856:	371c      	adds	r7, #28
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	40012c00 	.word	0x40012c00
 8003864:	40013400 	.word	0x40013400
 8003868:	40014000 	.word	0x40014000
 800386c:	40014400 	.word	0x40014400
 8003870:	40014800 	.word	0x40014800

08003874 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	f023 0210 	bic.w	r2, r3, #16
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	021b      	lsls	r3, r3, #8
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f023 0320 	bic.w	r3, r3, #32
 80038c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a28      	ldr	r2, [pc, #160]	@ (8003974 <TIM_OC2_SetConfig+0x100>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d003      	beq.n	80038e0 <TIM_OC2_SetConfig+0x6c>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a27      	ldr	r2, [pc, #156]	@ (8003978 <TIM_OC2_SetConfig+0x104>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d10d      	bne.n	80038fc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a1d      	ldr	r2, [pc, #116]	@ (8003974 <TIM_OC2_SetConfig+0x100>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d00f      	beq.n	8003924 <TIM_OC2_SetConfig+0xb0>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a1c      	ldr	r2, [pc, #112]	@ (8003978 <TIM_OC2_SetConfig+0x104>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d00b      	beq.n	8003924 <TIM_OC2_SetConfig+0xb0>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a1b      	ldr	r2, [pc, #108]	@ (800397c <TIM_OC2_SetConfig+0x108>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d007      	beq.n	8003924 <TIM_OC2_SetConfig+0xb0>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a1a      	ldr	r2, [pc, #104]	@ (8003980 <TIM_OC2_SetConfig+0x10c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d003      	beq.n	8003924 <TIM_OC2_SetConfig+0xb0>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a19      	ldr	r2, [pc, #100]	@ (8003984 <TIM_OC2_SetConfig+0x110>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d113      	bne.n	800394c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800392a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003932:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	4313      	orrs	r3, r2
 800393e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4313      	orrs	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	621a      	str	r2, [r3, #32]
}
 8003966:	bf00      	nop
 8003968:	371c      	adds	r7, #28
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40012c00 	.word	0x40012c00
 8003978:	40013400 	.word	0x40013400
 800397c:	40014000 	.word	0x40014000
 8003980:	40014400 	.word	0x40014400
 8003984:	40014800 	.word	0x40014800

08003988 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003988:	b480      	push	{r7}
 800398a:	b087      	sub	sp, #28
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f023 0303 	bic.w	r3, r3, #3
 80039c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80039d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	021b      	lsls	r3, r3, #8
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	4313      	orrs	r3, r2
 80039e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a27      	ldr	r2, [pc, #156]	@ (8003a84 <TIM_OC3_SetConfig+0xfc>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d003      	beq.n	80039f2 <TIM_OC3_SetConfig+0x6a>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a26      	ldr	r2, [pc, #152]	@ (8003a88 <TIM_OC3_SetConfig+0x100>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d10d      	bne.n	8003a0e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	021b      	lsls	r3, r3, #8
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a1c      	ldr	r2, [pc, #112]	@ (8003a84 <TIM_OC3_SetConfig+0xfc>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d00f      	beq.n	8003a36 <TIM_OC3_SetConfig+0xae>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a1b      	ldr	r2, [pc, #108]	@ (8003a88 <TIM_OC3_SetConfig+0x100>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00b      	beq.n	8003a36 <TIM_OC3_SetConfig+0xae>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a1a      	ldr	r2, [pc, #104]	@ (8003a8c <TIM_OC3_SetConfig+0x104>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d007      	beq.n	8003a36 <TIM_OC3_SetConfig+0xae>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a19      	ldr	r2, [pc, #100]	@ (8003a90 <TIM_OC3_SetConfig+0x108>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d003      	beq.n	8003a36 <TIM_OC3_SetConfig+0xae>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a18      	ldr	r2, [pc, #96]	@ (8003a94 <TIM_OC3_SetConfig+0x10c>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d113      	bne.n	8003a5e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	621a      	str	r2, [r3, #32]
}
 8003a78:	bf00      	nop
 8003a7a:	371c      	adds	r7, #28
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	40012c00 	.word	0x40012c00
 8003a88:	40013400 	.word	0x40013400
 8003a8c:	40014000 	.word	0x40014000
 8003a90:	40014400 	.word	0x40014400
 8003a94:	40014800 	.word	0x40014800

08003a98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	69db      	ldr	r3, [r3, #28]
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ac6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	021b      	lsls	r3, r3, #8
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ae6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	031b      	lsls	r3, r3, #12
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a18      	ldr	r2, [pc, #96]	@ (8003b58 <TIM_OC4_SetConfig+0xc0>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d00f      	beq.n	8003b1c <TIM_OC4_SetConfig+0x84>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a17      	ldr	r2, [pc, #92]	@ (8003b5c <TIM_OC4_SetConfig+0xc4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d00b      	beq.n	8003b1c <TIM_OC4_SetConfig+0x84>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a16      	ldr	r2, [pc, #88]	@ (8003b60 <TIM_OC4_SetConfig+0xc8>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d007      	beq.n	8003b1c <TIM_OC4_SetConfig+0x84>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a15      	ldr	r2, [pc, #84]	@ (8003b64 <TIM_OC4_SetConfig+0xcc>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d003      	beq.n	8003b1c <TIM_OC4_SetConfig+0x84>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a14      	ldr	r2, [pc, #80]	@ (8003b68 <TIM_OC4_SetConfig+0xd0>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d109      	bne.n	8003b30 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	019b      	lsls	r3, r3, #6
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	621a      	str	r2, [r3, #32]
}
 8003b4a:	bf00      	nop
 8003b4c:	371c      	adds	r7, #28
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	40012c00 	.word	0x40012c00
 8003b5c:	40013400 	.word	0x40013400
 8003b60:	40014000 	.word	0x40014000
 8003b64:	40014400 	.word	0x40014400
 8003b68:	40014800 	.word	0x40014800

08003b6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003bb0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	041b      	lsls	r3, r3, #16
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a17      	ldr	r2, [pc, #92]	@ (8003c20 <TIM_OC5_SetConfig+0xb4>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d00f      	beq.n	8003be6 <TIM_OC5_SetConfig+0x7a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a16      	ldr	r2, [pc, #88]	@ (8003c24 <TIM_OC5_SetConfig+0xb8>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d00b      	beq.n	8003be6 <TIM_OC5_SetConfig+0x7a>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a15      	ldr	r2, [pc, #84]	@ (8003c28 <TIM_OC5_SetConfig+0xbc>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d007      	beq.n	8003be6 <TIM_OC5_SetConfig+0x7a>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a14      	ldr	r2, [pc, #80]	@ (8003c2c <TIM_OC5_SetConfig+0xc0>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d003      	beq.n	8003be6 <TIM_OC5_SetConfig+0x7a>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a13      	ldr	r2, [pc, #76]	@ (8003c30 <TIM_OC5_SetConfig+0xc4>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d109      	bne.n	8003bfa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	021b      	lsls	r3, r3, #8
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	621a      	str	r2, [r3, #32]
}
 8003c14:	bf00      	nop
 8003c16:	371c      	adds	r7, #28
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	40012c00 	.word	0x40012c00
 8003c24:	40013400 	.word	0x40013400
 8003c28:	40014000 	.word	0x40014000
 8003c2c:	40014400 	.word	0x40014400
 8003c30:	40014800 	.word	0x40014800

08003c34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	021b      	lsls	r3, r3, #8
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003c7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	051b      	lsls	r3, r3, #20
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a18      	ldr	r2, [pc, #96]	@ (8003cec <TIM_OC6_SetConfig+0xb8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d00f      	beq.n	8003cb0 <TIM_OC6_SetConfig+0x7c>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a17      	ldr	r2, [pc, #92]	@ (8003cf0 <TIM_OC6_SetConfig+0xbc>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d00b      	beq.n	8003cb0 <TIM_OC6_SetConfig+0x7c>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a16      	ldr	r2, [pc, #88]	@ (8003cf4 <TIM_OC6_SetConfig+0xc0>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d007      	beq.n	8003cb0 <TIM_OC6_SetConfig+0x7c>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a15      	ldr	r2, [pc, #84]	@ (8003cf8 <TIM_OC6_SetConfig+0xc4>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d003      	beq.n	8003cb0 <TIM_OC6_SetConfig+0x7c>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a14      	ldr	r2, [pc, #80]	@ (8003cfc <TIM_OC6_SetConfig+0xc8>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d109      	bne.n	8003cc4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cb6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	029b      	lsls	r3, r3, #10
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	621a      	str	r2, [r3, #32]
}
 8003cde:	bf00      	nop
 8003ce0:	371c      	adds	r7, #28
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40012c00 	.word	0x40012c00
 8003cf0:	40013400 	.word	0x40013400
 8003cf4:	40014000 	.word	0x40014000
 8003cf8:	40014400 	.word	0x40014400
 8003cfc:	40014800 	.word	0x40014800

08003d00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b087      	sub	sp, #28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	f023 0201 	bic.w	r2, r3, #1
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	011b      	lsls	r3, r3, #4
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f023 030a 	bic.w	r3, r3, #10
 8003d3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	621a      	str	r2, [r3, #32]
}
 8003d52:	bf00      	nop
 8003d54:	371c      	adds	r7, #28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b087      	sub	sp, #28
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	60f8      	str	r0, [r7, #12]
 8003d66:	60b9      	str	r1, [r7, #8]
 8003d68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	f023 0210 	bic.w	r2, r3, #16
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	031b      	lsls	r3, r3, #12
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d9a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	011b      	lsls	r3, r3, #4
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	621a      	str	r2, [r3, #32]
}
 8003db2:	bf00      	nop
 8003db4:	371c      	adds	r7, #28
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b085      	sub	sp, #20
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f043 0307 	orr.w	r3, r3, #7
 8003de0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	609a      	str	r2, [r3, #8]
}
 8003de8:	bf00      	nop
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
 8003e00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	021a      	lsls	r2, r3, #8
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	609a      	str	r2, [r3, #8]
}
 8003e28:	bf00      	nop
 8003e2a:	371c      	adds	r7, #28
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f003 031f 	and.w	r3, r3, #31
 8003e46:	2201      	movs	r2, #1
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6a1a      	ldr	r2, [r3, #32]
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	43db      	mvns	r3, r3
 8003e56:	401a      	ands	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a1a      	ldr	r2, [r3, #32]
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	f003 031f 	and.w	r3, r3, #31
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	fa01 f303 	lsl.w	r3, r1, r3
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	621a      	str	r2, [r3, #32]
}
 8003e72:	bf00      	nop
 8003e74:	371c      	adds	r7, #28
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
	...

08003e80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d101      	bne.n	8003e98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e94:	2302      	movs	r3, #2
 8003e96:	e068      	b.n	8003f6a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a2e      	ldr	r2, [pc, #184]	@ (8003f78 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d004      	beq.n	8003ecc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a2d      	ldr	r2, [pc, #180]	@ (8003f7c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d108      	bne.n	8003ede <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003ed2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ee4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a1e      	ldr	r2, [pc, #120]	@ (8003f78 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d01d      	beq.n	8003f3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f0a:	d018      	beq.n	8003f3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a1b      	ldr	r2, [pc, #108]	@ (8003f80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d013      	beq.n	8003f3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a1a      	ldr	r2, [pc, #104]	@ (8003f84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d00e      	beq.n	8003f3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a18      	ldr	r2, [pc, #96]	@ (8003f88 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d009      	beq.n	8003f3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a13      	ldr	r2, [pc, #76]	@ (8003f7c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d004      	beq.n	8003f3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a14      	ldr	r2, [pc, #80]	@ (8003f8c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d10c      	bne.n	8003f58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	40012c00 	.word	0x40012c00
 8003f7c:	40013400 	.word	0x40013400
 8003f80:	40000400 	.word	0x40000400
 8003f84:	40000800 	.word	0x40000800
 8003f88:	40000c00 	.word	0x40000c00
 8003f8c:	40014000 	.word	0x40014000

08003f90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d101      	bne.n	8003fac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e065      	b.n	8004078 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	4313      	orrs	r3, r2
 8004006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004012:	4313      	orrs	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	041b      	lsls	r3, r3, #16
 8004022:	4313      	orrs	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a16      	ldr	r2, [pc, #88]	@ (8004084 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d004      	beq.n	800403a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a14      	ldr	r2, [pc, #80]	@ (8004088 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d115      	bne.n	8004066 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004044:	051b      	lsls	r3, r3, #20
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	4313      	orrs	r3, r2
 8004056:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	4313      	orrs	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	40012c00 	.word	0x40012c00
 8004088:	40013400 	.word	0x40013400

0800408c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e040      	b.n	8004120 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d106      	bne.n	80040b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7fc fece 	bl	8000e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2224      	movs	r2, #36	@ 0x24
 80040b8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 0201 	bic.w	r2, r2, #1
 80040c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d002      	beq.n	80040d8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 fec0 	bl	8004e58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 fc05 	bl	80048e8 <UART_SetConfig>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d101      	bne.n	80040e8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e01b      	b.n	8004120 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689a      	ldr	r2, [r3, #8]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004106:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0201 	orr.w	r2, r2, #1
 8004116:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 ff3f 	bl	8004f9c <UART_CheckIdleState>
 800411e:	4603      	mov	r3, r0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b08a      	sub	sp, #40	@ 0x28
 800412c:	af02      	add	r7, sp, #8
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	603b      	str	r3, [r7, #0]
 8004134:	4613      	mov	r3, r2
 8004136:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800413c:	2b20      	cmp	r3, #32
 800413e:	d177      	bne.n	8004230 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d002      	beq.n	800414c <HAL_UART_Transmit+0x24>
 8004146:	88fb      	ldrh	r3, [r7, #6]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d101      	bne.n	8004150 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e070      	b.n	8004232 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2221      	movs	r2, #33	@ 0x21
 800415c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800415e:	f7fd f85d 	bl	800121c <HAL_GetTick>
 8004162:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	88fa      	ldrh	r2, [r7, #6]
 8004168:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	88fa      	ldrh	r2, [r7, #6]
 8004170:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800417c:	d108      	bne.n	8004190 <HAL_UART_Transmit+0x68>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d104      	bne.n	8004190 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004186:	2300      	movs	r3, #0
 8004188:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	61bb      	str	r3, [r7, #24]
 800418e:	e003      	b.n	8004198 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004194:	2300      	movs	r3, #0
 8004196:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004198:	e02f      	b.n	80041fa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2200      	movs	r2, #0
 80041a2:	2180      	movs	r1, #128	@ 0x80
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 ffa1 	bl	80050ec <UART_WaitOnFlagUntilTimeout>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d004      	beq.n	80041ba <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2220      	movs	r2, #32
 80041b4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e03b      	b.n	8004232 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10b      	bne.n	80041d8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	881a      	ldrh	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041cc:	b292      	uxth	r2, r2
 80041ce:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	3302      	adds	r3, #2
 80041d4:	61bb      	str	r3, [r7, #24]
 80041d6:	e007      	b.n	80041e8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	781a      	ldrb	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	3301      	adds	r3, #1
 80041e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1c9      	bne.n	800419a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2200      	movs	r2, #0
 800420e:	2140      	movs	r1, #64	@ 0x40
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f000 ff6b 	bl	80050ec <UART_WaitOnFlagUntilTimeout>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d004      	beq.n	8004226 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2220      	movs	r2, #32
 8004220:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e005      	b.n	8004232 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2220      	movs	r2, #32
 800422a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800422c:	2300      	movs	r3, #0
 800422e:	e000      	b.n	8004232 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004230:	2302      	movs	r3, #2
  }
}
 8004232:	4618      	mov	r0, r3
 8004234:	3720      	adds	r7, #32
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b08a      	sub	sp, #40	@ 0x28
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	4613      	mov	r3, r2
 8004248:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004250:	2b20      	cmp	r3, #32
 8004252:	d137      	bne.n	80042c4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d002      	beq.n	8004260 <HAL_UART_Receive_IT+0x24>
 800425a:	88fb      	ldrh	r3, [r7, #6]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e030      	b.n	80042c6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a18      	ldr	r2, [pc, #96]	@ (80042d0 <HAL_UART_Receive_IT+0x94>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d01f      	beq.n	80042b4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d018      	beq.n	80042b4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	e853 3f00 	ldrex	r3, [r3]
 800428e:	613b      	str	r3, [r7, #16]
   return(result);
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004296:	627b      	str	r3, [r7, #36]	@ 0x24
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	461a      	mov	r2, r3
 800429e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a0:	623b      	str	r3, [r7, #32]
 80042a2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a4:	69f9      	ldr	r1, [r7, #28]
 80042a6:	6a3a      	ldr	r2, [r7, #32]
 80042a8:	e841 2300 	strex	r3, r2, [r1]
 80042ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1e6      	bne.n	8004282 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80042b4:	88fb      	ldrh	r3, [r7, #6]
 80042b6:	461a      	mov	r2, r3
 80042b8:	68b9      	ldr	r1, [r7, #8]
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 ff7e 	bl	80051bc <UART_Start_Receive_IT>
 80042c0:	4603      	mov	r3, r0
 80042c2:	e000      	b.n	80042c6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80042c4:	2302      	movs	r3, #2
  }
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3728      	adds	r7, #40	@ 0x28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	40008000 	.word	0x40008000

080042d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b0ba      	sub	sp, #232	@ 0xe8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80042fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80042fe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004302:	4013      	ands	r3, r2
 8004304:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004308:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800430c:	2b00      	cmp	r3, #0
 800430e:	d115      	bne.n	800433c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004314:	f003 0320 	and.w	r3, r3, #32
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00f      	beq.n	800433c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800431c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004320:	f003 0320 	and.w	r3, r3, #32
 8004324:	2b00      	cmp	r3, #0
 8004326:	d009      	beq.n	800433c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 82ae 	beq.w	800488e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	4798      	blx	r3
      }
      return;
 800433a:	e2a8      	b.n	800488e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800433c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 8117 	beq.w	8004574 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004346:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d106      	bne.n	8004360 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004352:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004356:	4b85      	ldr	r3, [pc, #532]	@ (800456c <HAL_UART_IRQHandler+0x298>)
 8004358:	4013      	ands	r3, r2
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 810a 	beq.w	8004574 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b00      	cmp	r3, #0
 800436a:	d011      	beq.n	8004390 <HAL_UART_IRQHandler+0xbc>
 800436c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00b      	beq.n	8004390 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2201      	movs	r2, #1
 800437e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004386:	f043 0201 	orr.w	r2, r3, #1
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d011      	beq.n	80043c0 <HAL_UART_IRQHandler+0xec>
 800439c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00b      	beq.n	80043c0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2202      	movs	r2, #2
 80043ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043b6:	f043 0204 	orr.w	r2, r3, #4
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d011      	beq.n	80043f0 <HAL_UART_IRQHandler+0x11c>
 80043cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00b      	beq.n	80043f0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2204      	movs	r2, #4
 80043de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043e6:	f043 0202 	orr.w	r2, r3, #2
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80043f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043f4:	f003 0308 	and.w	r3, r3, #8
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d017      	beq.n	800442c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80043fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004400:	f003 0320 	and.w	r3, r3, #32
 8004404:	2b00      	cmp	r3, #0
 8004406:	d105      	bne.n	8004414 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004408:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800440c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00b      	beq.n	800442c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2208      	movs	r2, #8
 800441a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004422:	f043 0208 	orr.w	r2, r3, #8
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800442c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004430:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004434:	2b00      	cmp	r3, #0
 8004436:	d012      	beq.n	800445e <HAL_UART_IRQHandler+0x18a>
 8004438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800443c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00c      	beq.n	800445e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800444c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004454:	f043 0220 	orr.w	r2, r3, #32
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 8214 	beq.w	8004892 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800446a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800446e:	f003 0320 	and.w	r3, r3, #32
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00d      	beq.n	8004492 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004476:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800447a:	f003 0320 	and.w	r3, r3, #32
 800447e:	2b00      	cmp	r3, #0
 8004480:	d007      	beq.n	8004492 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004498:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a6:	2b40      	cmp	r3, #64	@ 0x40
 80044a8:	d005      	beq.n	80044b6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80044aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044ae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d04f      	beq.n	8004556 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 ff46 	bl	8005348 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044c6:	2b40      	cmp	r3, #64	@ 0x40
 80044c8:	d141      	bne.n	800454e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	3308      	adds	r3, #8
 80044d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80044d8:	e853 3f00 	ldrex	r3, [r3]
 80044dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80044e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80044e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	3308      	adds	r3, #8
 80044f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80044f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80044fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004502:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004506:	e841 2300 	strex	r3, r2, [r1]
 800450a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800450e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1d9      	bne.n	80044ca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800451a:	2b00      	cmp	r3, #0
 800451c:	d013      	beq.n	8004546 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004522:	4a13      	ldr	r2, [pc, #76]	@ (8004570 <HAL_UART_IRQHandler+0x29c>)
 8004524:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800452a:	4618      	mov	r0, r3
 800452c:	f7fc ffd1 	bl	80014d2 <HAL_DMA_Abort_IT>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d017      	beq.n	8004566 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800453a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004540:	4610      	mov	r0, r2
 8004542:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004544:	e00f      	b.n	8004566 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f9b8 	bl	80048bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800454c:	e00b      	b.n	8004566 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f9b4 	bl	80048bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004554:	e007      	b.n	8004566 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f9b0 	bl	80048bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004564:	e195      	b.n	8004892 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004566:	bf00      	nop
    return;
 8004568:	e193      	b.n	8004892 <HAL_UART_IRQHandler+0x5be>
 800456a:	bf00      	nop
 800456c:	04000120 	.word	0x04000120
 8004570:	08005411 	.word	0x08005411

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004578:	2b01      	cmp	r3, #1
 800457a:	f040 814e 	bne.w	800481a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800457e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004582:	f003 0310 	and.w	r3, r3, #16
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 8147 	beq.w	800481a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800458c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004590:	f003 0310 	and.w	r3, r3, #16
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 8140 	beq.w	800481a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2210      	movs	r2, #16
 80045a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ac:	2b40      	cmp	r3, #64	@ 0x40
 80045ae:	f040 80b8 	bne.w	8004722 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 8167 	beq.w	8004896 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80045ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80045d2:	429a      	cmp	r2, r3
 80045d4:	f080 815f 	bcs.w	8004896 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80045de:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0320 	and.w	r3, r3, #32
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f040 8086 	bne.w	8004700 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004600:	e853 3f00 	ldrex	r3, [r3]
 8004604:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004608:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800460c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004610:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	461a      	mov	r2, r3
 800461a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800461e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004622:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004626:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800462a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800462e:	e841 2300 	strex	r3, r2, [r1]
 8004632:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004636:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1da      	bne.n	80045f4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3308      	adds	r3, #8
 8004644:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004646:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004648:	e853 3f00 	ldrex	r3, [r3]
 800464c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800464e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004650:	f023 0301 	bic.w	r3, r3, #1
 8004654:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	3308      	adds	r3, #8
 800465e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004662:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004666:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004668:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800466a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800466e:	e841 2300 	strex	r3, r2, [r1]
 8004672:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004674:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1e1      	bne.n	800463e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	3308      	adds	r3, #8
 8004680:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004682:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004684:	e853 3f00 	ldrex	r3, [r3]
 8004688:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800468a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800468c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004690:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	3308      	adds	r3, #8
 800469a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800469e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80046a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80046a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80046a6:	e841 2300 	strex	r3, r2, [r1]
 80046aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80046ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1e3      	bne.n	800467a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046c8:	e853 3f00 	ldrex	r3, [r3]
 80046cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80046ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046d0:	f023 0310 	bic.w	r3, r3, #16
 80046d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	461a      	mov	r2, r3
 80046de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80046e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80046e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80046ea:	e841 2300 	strex	r3, r2, [r1]
 80046ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80046f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1e4      	bne.n	80046c0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fc feab 	bl	8001456 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004712:	b29b      	uxth	r3, r3
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	b29b      	uxth	r3, r3
 8004718:	4619      	mov	r1, r3
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f8d8 	bl	80048d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004720:	e0b9      	b.n	8004896 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800472e:	b29b      	uxth	r3, r3
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800473c:	b29b      	uxth	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 80ab 	beq.w	800489a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004744:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 80a6 	beq.w	800489a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004756:	e853 3f00 	ldrex	r3, [r3]
 800475a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800475c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800475e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004762:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	461a      	mov	r2, r3
 800476c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004770:	647b      	str	r3, [r7, #68]	@ 0x44
 8004772:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004774:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004776:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004778:	e841 2300 	strex	r3, r2, [r1]
 800477c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800477e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1e4      	bne.n	800474e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	3308      	adds	r3, #8
 800478a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478e:	e853 3f00 	ldrex	r3, [r3]
 8004792:	623b      	str	r3, [r7, #32]
   return(result);
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	f023 0301 	bic.w	r3, r3, #1
 800479a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3308      	adds	r3, #8
 80047a4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80047a8:	633a      	str	r2, [r7, #48]	@ 0x30
 80047aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047b0:	e841 2300 	strex	r3, r2, [r1]
 80047b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1e3      	bne.n	8004784 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2220      	movs	r2, #32
 80047c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	e853 3f00 	ldrex	r3, [r3]
 80047dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f023 0310 	bic.w	r3, r3, #16
 80047e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	461a      	mov	r2, r3
 80047ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80047f2:	61fb      	str	r3, [r7, #28]
 80047f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f6:	69b9      	ldr	r1, [r7, #24]
 80047f8:	69fa      	ldr	r2, [r7, #28]
 80047fa:	e841 2300 	strex	r3, r2, [r1]
 80047fe:	617b      	str	r3, [r7, #20]
   return(result);
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1e4      	bne.n	80047d0 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2202      	movs	r2, #2
 800480a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800480c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004810:	4619      	mov	r1, r3
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f85c 	bl	80048d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004818:	e03f      	b.n	800489a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800481a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800481e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00e      	beq.n	8004844 <HAL_UART_IRQHandler+0x570>
 8004826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800482a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d008      	beq.n	8004844 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800483a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 ffe3 	bl	8005808 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004842:	e02d      	b.n	80048a0 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00e      	beq.n	800486e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004854:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004858:	2b00      	cmp	r3, #0
 800485a:	d008      	beq.n	800486e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004860:	2b00      	cmp	r3, #0
 8004862:	d01c      	beq.n	800489e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	4798      	blx	r3
    }
    return;
 800486c:	e017      	b.n	800489e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800486e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004876:	2b00      	cmp	r3, #0
 8004878:	d012      	beq.n	80048a0 <HAL_UART_IRQHandler+0x5cc>
 800487a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800487e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00c      	beq.n	80048a0 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 fdd8 	bl	800543c <UART_EndTransmit_IT>
    return;
 800488c:	e008      	b.n	80048a0 <HAL_UART_IRQHandler+0x5cc>
      return;
 800488e:	bf00      	nop
 8004890:	e006      	b.n	80048a0 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004892:	bf00      	nop
 8004894:	e004      	b.n	80048a0 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004896:	bf00      	nop
 8004898:	e002      	b.n	80048a0 <HAL_UART_IRQHandler+0x5cc>
      return;
 800489a:	bf00      	nop
 800489c:	e000      	b.n	80048a0 <HAL_UART_IRQHandler+0x5cc>
    return;
 800489e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80048a0:	37e8      	adds	r7, #232	@ 0xe8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop

080048a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	460b      	mov	r3, r1
 80048da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048ec:	b08a      	sub	sp, #40	@ 0x28
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048f2:	2300      	movs	r3, #0
 80048f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	431a      	orrs	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	431a      	orrs	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	4313      	orrs	r3, r2
 800490e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	4ba4      	ldr	r3, [pc, #656]	@ (8004ba8 <UART_SetConfig+0x2c0>)
 8004918:	4013      	ands	r3, r2
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	6812      	ldr	r2, [r2, #0]
 800491e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004920:	430b      	orrs	r3, r1
 8004922:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	68da      	ldr	r2, [r3, #12]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	430a      	orrs	r2, r1
 8004938:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a99      	ldr	r2, [pc, #612]	@ (8004bac <UART_SetConfig+0x2c4>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d004      	beq.n	8004954 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004950:	4313      	orrs	r3, r2
 8004952:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004964:	430a      	orrs	r2, r1
 8004966:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a90      	ldr	r2, [pc, #576]	@ (8004bb0 <UART_SetConfig+0x2c8>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d126      	bne.n	80049c0 <UART_SetConfig+0xd8>
 8004972:	4b90      	ldr	r3, [pc, #576]	@ (8004bb4 <UART_SetConfig+0x2cc>)
 8004974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004978:	f003 0303 	and.w	r3, r3, #3
 800497c:	2b03      	cmp	r3, #3
 800497e:	d81b      	bhi.n	80049b8 <UART_SetConfig+0xd0>
 8004980:	a201      	add	r2, pc, #4	@ (adr r2, 8004988 <UART_SetConfig+0xa0>)
 8004982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004986:	bf00      	nop
 8004988:	08004999 	.word	0x08004999
 800498c:	080049a9 	.word	0x080049a9
 8004990:	080049a1 	.word	0x080049a1
 8004994:	080049b1 	.word	0x080049b1
 8004998:	2301      	movs	r3, #1
 800499a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800499e:	e116      	b.n	8004bce <UART_SetConfig+0x2e6>
 80049a0:	2302      	movs	r3, #2
 80049a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049a6:	e112      	b.n	8004bce <UART_SetConfig+0x2e6>
 80049a8:	2304      	movs	r3, #4
 80049aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ae:	e10e      	b.n	8004bce <UART_SetConfig+0x2e6>
 80049b0:	2308      	movs	r3, #8
 80049b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049b6:	e10a      	b.n	8004bce <UART_SetConfig+0x2e6>
 80049b8:	2310      	movs	r3, #16
 80049ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049be:	e106      	b.n	8004bce <UART_SetConfig+0x2e6>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a7c      	ldr	r2, [pc, #496]	@ (8004bb8 <UART_SetConfig+0x2d0>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d138      	bne.n	8004a3c <UART_SetConfig+0x154>
 80049ca:	4b7a      	ldr	r3, [pc, #488]	@ (8004bb4 <UART_SetConfig+0x2cc>)
 80049cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d0:	f003 030c 	and.w	r3, r3, #12
 80049d4:	2b0c      	cmp	r3, #12
 80049d6:	d82d      	bhi.n	8004a34 <UART_SetConfig+0x14c>
 80049d8:	a201      	add	r2, pc, #4	@ (adr r2, 80049e0 <UART_SetConfig+0xf8>)
 80049da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049de:	bf00      	nop
 80049e0:	08004a15 	.word	0x08004a15
 80049e4:	08004a35 	.word	0x08004a35
 80049e8:	08004a35 	.word	0x08004a35
 80049ec:	08004a35 	.word	0x08004a35
 80049f0:	08004a25 	.word	0x08004a25
 80049f4:	08004a35 	.word	0x08004a35
 80049f8:	08004a35 	.word	0x08004a35
 80049fc:	08004a35 	.word	0x08004a35
 8004a00:	08004a1d 	.word	0x08004a1d
 8004a04:	08004a35 	.word	0x08004a35
 8004a08:	08004a35 	.word	0x08004a35
 8004a0c:	08004a35 	.word	0x08004a35
 8004a10:	08004a2d 	.word	0x08004a2d
 8004a14:	2300      	movs	r3, #0
 8004a16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a1a:	e0d8      	b.n	8004bce <UART_SetConfig+0x2e6>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a22:	e0d4      	b.n	8004bce <UART_SetConfig+0x2e6>
 8004a24:	2304      	movs	r3, #4
 8004a26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a2a:	e0d0      	b.n	8004bce <UART_SetConfig+0x2e6>
 8004a2c:	2308      	movs	r3, #8
 8004a2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a32:	e0cc      	b.n	8004bce <UART_SetConfig+0x2e6>
 8004a34:	2310      	movs	r3, #16
 8004a36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a3a:	e0c8      	b.n	8004bce <UART_SetConfig+0x2e6>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a5e      	ldr	r2, [pc, #376]	@ (8004bbc <UART_SetConfig+0x2d4>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d125      	bne.n	8004a92 <UART_SetConfig+0x1aa>
 8004a46:	4b5b      	ldr	r3, [pc, #364]	@ (8004bb4 <UART_SetConfig+0x2cc>)
 8004a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a4c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004a50:	2b30      	cmp	r3, #48	@ 0x30
 8004a52:	d016      	beq.n	8004a82 <UART_SetConfig+0x19a>
 8004a54:	2b30      	cmp	r3, #48	@ 0x30
 8004a56:	d818      	bhi.n	8004a8a <UART_SetConfig+0x1a2>
 8004a58:	2b20      	cmp	r3, #32
 8004a5a:	d00a      	beq.n	8004a72 <UART_SetConfig+0x18a>
 8004a5c:	2b20      	cmp	r3, #32
 8004a5e:	d814      	bhi.n	8004a8a <UART_SetConfig+0x1a2>
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d002      	beq.n	8004a6a <UART_SetConfig+0x182>
 8004a64:	2b10      	cmp	r3, #16
 8004a66:	d008      	beq.n	8004a7a <UART_SetConfig+0x192>
 8004a68:	e00f      	b.n	8004a8a <UART_SetConfig+0x1a2>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a70:	e0ad      	b.n	8004bce <UART_SetConfig+0x2e6>
 8004a72:	2302      	movs	r3, #2
 8004a74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a78:	e0a9      	b.n	8004bce <UART_SetConfig+0x2e6>
 8004a7a:	2304      	movs	r3, #4
 8004a7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a80:	e0a5      	b.n	8004bce <UART_SetConfig+0x2e6>
 8004a82:	2308      	movs	r3, #8
 8004a84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a88:	e0a1      	b.n	8004bce <UART_SetConfig+0x2e6>
 8004a8a:	2310      	movs	r3, #16
 8004a8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a90:	e09d      	b.n	8004bce <UART_SetConfig+0x2e6>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a4a      	ldr	r2, [pc, #296]	@ (8004bc0 <UART_SetConfig+0x2d8>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d125      	bne.n	8004ae8 <UART_SetConfig+0x200>
 8004a9c:	4b45      	ldr	r3, [pc, #276]	@ (8004bb4 <UART_SetConfig+0x2cc>)
 8004a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004aa6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004aa8:	d016      	beq.n	8004ad8 <UART_SetConfig+0x1f0>
 8004aaa:	2bc0      	cmp	r3, #192	@ 0xc0
 8004aac:	d818      	bhi.n	8004ae0 <UART_SetConfig+0x1f8>
 8004aae:	2b80      	cmp	r3, #128	@ 0x80
 8004ab0:	d00a      	beq.n	8004ac8 <UART_SetConfig+0x1e0>
 8004ab2:	2b80      	cmp	r3, #128	@ 0x80
 8004ab4:	d814      	bhi.n	8004ae0 <UART_SetConfig+0x1f8>
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <UART_SetConfig+0x1d8>
 8004aba:	2b40      	cmp	r3, #64	@ 0x40
 8004abc:	d008      	beq.n	8004ad0 <UART_SetConfig+0x1e8>
 8004abe:	e00f      	b.n	8004ae0 <UART_SetConfig+0x1f8>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ac6:	e082      	b.n	8004bce <UART_SetConfig+0x2e6>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ace:	e07e      	b.n	8004bce <UART_SetConfig+0x2e6>
 8004ad0:	2304      	movs	r3, #4
 8004ad2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ad6:	e07a      	b.n	8004bce <UART_SetConfig+0x2e6>
 8004ad8:	2308      	movs	r3, #8
 8004ada:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ade:	e076      	b.n	8004bce <UART_SetConfig+0x2e6>
 8004ae0:	2310      	movs	r3, #16
 8004ae2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ae6:	e072      	b.n	8004bce <UART_SetConfig+0x2e6>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a35      	ldr	r2, [pc, #212]	@ (8004bc4 <UART_SetConfig+0x2dc>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d12a      	bne.n	8004b48 <UART_SetConfig+0x260>
 8004af2:	4b30      	ldr	r3, [pc, #192]	@ (8004bb4 <UART_SetConfig+0x2cc>)
 8004af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004af8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004afc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b00:	d01a      	beq.n	8004b38 <UART_SetConfig+0x250>
 8004b02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b06:	d81b      	bhi.n	8004b40 <UART_SetConfig+0x258>
 8004b08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b0c:	d00c      	beq.n	8004b28 <UART_SetConfig+0x240>
 8004b0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b12:	d815      	bhi.n	8004b40 <UART_SetConfig+0x258>
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d003      	beq.n	8004b20 <UART_SetConfig+0x238>
 8004b18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b1c:	d008      	beq.n	8004b30 <UART_SetConfig+0x248>
 8004b1e:	e00f      	b.n	8004b40 <UART_SetConfig+0x258>
 8004b20:	2300      	movs	r3, #0
 8004b22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b26:	e052      	b.n	8004bce <UART_SetConfig+0x2e6>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b2e:	e04e      	b.n	8004bce <UART_SetConfig+0x2e6>
 8004b30:	2304      	movs	r3, #4
 8004b32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b36:	e04a      	b.n	8004bce <UART_SetConfig+0x2e6>
 8004b38:	2308      	movs	r3, #8
 8004b3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b3e:	e046      	b.n	8004bce <UART_SetConfig+0x2e6>
 8004b40:	2310      	movs	r3, #16
 8004b42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b46:	e042      	b.n	8004bce <UART_SetConfig+0x2e6>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a17      	ldr	r2, [pc, #92]	@ (8004bac <UART_SetConfig+0x2c4>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d13a      	bne.n	8004bc8 <UART_SetConfig+0x2e0>
 8004b52:	4b18      	ldr	r3, [pc, #96]	@ (8004bb4 <UART_SetConfig+0x2cc>)
 8004b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b58:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004b5c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b60:	d01a      	beq.n	8004b98 <UART_SetConfig+0x2b0>
 8004b62:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b66:	d81b      	bhi.n	8004ba0 <UART_SetConfig+0x2b8>
 8004b68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b6c:	d00c      	beq.n	8004b88 <UART_SetConfig+0x2a0>
 8004b6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b72:	d815      	bhi.n	8004ba0 <UART_SetConfig+0x2b8>
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d003      	beq.n	8004b80 <UART_SetConfig+0x298>
 8004b78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b7c:	d008      	beq.n	8004b90 <UART_SetConfig+0x2a8>
 8004b7e:	e00f      	b.n	8004ba0 <UART_SetConfig+0x2b8>
 8004b80:	2300      	movs	r3, #0
 8004b82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b86:	e022      	b.n	8004bce <UART_SetConfig+0x2e6>
 8004b88:	2302      	movs	r3, #2
 8004b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b8e:	e01e      	b.n	8004bce <UART_SetConfig+0x2e6>
 8004b90:	2304      	movs	r3, #4
 8004b92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b96:	e01a      	b.n	8004bce <UART_SetConfig+0x2e6>
 8004b98:	2308      	movs	r3, #8
 8004b9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b9e:	e016      	b.n	8004bce <UART_SetConfig+0x2e6>
 8004ba0:	2310      	movs	r3, #16
 8004ba2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ba6:	e012      	b.n	8004bce <UART_SetConfig+0x2e6>
 8004ba8:	efff69f3 	.word	0xefff69f3
 8004bac:	40008000 	.word	0x40008000
 8004bb0:	40013800 	.word	0x40013800
 8004bb4:	40021000 	.word	0x40021000
 8004bb8:	40004400 	.word	0x40004400
 8004bbc:	40004800 	.word	0x40004800
 8004bc0:	40004c00 	.word	0x40004c00
 8004bc4:	40005000 	.word	0x40005000
 8004bc8:	2310      	movs	r3, #16
 8004bca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a9f      	ldr	r2, [pc, #636]	@ (8004e50 <UART_SetConfig+0x568>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d17a      	bne.n	8004cce <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bd8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d824      	bhi.n	8004c2a <UART_SetConfig+0x342>
 8004be0:	a201      	add	r2, pc, #4	@ (adr r2, 8004be8 <UART_SetConfig+0x300>)
 8004be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be6:	bf00      	nop
 8004be8:	08004c0d 	.word	0x08004c0d
 8004bec:	08004c2b 	.word	0x08004c2b
 8004bf0:	08004c15 	.word	0x08004c15
 8004bf4:	08004c2b 	.word	0x08004c2b
 8004bf8:	08004c1b 	.word	0x08004c1b
 8004bfc:	08004c2b 	.word	0x08004c2b
 8004c00:	08004c2b 	.word	0x08004c2b
 8004c04:	08004c2b 	.word	0x08004c2b
 8004c08:	08004c23 	.word	0x08004c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c0c:	f7fd fc24 	bl	8002458 <HAL_RCC_GetPCLK1Freq>
 8004c10:	61f8      	str	r0, [r7, #28]
        break;
 8004c12:	e010      	b.n	8004c36 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c14:	4b8f      	ldr	r3, [pc, #572]	@ (8004e54 <UART_SetConfig+0x56c>)
 8004c16:	61fb      	str	r3, [r7, #28]
        break;
 8004c18:	e00d      	b.n	8004c36 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c1a:	f7fd fb85 	bl	8002328 <HAL_RCC_GetSysClockFreq>
 8004c1e:	61f8      	str	r0, [r7, #28]
        break;
 8004c20:	e009      	b.n	8004c36 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c26:	61fb      	str	r3, [r7, #28]
        break;
 8004c28:	e005      	b.n	8004c36 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004c34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f000 80fb 	beq.w	8004e34 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	4613      	mov	r3, r2
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	4413      	add	r3, r2
 8004c48:	69fa      	ldr	r2, [r7, #28]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d305      	bcc.n	8004c5a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c54:	69fa      	ldr	r2, [r7, #28]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d903      	bls.n	8004c62 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004c60:	e0e8      	b.n	8004e34 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	2200      	movs	r2, #0
 8004c66:	461c      	mov	r4, r3
 8004c68:	4615      	mov	r5, r2
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	f04f 0300 	mov.w	r3, #0
 8004c72:	022b      	lsls	r3, r5, #8
 8004c74:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004c78:	0222      	lsls	r2, r4, #8
 8004c7a:	68f9      	ldr	r1, [r7, #12]
 8004c7c:	6849      	ldr	r1, [r1, #4]
 8004c7e:	0849      	lsrs	r1, r1, #1
 8004c80:	2000      	movs	r0, #0
 8004c82:	4688      	mov	r8, r1
 8004c84:	4681      	mov	r9, r0
 8004c86:	eb12 0a08 	adds.w	sl, r2, r8
 8004c8a:	eb43 0b09 	adc.w	fp, r3, r9
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	603b      	str	r3, [r7, #0]
 8004c96:	607a      	str	r2, [r7, #4]
 8004c98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c9c:	4650      	mov	r0, sl
 8004c9e:	4659      	mov	r1, fp
 8004ca0:	f7fb fae6 	bl	8000270 <__aeabi_uldivmod>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4613      	mov	r3, r2
 8004caa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cb2:	d308      	bcc.n	8004cc6 <UART_SetConfig+0x3de>
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cba:	d204      	bcs.n	8004cc6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	60da      	str	r2, [r3, #12]
 8004cc4:	e0b6      	b.n	8004e34 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004ccc:	e0b2      	b.n	8004e34 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cd6:	d15e      	bne.n	8004d96 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004cd8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d828      	bhi.n	8004d32 <UART_SetConfig+0x44a>
 8004ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce8 <UART_SetConfig+0x400>)
 8004ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce6:	bf00      	nop
 8004ce8:	08004d0d 	.word	0x08004d0d
 8004cec:	08004d15 	.word	0x08004d15
 8004cf0:	08004d1d 	.word	0x08004d1d
 8004cf4:	08004d33 	.word	0x08004d33
 8004cf8:	08004d23 	.word	0x08004d23
 8004cfc:	08004d33 	.word	0x08004d33
 8004d00:	08004d33 	.word	0x08004d33
 8004d04:	08004d33 	.word	0x08004d33
 8004d08:	08004d2b 	.word	0x08004d2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d0c:	f7fd fba4 	bl	8002458 <HAL_RCC_GetPCLK1Freq>
 8004d10:	61f8      	str	r0, [r7, #28]
        break;
 8004d12:	e014      	b.n	8004d3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d14:	f7fd fbb6 	bl	8002484 <HAL_RCC_GetPCLK2Freq>
 8004d18:	61f8      	str	r0, [r7, #28]
        break;
 8004d1a:	e010      	b.n	8004d3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d1c:	4b4d      	ldr	r3, [pc, #308]	@ (8004e54 <UART_SetConfig+0x56c>)
 8004d1e:	61fb      	str	r3, [r7, #28]
        break;
 8004d20:	e00d      	b.n	8004d3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d22:	f7fd fb01 	bl	8002328 <HAL_RCC_GetSysClockFreq>
 8004d26:	61f8      	str	r0, [r7, #28]
        break;
 8004d28:	e009      	b.n	8004d3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d2e:	61fb      	str	r3, [r7, #28]
        break;
 8004d30:	e005      	b.n	8004d3e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004d3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d077      	beq.n	8004e34 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	005a      	lsls	r2, r3, #1
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	085b      	lsrs	r3, r3, #1
 8004d4e:	441a      	add	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d58:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	2b0f      	cmp	r3, #15
 8004d5e:	d916      	bls.n	8004d8e <UART_SetConfig+0x4a6>
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d66:	d212      	bcs.n	8004d8e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	f023 030f 	bic.w	r3, r3, #15
 8004d70:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	085b      	lsrs	r3, r3, #1
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	8afb      	ldrh	r3, [r7, #22]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	8afa      	ldrh	r2, [r7, #22]
 8004d8a:	60da      	str	r2, [r3, #12]
 8004d8c:	e052      	b.n	8004e34 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d94:	e04e      	b.n	8004e34 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d96:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d9a:	2b08      	cmp	r3, #8
 8004d9c:	d827      	bhi.n	8004dee <UART_SetConfig+0x506>
 8004d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8004da4 <UART_SetConfig+0x4bc>)
 8004da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da4:	08004dc9 	.word	0x08004dc9
 8004da8:	08004dd1 	.word	0x08004dd1
 8004dac:	08004dd9 	.word	0x08004dd9
 8004db0:	08004def 	.word	0x08004def
 8004db4:	08004ddf 	.word	0x08004ddf
 8004db8:	08004def 	.word	0x08004def
 8004dbc:	08004def 	.word	0x08004def
 8004dc0:	08004def 	.word	0x08004def
 8004dc4:	08004de7 	.word	0x08004de7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dc8:	f7fd fb46 	bl	8002458 <HAL_RCC_GetPCLK1Freq>
 8004dcc:	61f8      	str	r0, [r7, #28]
        break;
 8004dce:	e014      	b.n	8004dfa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dd0:	f7fd fb58 	bl	8002484 <HAL_RCC_GetPCLK2Freq>
 8004dd4:	61f8      	str	r0, [r7, #28]
        break;
 8004dd6:	e010      	b.n	8004dfa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dd8:	4b1e      	ldr	r3, [pc, #120]	@ (8004e54 <UART_SetConfig+0x56c>)
 8004dda:	61fb      	str	r3, [r7, #28]
        break;
 8004ddc:	e00d      	b.n	8004dfa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dde:	f7fd faa3 	bl	8002328 <HAL_RCC_GetSysClockFreq>
 8004de2:	61f8      	str	r0, [r7, #28]
        break;
 8004de4:	e009      	b.n	8004dfa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004de6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dea:	61fb      	str	r3, [r7, #28]
        break;
 8004dec:	e005      	b.n	8004dfa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004df8:	bf00      	nop
    }

    if (pclk != 0U)
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d019      	beq.n	8004e34 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	085a      	lsrs	r2, r3, #1
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	441a      	add	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e12:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	2b0f      	cmp	r3, #15
 8004e18:	d909      	bls.n	8004e2e <UART_SetConfig+0x546>
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e20:	d205      	bcs.n	8004e2e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	60da      	str	r2, [r3, #12]
 8004e2c:	e002      	b.n	8004e34 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004e40:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3728      	adds	r7, #40	@ 0x28
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e4e:	bf00      	nop
 8004e50:	40008000 	.word	0x40008000
 8004e54:	00f42400 	.word	0x00f42400

08004e58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e64:	f003 0308 	and.w	r3, r3, #8
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00a      	beq.n	8004e82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00a      	beq.n	8004ec6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eca:	f003 0304 	and.w	r3, r3, #4
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eec:	f003 0310 	and.w	r3, r3, #16
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00a      	beq.n	8004f0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0e:	f003 0320 	and.w	r3, r3, #32
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d01a      	beq.n	8004f6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f56:	d10a      	bne.n	8004f6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	605a      	str	r2, [r3, #4]
  }
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b098      	sub	sp, #96	@ 0x60
 8004fa0:	af02      	add	r7, sp, #8
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fac:	f7fc f936 	bl	800121c <HAL_GetTick>
 8004fb0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0308 	and.w	r3, r3, #8
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	d12e      	bne.n	800501e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fc0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f88c 	bl	80050ec <UART_WaitOnFlagUntilTimeout>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d021      	beq.n	800501e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fe2:	e853 3f00 	ldrex	r3, [r3]
 8004fe6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fee:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ff8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ffa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ffe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005000:	e841 2300 	strex	r3, r2, [r1]
 8005004:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1e6      	bne.n	8004fda <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2220      	movs	r2, #32
 8005010:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e062      	b.n	80050e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0304 	and.w	r3, r3, #4
 8005028:	2b04      	cmp	r3, #4
 800502a:	d149      	bne.n	80050c0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800502c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005034:	2200      	movs	r2, #0
 8005036:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f856 	bl	80050ec <UART_WaitOnFlagUntilTimeout>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d03c      	beq.n	80050c0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504e:	e853 3f00 	ldrex	r3, [r3]
 8005052:	623b      	str	r3, [r7, #32]
   return(result);
 8005054:	6a3b      	ldr	r3, [r7, #32]
 8005056:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800505a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	461a      	mov	r2, r3
 8005062:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005064:	633b      	str	r3, [r7, #48]	@ 0x30
 8005066:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005068:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800506a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800506c:	e841 2300 	strex	r3, r2, [r1]
 8005070:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1e6      	bne.n	8005046 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	3308      	adds	r3, #8
 800507e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	e853 3f00 	ldrex	r3, [r3]
 8005086:	60fb      	str	r3, [r7, #12]
   return(result);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0301 	bic.w	r3, r3, #1
 800508e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	3308      	adds	r3, #8
 8005096:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005098:	61fa      	str	r2, [r7, #28]
 800509a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509c:	69b9      	ldr	r1, [r7, #24]
 800509e:	69fa      	ldr	r2, [r7, #28]
 80050a0:	e841 2300 	strex	r3, r2, [r1]
 80050a4:	617b      	str	r3, [r7, #20]
   return(result);
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1e5      	bne.n	8005078 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2220      	movs	r2, #32
 80050b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e011      	b.n	80050e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2220      	movs	r2, #32
 80050c4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2220      	movs	r2, #32
 80050ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3758      	adds	r7, #88	@ 0x58
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	603b      	str	r3, [r7, #0]
 80050f8:	4613      	mov	r3, r2
 80050fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050fc:	e049      	b.n	8005192 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005104:	d045      	beq.n	8005192 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005106:	f7fc f889 	bl	800121c <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	429a      	cmp	r2, r3
 8005114:	d302      	bcc.n	800511c <UART_WaitOnFlagUntilTimeout+0x30>
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e048      	b.n	80051b2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0304 	and.w	r3, r3, #4
 800512a:	2b00      	cmp	r3, #0
 800512c:	d031      	beq.n	8005192 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	f003 0308 	and.w	r3, r3, #8
 8005138:	2b08      	cmp	r3, #8
 800513a:	d110      	bne.n	800515e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2208      	movs	r2, #8
 8005142:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f000 f8ff 	bl	8005348 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2208      	movs	r2, #8
 800514e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e029      	b.n	80051b2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	69db      	ldr	r3, [r3, #28]
 8005164:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005168:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800516c:	d111      	bne.n	8005192 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005176:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f000 f8e5 	bl	8005348 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2220      	movs	r2, #32
 8005182:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e00f      	b.n	80051b2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	69da      	ldr	r2, [r3, #28]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	4013      	ands	r3, r2
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	429a      	cmp	r2, r3
 80051a0:	bf0c      	ite	eq
 80051a2:	2301      	moveq	r3, #1
 80051a4:	2300      	movne	r3, #0
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	461a      	mov	r2, r3
 80051aa:	79fb      	ldrb	r3, [r7, #7]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d0a6      	beq.n	80050fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
	...

080051bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051bc:	b480      	push	{r7}
 80051be:	b097      	sub	sp, #92	@ 0x5c
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	4613      	mov	r3, r2
 80051c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	88fa      	ldrh	r2, [r7, #6]
 80051d4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	88fa      	ldrh	r2, [r7, #6]
 80051dc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051ee:	d10e      	bne.n	800520e <UART_Start_Receive_IT+0x52>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d105      	bne.n	8005204 <UART_Start_Receive_IT+0x48>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80051fe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005202:	e02d      	b.n	8005260 <UART_Start_Receive_IT+0xa4>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	22ff      	movs	r2, #255	@ 0xff
 8005208:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800520c:	e028      	b.n	8005260 <UART_Start_Receive_IT+0xa4>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10d      	bne.n	8005232 <UART_Start_Receive_IT+0x76>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d104      	bne.n	8005228 <UART_Start_Receive_IT+0x6c>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	22ff      	movs	r2, #255	@ 0xff
 8005222:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005226:	e01b      	b.n	8005260 <UART_Start_Receive_IT+0xa4>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	227f      	movs	r2, #127	@ 0x7f
 800522c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005230:	e016      	b.n	8005260 <UART_Start_Receive_IT+0xa4>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800523a:	d10d      	bne.n	8005258 <UART_Start_Receive_IT+0x9c>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d104      	bne.n	800524e <UART_Start_Receive_IT+0x92>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	227f      	movs	r2, #127	@ 0x7f
 8005248:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800524c:	e008      	b.n	8005260 <UART_Start_Receive_IT+0xa4>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	223f      	movs	r2, #63	@ 0x3f
 8005252:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005256:	e003      	b.n	8005260 <UART_Start_Receive_IT+0xa4>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2222      	movs	r2, #34	@ 0x22
 800526c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	3308      	adds	r3, #8
 8005276:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800527a:	e853 3f00 	ldrex	r3, [r3]
 800527e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005282:	f043 0301 	orr.w	r3, r3, #1
 8005286:	657b      	str	r3, [r7, #84]	@ 0x54
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	3308      	adds	r3, #8
 800528e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005290:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005292:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005294:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005296:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005298:	e841 2300 	strex	r3, r2, [r1]
 800529c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800529e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1e5      	bne.n	8005270 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052ac:	d107      	bne.n	80052be <UART_Start_Receive_IT+0x102>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d103      	bne.n	80052be <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4a21      	ldr	r2, [pc, #132]	@ (8005340 <UART_Start_Receive_IT+0x184>)
 80052ba:	669a      	str	r2, [r3, #104]	@ 0x68
 80052bc:	e002      	b.n	80052c4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4a20      	ldr	r2, [pc, #128]	@ (8005344 <UART_Start_Receive_IT+0x188>)
 80052c2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d019      	beq.n	8005300 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d4:	e853 3f00 	ldrex	r3, [r3]
 80052d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052dc:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80052e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	461a      	mov	r2, r3
 80052e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80052ec:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80052f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80052f2:	e841 2300 	strex	r3, r2, [r1]
 80052f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80052f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1e6      	bne.n	80052cc <UART_Start_Receive_IT+0x110>
 80052fe:	e018      	b.n	8005332 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	e853 3f00 	ldrex	r3, [r3]
 800530c:	613b      	str	r3, [r7, #16]
   return(result);
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	f043 0320 	orr.w	r3, r3, #32
 8005314:	653b      	str	r3, [r7, #80]	@ 0x50
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	461a      	mov	r2, r3
 800531c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800531e:	623b      	str	r3, [r7, #32]
 8005320:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005322:	69f9      	ldr	r1, [r7, #28]
 8005324:	6a3a      	ldr	r2, [r7, #32]
 8005326:	e841 2300 	strex	r3, r2, [r1]
 800532a:	61bb      	str	r3, [r7, #24]
   return(result);
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1e6      	bne.n	8005300 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	375c      	adds	r7, #92	@ 0x5c
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	0800564d 	.word	0x0800564d
 8005344:	08005491 	.word	0x08005491

08005348 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005348:	b480      	push	{r7}
 800534a:	b095      	sub	sp, #84	@ 0x54
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005358:	e853 3f00 	ldrex	r3, [r3]
 800535c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800535e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005360:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005364:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	461a      	mov	r2, r3
 800536c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800536e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005370:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005372:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005374:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005376:	e841 2300 	strex	r3, r2, [r1]
 800537a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800537c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1e6      	bne.n	8005350 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	3308      	adds	r3, #8
 8005388:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	e853 3f00 	ldrex	r3, [r3]
 8005390:	61fb      	str	r3, [r7, #28]
   return(result);
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	f023 0301 	bic.w	r3, r3, #1
 8005398:	64bb      	str	r3, [r7, #72]	@ 0x48
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	3308      	adds	r3, #8
 80053a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053aa:	e841 2300 	strex	r3, r2, [r1]
 80053ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1e5      	bne.n	8005382 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d118      	bne.n	80053f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	e853 3f00 	ldrex	r3, [r3]
 80053ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f023 0310 	bic.w	r3, r3, #16
 80053d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	461a      	mov	r2, r3
 80053da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053dc:	61bb      	str	r3, [r7, #24]
 80053de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e0:	6979      	ldr	r1, [r7, #20]
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	e841 2300 	strex	r3, r2, [r1]
 80053e8:	613b      	str	r3, [r7, #16]
   return(result);
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1e6      	bne.n	80053be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2220      	movs	r2, #32
 80053f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005404:	bf00      	nop
 8005406:	3754      	adds	r7, #84	@ 0x54
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800541c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f7ff fa44 	bl	80048bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005434:	bf00      	nop
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b088      	sub	sp, #32
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	e853 3f00 	ldrex	r3, [r3]
 8005450:	60bb      	str	r3, [r7, #8]
   return(result);
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005458:	61fb      	str	r3, [r7, #28]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	461a      	mov	r2, r3
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	61bb      	str	r3, [r7, #24]
 8005464:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005466:	6979      	ldr	r1, [r7, #20]
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	e841 2300 	strex	r3, r2, [r1]
 800546e:	613b      	str	r3, [r7, #16]
   return(result);
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1e6      	bne.n	8005444 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2220      	movs	r2, #32
 800547a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7ff fa10 	bl	80048a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005488:	bf00      	nop
 800548a:	3720      	adds	r7, #32
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b09c      	sub	sp, #112	@ 0x70
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800549e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054a8:	2b22      	cmp	r3, #34	@ 0x22
 80054aa:	f040 80be 	bne.w	800562a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80054b4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80054b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80054bc:	b2d9      	uxtb	r1, r3
 80054be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80054c2:	b2da      	uxtb	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c8:	400a      	ands	r2, r1
 80054ca:	b2d2      	uxtb	r2, r2
 80054cc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054d2:	1c5a      	adds	r2, r3, #1
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80054de:	b29b      	uxth	r3, r3
 80054e0:	3b01      	subs	r3, #1
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f040 80a3 	bne.w	800563e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005500:	e853 3f00 	ldrex	r3, [r3]
 8005504:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005506:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005508:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800550c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005516:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005518:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800551c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800551e:	e841 2300 	strex	r3, r2, [r1]
 8005522:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005524:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1e6      	bne.n	80054f8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	3308      	adds	r3, #8
 8005530:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005534:	e853 3f00 	ldrex	r3, [r3]
 8005538:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800553a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800553c:	f023 0301 	bic.w	r3, r3, #1
 8005540:	667b      	str	r3, [r7, #100]	@ 0x64
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	3308      	adds	r3, #8
 8005548:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800554a:	647a      	str	r2, [r7, #68]	@ 0x44
 800554c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005550:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005552:	e841 2300 	strex	r3, r2, [r1]
 8005556:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1e5      	bne.n	800552a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2220      	movs	r2, #32
 8005562:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a34      	ldr	r2, [pc, #208]	@ (8005648 <UART_RxISR_8BIT+0x1b8>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d01f      	beq.n	80055bc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d018      	beq.n	80055bc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005592:	e853 3f00 	ldrex	r3, [r3]
 8005596:	623b      	str	r3, [r7, #32]
   return(result);
 8005598:	6a3b      	ldr	r3, [r7, #32]
 800559a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800559e:	663b      	str	r3, [r7, #96]	@ 0x60
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	461a      	mov	r2, r3
 80055a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80055aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055b0:	e841 2300 	strex	r3, r2, [r1]
 80055b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1e6      	bne.n	800558a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d12e      	bne.n	8005622 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	e853 3f00 	ldrex	r3, [r3]
 80055d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f023 0310 	bic.w	r3, r3, #16
 80055de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	461a      	mov	r2, r3
 80055e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055e8:	61fb      	str	r3, [r7, #28]
 80055ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ec:	69b9      	ldr	r1, [r7, #24]
 80055ee:	69fa      	ldr	r2, [r7, #28]
 80055f0:	e841 2300 	strex	r3, r2, [r1]
 80055f4:	617b      	str	r3, [r7, #20]
   return(result);
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1e6      	bne.n	80055ca <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	f003 0310 	and.w	r3, r3, #16
 8005606:	2b10      	cmp	r3, #16
 8005608:	d103      	bne.n	8005612 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2210      	movs	r2, #16
 8005610:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005618:	4619      	mov	r1, r3
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7ff f958 	bl	80048d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005620:	e00d      	b.n	800563e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7fb fb24 	bl	8000c70 <HAL_UART_RxCpltCallback>
}
 8005628:	e009      	b.n	800563e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	8b1b      	ldrh	r3, [r3, #24]
 8005630:	b29a      	uxth	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f042 0208 	orr.w	r2, r2, #8
 800563a:	b292      	uxth	r2, r2
 800563c:	831a      	strh	r2, [r3, #24]
}
 800563e:	bf00      	nop
 8005640:	3770      	adds	r7, #112	@ 0x70
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	40008000 	.word	0x40008000

0800564c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b09c      	sub	sp, #112	@ 0x70
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800565a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005664:	2b22      	cmp	r3, #34	@ 0x22
 8005666:	f040 80be 	bne.w	80057e6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005670:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005678:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800567a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800567e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005682:	4013      	ands	r3, r2
 8005684:	b29a      	uxth	r2, r3
 8005686:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005688:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800568e:	1c9a      	adds	r2, r3, #2
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800569a:	b29b      	uxth	r3, r3
 800569c:	3b01      	subs	r3, #1
 800569e:	b29a      	uxth	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f040 80a3 	bne.w	80057fa <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056bc:	e853 3f00 	ldrex	r3, [r3]
 80056c0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80056c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	461a      	mov	r2, r3
 80056d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80056d4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80056d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80056da:	e841 2300 	strex	r3, r2, [r1]
 80056de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80056e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1e6      	bne.n	80056b4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	3308      	adds	r3, #8
 80056ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056f0:	e853 3f00 	ldrex	r3, [r3]
 80056f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f8:	f023 0301 	bic.w	r3, r3, #1
 80056fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	3308      	adds	r3, #8
 8005704:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005706:	643a      	str	r2, [r7, #64]	@ 0x40
 8005708:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800570c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800570e:	e841 2300 	strex	r3, r2, [r1]
 8005712:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1e5      	bne.n	80056e6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2220      	movs	r2, #32
 800571e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a34      	ldr	r2, [pc, #208]	@ (8005804 <UART_RxISR_16BIT+0x1b8>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d01f      	beq.n	8005778 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d018      	beq.n	8005778 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574c:	6a3b      	ldr	r3, [r7, #32]
 800574e:	e853 3f00 	ldrex	r3, [r3]
 8005752:	61fb      	str	r3, [r7, #28]
   return(result);
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800575a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	461a      	mov	r2, r3
 8005762:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005764:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005766:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005768:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800576a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800576c:	e841 2300 	strex	r3, r2, [r1]
 8005770:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1e6      	bne.n	8005746 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800577c:	2b01      	cmp	r3, #1
 800577e:	d12e      	bne.n	80057de <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	e853 3f00 	ldrex	r3, [r3]
 8005792:	60bb      	str	r3, [r7, #8]
   return(result);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f023 0310 	bic.w	r3, r3, #16
 800579a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	461a      	mov	r2, r3
 80057a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057a4:	61bb      	str	r3, [r7, #24]
 80057a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a8:	6979      	ldr	r1, [r7, #20]
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	e841 2300 	strex	r3, r2, [r1]
 80057b0:	613b      	str	r3, [r7, #16]
   return(result);
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1e6      	bne.n	8005786 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	69db      	ldr	r3, [r3, #28]
 80057be:	f003 0310 	and.w	r3, r3, #16
 80057c2:	2b10      	cmp	r3, #16
 80057c4:	d103      	bne.n	80057ce <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2210      	movs	r2, #16
 80057cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80057d4:	4619      	mov	r1, r3
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7ff f87a 	bl	80048d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057dc:	e00d      	b.n	80057fa <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7fb fa46 	bl	8000c70 <HAL_UART_RxCpltCallback>
}
 80057e4:	e009      	b.n	80057fa <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	8b1b      	ldrh	r3, [r3, #24]
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0208 	orr.w	r2, r2, #8
 80057f6:	b292      	uxth	r2, r2
 80057f8:	831a      	strh	r2, [r3, #24]
}
 80057fa:	bf00      	nop
 80057fc:	3770      	adds	r7, #112	@ 0x70
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	40008000 	.word	0x40008000

08005808 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <_strtol_l.constprop.0>:
 800581c:	2b24      	cmp	r3, #36	@ 0x24
 800581e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005822:	4686      	mov	lr, r0
 8005824:	4690      	mov	r8, r2
 8005826:	d801      	bhi.n	800582c <_strtol_l.constprop.0+0x10>
 8005828:	2b01      	cmp	r3, #1
 800582a:	d106      	bne.n	800583a <_strtol_l.constprop.0+0x1e>
 800582c:	f000 fa00 	bl	8005c30 <__errno>
 8005830:	2316      	movs	r3, #22
 8005832:	6003      	str	r3, [r0, #0]
 8005834:	2000      	movs	r0, #0
 8005836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800583a:	4834      	ldr	r0, [pc, #208]	@ (800590c <_strtol_l.constprop.0+0xf0>)
 800583c:	460d      	mov	r5, r1
 800583e:	462a      	mov	r2, r5
 8005840:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005844:	5d06      	ldrb	r6, [r0, r4]
 8005846:	f016 0608 	ands.w	r6, r6, #8
 800584a:	d1f8      	bne.n	800583e <_strtol_l.constprop.0+0x22>
 800584c:	2c2d      	cmp	r4, #45	@ 0x2d
 800584e:	d12d      	bne.n	80058ac <_strtol_l.constprop.0+0x90>
 8005850:	782c      	ldrb	r4, [r5, #0]
 8005852:	2601      	movs	r6, #1
 8005854:	1c95      	adds	r5, r2, #2
 8005856:	f033 0210 	bics.w	r2, r3, #16
 800585a:	d109      	bne.n	8005870 <_strtol_l.constprop.0+0x54>
 800585c:	2c30      	cmp	r4, #48	@ 0x30
 800585e:	d12a      	bne.n	80058b6 <_strtol_l.constprop.0+0x9a>
 8005860:	782a      	ldrb	r2, [r5, #0]
 8005862:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005866:	2a58      	cmp	r2, #88	@ 0x58
 8005868:	d125      	bne.n	80058b6 <_strtol_l.constprop.0+0x9a>
 800586a:	786c      	ldrb	r4, [r5, #1]
 800586c:	2310      	movs	r3, #16
 800586e:	3502      	adds	r5, #2
 8005870:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005874:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005878:	2200      	movs	r2, #0
 800587a:	fbbc f9f3 	udiv	r9, ip, r3
 800587e:	4610      	mov	r0, r2
 8005880:	fb03 ca19 	mls	sl, r3, r9, ip
 8005884:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005888:	2f09      	cmp	r7, #9
 800588a:	d81b      	bhi.n	80058c4 <_strtol_l.constprop.0+0xa8>
 800588c:	463c      	mov	r4, r7
 800588e:	42a3      	cmp	r3, r4
 8005890:	dd27      	ble.n	80058e2 <_strtol_l.constprop.0+0xc6>
 8005892:	1c57      	adds	r7, r2, #1
 8005894:	d007      	beq.n	80058a6 <_strtol_l.constprop.0+0x8a>
 8005896:	4581      	cmp	r9, r0
 8005898:	d320      	bcc.n	80058dc <_strtol_l.constprop.0+0xc0>
 800589a:	d101      	bne.n	80058a0 <_strtol_l.constprop.0+0x84>
 800589c:	45a2      	cmp	sl, r4
 800589e:	db1d      	blt.n	80058dc <_strtol_l.constprop.0+0xc0>
 80058a0:	fb00 4003 	mla	r0, r0, r3, r4
 80058a4:	2201      	movs	r2, #1
 80058a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058aa:	e7eb      	b.n	8005884 <_strtol_l.constprop.0+0x68>
 80058ac:	2c2b      	cmp	r4, #43	@ 0x2b
 80058ae:	bf04      	itt	eq
 80058b0:	782c      	ldrbeq	r4, [r5, #0]
 80058b2:	1c95      	addeq	r5, r2, #2
 80058b4:	e7cf      	b.n	8005856 <_strtol_l.constprop.0+0x3a>
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1da      	bne.n	8005870 <_strtol_l.constprop.0+0x54>
 80058ba:	2c30      	cmp	r4, #48	@ 0x30
 80058bc:	bf0c      	ite	eq
 80058be:	2308      	moveq	r3, #8
 80058c0:	230a      	movne	r3, #10
 80058c2:	e7d5      	b.n	8005870 <_strtol_l.constprop.0+0x54>
 80058c4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80058c8:	2f19      	cmp	r7, #25
 80058ca:	d801      	bhi.n	80058d0 <_strtol_l.constprop.0+0xb4>
 80058cc:	3c37      	subs	r4, #55	@ 0x37
 80058ce:	e7de      	b.n	800588e <_strtol_l.constprop.0+0x72>
 80058d0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80058d4:	2f19      	cmp	r7, #25
 80058d6:	d804      	bhi.n	80058e2 <_strtol_l.constprop.0+0xc6>
 80058d8:	3c57      	subs	r4, #87	@ 0x57
 80058da:	e7d8      	b.n	800588e <_strtol_l.constprop.0+0x72>
 80058dc:	f04f 32ff 	mov.w	r2, #4294967295
 80058e0:	e7e1      	b.n	80058a6 <_strtol_l.constprop.0+0x8a>
 80058e2:	1c53      	adds	r3, r2, #1
 80058e4:	d108      	bne.n	80058f8 <_strtol_l.constprop.0+0xdc>
 80058e6:	2322      	movs	r3, #34	@ 0x22
 80058e8:	f8ce 3000 	str.w	r3, [lr]
 80058ec:	4660      	mov	r0, ip
 80058ee:	f1b8 0f00 	cmp.w	r8, #0
 80058f2:	d0a0      	beq.n	8005836 <_strtol_l.constprop.0+0x1a>
 80058f4:	1e69      	subs	r1, r5, #1
 80058f6:	e006      	b.n	8005906 <_strtol_l.constprop.0+0xea>
 80058f8:	b106      	cbz	r6, 80058fc <_strtol_l.constprop.0+0xe0>
 80058fa:	4240      	negs	r0, r0
 80058fc:	f1b8 0f00 	cmp.w	r8, #0
 8005900:	d099      	beq.n	8005836 <_strtol_l.constprop.0+0x1a>
 8005902:	2a00      	cmp	r2, #0
 8005904:	d1f6      	bne.n	80058f4 <_strtol_l.constprop.0+0xd8>
 8005906:	f8c8 1000 	str.w	r1, [r8]
 800590a:	e794      	b.n	8005836 <_strtol_l.constprop.0+0x1a>
 800590c:	08006c19 	.word	0x08006c19

08005910 <strtol>:
 8005910:	4613      	mov	r3, r2
 8005912:	460a      	mov	r2, r1
 8005914:	4601      	mov	r1, r0
 8005916:	4802      	ldr	r0, [pc, #8]	@ (8005920 <strtol+0x10>)
 8005918:	6800      	ldr	r0, [r0, #0]
 800591a:	f7ff bf7f 	b.w	800581c <_strtol_l.constprop.0>
 800591e:	bf00      	nop
 8005920:	20000018 	.word	0x20000018

08005924 <std>:
 8005924:	2300      	movs	r3, #0
 8005926:	b510      	push	{r4, lr}
 8005928:	4604      	mov	r4, r0
 800592a:	e9c0 3300 	strd	r3, r3, [r0]
 800592e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005932:	6083      	str	r3, [r0, #8]
 8005934:	8181      	strh	r1, [r0, #12]
 8005936:	6643      	str	r3, [r0, #100]	@ 0x64
 8005938:	81c2      	strh	r2, [r0, #14]
 800593a:	6183      	str	r3, [r0, #24]
 800593c:	4619      	mov	r1, r3
 800593e:	2208      	movs	r2, #8
 8005940:	305c      	adds	r0, #92	@ 0x5c
 8005942:	f000 f926 	bl	8005b92 <memset>
 8005946:	4b0d      	ldr	r3, [pc, #52]	@ (800597c <std+0x58>)
 8005948:	6263      	str	r3, [r4, #36]	@ 0x24
 800594a:	4b0d      	ldr	r3, [pc, #52]	@ (8005980 <std+0x5c>)
 800594c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800594e:	4b0d      	ldr	r3, [pc, #52]	@ (8005984 <std+0x60>)
 8005950:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005952:	4b0d      	ldr	r3, [pc, #52]	@ (8005988 <std+0x64>)
 8005954:	6323      	str	r3, [r4, #48]	@ 0x30
 8005956:	4b0d      	ldr	r3, [pc, #52]	@ (800598c <std+0x68>)
 8005958:	6224      	str	r4, [r4, #32]
 800595a:	429c      	cmp	r4, r3
 800595c:	d006      	beq.n	800596c <std+0x48>
 800595e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005962:	4294      	cmp	r4, r2
 8005964:	d002      	beq.n	800596c <std+0x48>
 8005966:	33d0      	adds	r3, #208	@ 0xd0
 8005968:	429c      	cmp	r4, r3
 800596a:	d105      	bne.n	8005978 <std+0x54>
 800596c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005974:	f000 b986 	b.w	8005c84 <__retarget_lock_init_recursive>
 8005978:	bd10      	pop	{r4, pc}
 800597a:	bf00      	nop
 800597c:	08005b0d 	.word	0x08005b0d
 8005980:	08005b2f 	.word	0x08005b2f
 8005984:	08005b67 	.word	0x08005b67
 8005988:	08005b8b 	.word	0x08005b8b
 800598c:	20000218 	.word	0x20000218

08005990 <stdio_exit_handler>:
 8005990:	4a02      	ldr	r2, [pc, #8]	@ (800599c <stdio_exit_handler+0xc>)
 8005992:	4903      	ldr	r1, [pc, #12]	@ (80059a0 <stdio_exit_handler+0x10>)
 8005994:	4803      	ldr	r0, [pc, #12]	@ (80059a4 <stdio_exit_handler+0x14>)
 8005996:	f000 b869 	b.w	8005a6c <_fwalk_sglue>
 800599a:	bf00      	nop
 800599c:	2000000c 	.word	0x2000000c
 80059a0:	080067d5 	.word	0x080067d5
 80059a4:	2000001c 	.word	0x2000001c

080059a8 <cleanup_stdio>:
 80059a8:	6841      	ldr	r1, [r0, #4]
 80059aa:	4b0c      	ldr	r3, [pc, #48]	@ (80059dc <cleanup_stdio+0x34>)
 80059ac:	4299      	cmp	r1, r3
 80059ae:	b510      	push	{r4, lr}
 80059b0:	4604      	mov	r4, r0
 80059b2:	d001      	beq.n	80059b8 <cleanup_stdio+0x10>
 80059b4:	f000 ff0e 	bl	80067d4 <_fflush_r>
 80059b8:	68a1      	ldr	r1, [r4, #8]
 80059ba:	4b09      	ldr	r3, [pc, #36]	@ (80059e0 <cleanup_stdio+0x38>)
 80059bc:	4299      	cmp	r1, r3
 80059be:	d002      	beq.n	80059c6 <cleanup_stdio+0x1e>
 80059c0:	4620      	mov	r0, r4
 80059c2:	f000 ff07 	bl	80067d4 <_fflush_r>
 80059c6:	68e1      	ldr	r1, [r4, #12]
 80059c8:	4b06      	ldr	r3, [pc, #24]	@ (80059e4 <cleanup_stdio+0x3c>)
 80059ca:	4299      	cmp	r1, r3
 80059cc:	d004      	beq.n	80059d8 <cleanup_stdio+0x30>
 80059ce:	4620      	mov	r0, r4
 80059d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059d4:	f000 befe 	b.w	80067d4 <_fflush_r>
 80059d8:	bd10      	pop	{r4, pc}
 80059da:	bf00      	nop
 80059dc:	20000218 	.word	0x20000218
 80059e0:	20000280 	.word	0x20000280
 80059e4:	200002e8 	.word	0x200002e8

080059e8 <global_stdio_init.part.0>:
 80059e8:	b510      	push	{r4, lr}
 80059ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005a18 <global_stdio_init.part.0+0x30>)
 80059ec:	4c0b      	ldr	r4, [pc, #44]	@ (8005a1c <global_stdio_init.part.0+0x34>)
 80059ee:	4a0c      	ldr	r2, [pc, #48]	@ (8005a20 <global_stdio_init.part.0+0x38>)
 80059f0:	601a      	str	r2, [r3, #0]
 80059f2:	4620      	mov	r0, r4
 80059f4:	2200      	movs	r2, #0
 80059f6:	2104      	movs	r1, #4
 80059f8:	f7ff ff94 	bl	8005924 <std>
 80059fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005a00:	2201      	movs	r2, #1
 8005a02:	2109      	movs	r1, #9
 8005a04:	f7ff ff8e 	bl	8005924 <std>
 8005a08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a12:	2112      	movs	r1, #18
 8005a14:	f7ff bf86 	b.w	8005924 <std>
 8005a18:	20000350 	.word	0x20000350
 8005a1c:	20000218 	.word	0x20000218
 8005a20:	08005991 	.word	0x08005991

08005a24 <__sfp_lock_acquire>:
 8005a24:	4801      	ldr	r0, [pc, #4]	@ (8005a2c <__sfp_lock_acquire+0x8>)
 8005a26:	f000 b92e 	b.w	8005c86 <__retarget_lock_acquire_recursive>
 8005a2a:	bf00      	nop
 8005a2c:	20000359 	.word	0x20000359

08005a30 <__sfp_lock_release>:
 8005a30:	4801      	ldr	r0, [pc, #4]	@ (8005a38 <__sfp_lock_release+0x8>)
 8005a32:	f000 b929 	b.w	8005c88 <__retarget_lock_release_recursive>
 8005a36:	bf00      	nop
 8005a38:	20000359 	.word	0x20000359

08005a3c <__sinit>:
 8005a3c:	b510      	push	{r4, lr}
 8005a3e:	4604      	mov	r4, r0
 8005a40:	f7ff fff0 	bl	8005a24 <__sfp_lock_acquire>
 8005a44:	6a23      	ldr	r3, [r4, #32]
 8005a46:	b11b      	cbz	r3, 8005a50 <__sinit+0x14>
 8005a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a4c:	f7ff bff0 	b.w	8005a30 <__sfp_lock_release>
 8005a50:	4b04      	ldr	r3, [pc, #16]	@ (8005a64 <__sinit+0x28>)
 8005a52:	6223      	str	r3, [r4, #32]
 8005a54:	4b04      	ldr	r3, [pc, #16]	@ (8005a68 <__sinit+0x2c>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1f5      	bne.n	8005a48 <__sinit+0xc>
 8005a5c:	f7ff ffc4 	bl	80059e8 <global_stdio_init.part.0>
 8005a60:	e7f2      	b.n	8005a48 <__sinit+0xc>
 8005a62:	bf00      	nop
 8005a64:	080059a9 	.word	0x080059a9
 8005a68:	20000350 	.word	0x20000350

08005a6c <_fwalk_sglue>:
 8005a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a70:	4607      	mov	r7, r0
 8005a72:	4688      	mov	r8, r1
 8005a74:	4614      	mov	r4, r2
 8005a76:	2600      	movs	r6, #0
 8005a78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a7c:	f1b9 0901 	subs.w	r9, r9, #1
 8005a80:	d505      	bpl.n	8005a8e <_fwalk_sglue+0x22>
 8005a82:	6824      	ldr	r4, [r4, #0]
 8005a84:	2c00      	cmp	r4, #0
 8005a86:	d1f7      	bne.n	8005a78 <_fwalk_sglue+0xc>
 8005a88:	4630      	mov	r0, r6
 8005a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a8e:	89ab      	ldrh	r3, [r5, #12]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d907      	bls.n	8005aa4 <_fwalk_sglue+0x38>
 8005a94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	d003      	beq.n	8005aa4 <_fwalk_sglue+0x38>
 8005a9c:	4629      	mov	r1, r5
 8005a9e:	4638      	mov	r0, r7
 8005aa0:	47c0      	blx	r8
 8005aa2:	4306      	orrs	r6, r0
 8005aa4:	3568      	adds	r5, #104	@ 0x68
 8005aa6:	e7e9      	b.n	8005a7c <_fwalk_sglue+0x10>

08005aa8 <iprintf>:
 8005aa8:	b40f      	push	{r0, r1, r2, r3}
 8005aaa:	b507      	push	{r0, r1, r2, lr}
 8005aac:	4906      	ldr	r1, [pc, #24]	@ (8005ac8 <iprintf+0x20>)
 8005aae:	ab04      	add	r3, sp, #16
 8005ab0:	6808      	ldr	r0, [r1, #0]
 8005ab2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ab6:	6881      	ldr	r1, [r0, #8]
 8005ab8:	9301      	str	r3, [sp, #4]
 8005aba:	f000 fb61 	bl	8006180 <_vfiprintf_r>
 8005abe:	b003      	add	sp, #12
 8005ac0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ac4:	b004      	add	sp, #16
 8005ac6:	4770      	bx	lr
 8005ac8:	20000018 	.word	0x20000018

08005acc <siprintf>:
 8005acc:	b40e      	push	{r1, r2, r3}
 8005ace:	b500      	push	{lr}
 8005ad0:	b09c      	sub	sp, #112	@ 0x70
 8005ad2:	ab1d      	add	r3, sp, #116	@ 0x74
 8005ad4:	9002      	str	r0, [sp, #8]
 8005ad6:	9006      	str	r0, [sp, #24]
 8005ad8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005adc:	4809      	ldr	r0, [pc, #36]	@ (8005b04 <siprintf+0x38>)
 8005ade:	9107      	str	r1, [sp, #28]
 8005ae0:	9104      	str	r1, [sp, #16]
 8005ae2:	4909      	ldr	r1, [pc, #36]	@ (8005b08 <siprintf+0x3c>)
 8005ae4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ae8:	9105      	str	r1, [sp, #20]
 8005aea:	6800      	ldr	r0, [r0, #0]
 8005aec:	9301      	str	r3, [sp, #4]
 8005aee:	a902      	add	r1, sp, #8
 8005af0:	f000 fa20 	bl	8005f34 <_svfiprintf_r>
 8005af4:	9b02      	ldr	r3, [sp, #8]
 8005af6:	2200      	movs	r2, #0
 8005af8:	701a      	strb	r2, [r3, #0]
 8005afa:	b01c      	add	sp, #112	@ 0x70
 8005afc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b00:	b003      	add	sp, #12
 8005b02:	4770      	bx	lr
 8005b04:	20000018 	.word	0x20000018
 8005b08:	ffff0208 	.word	0xffff0208

08005b0c <__sread>:
 8005b0c:	b510      	push	{r4, lr}
 8005b0e:	460c      	mov	r4, r1
 8005b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b14:	f000 f868 	bl	8005be8 <_read_r>
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	bfab      	itete	ge
 8005b1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005b1e:	89a3      	ldrhlt	r3, [r4, #12]
 8005b20:	181b      	addge	r3, r3, r0
 8005b22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005b26:	bfac      	ite	ge
 8005b28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005b2a:	81a3      	strhlt	r3, [r4, #12]
 8005b2c:	bd10      	pop	{r4, pc}

08005b2e <__swrite>:
 8005b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b32:	461f      	mov	r7, r3
 8005b34:	898b      	ldrh	r3, [r1, #12]
 8005b36:	05db      	lsls	r3, r3, #23
 8005b38:	4605      	mov	r5, r0
 8005b3a:	460c      	mov	r4, r1
 8005b3c:	4616      	mov	r6, r2
 8005b3e:	d505      	bpl.n	8005b4c <__swrite+0x1e>
 8005b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b44:	2302      	movs	r3, #2
 8005b46:	2200      	movs	r2, #0
 8005b48:	f000 f83c 	bl	8005bc4 <_lseek_r>
 8005b4c:	89a3      	ldrh	r3, [r4, #12]
 8005b4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b56:	81a3      	strh	r3, [r4, #12]
 8005b58:	4632      	mov	r2, r6
 8005b5a:	463b      	mov	r3, r7
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b62:	f000 b853 	b.w	8005c0c <_write_r>

08005b66 <__sseek>:
 8005b66:	b510      	push	{r4, lr}
 8005b68:	460c      	mov	r4, r1
 8005b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b6e:	f000 f829 	bl	8005bc4 <_lseek_r>
 8005b72:	1c43      	adds	r3, r0, #1
 8005b74:	89a3      	ldrh	r3, [r4, #12]
 8005b76:	bf15      	itete	ne
 8005b78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005b7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005b7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005b82:	81a3      	strheq	r3, [r4, #12]
 8005b84:	bf18      	it	ne
 8005b86:	81a3      	strhne	r3, [r4, #12]
 8005b88:	bd10      	pop	{r4, pc}

08005b8a <__sclose>:
 8005b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b8e:	f000 b809 	b.w	8005ba4 <_close_r>

08005b92 <memset>:
 8005b92:	4402      	add	r2, r0
 8005b94:	4603      	mov	r3, r0
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d100      	bne.n	8005b9c <memset+0xa>
 8005b9a:	4770      	bx	lr
 8005b9c:	f803 1b01 	strb.w	r1, [r3], #1
 8005ba0:	e7f9      	b.n	8005b96 <memset+0x4>
	...

08005ba4 <_close_r>:
 8005ba4:	b538      	push	{r3, r4, r5, lr}
 8005ba6:	4d06      	ldr	r5, [pc, #24]	@ (8005bc0 <_close_r+0x1c>)
 8005ba8:	2300      	movs	r3, #0
 8005baa:	4604      	mov	r4, r0
 8005bac:	4608      	mov	r0, r1
 8005bae:	602b      	str	r3, [r5, #0]
 8005bb0:	f7fb fa25 	bl	8000ffe <_close>
 8005bb4:	1c43      	adds	r3, r0, #1
 8005bb6:	d102      	bne.n	8005bbe <_close_r+0x1a>
 8005bb8:	682b      	ldr	r3, [r5, #0]
 8005bba:	b103      	cbz	r3, 8005bbe <_close_r+0x1a>
 8005bbc:	6023      	str	r3, [r4, #0]
 8005bbe:	bd38      	pop	{r3, r4, r5, pc}
 8005bc0:	20000354 	.word	0x20000354

08005bc4 <_lseek_r>:
 8005bc4:	b538      	push	{r3, r4, r5, lr}
 8005bc6:	4d07      	ldr	r5, [pc, #28]	@ (8005be4 <_lseek_r+0x20>)
 8005bc8:	4604      	mov	r4, r0
 8005bca:	4608      	mov	r0, r1
 8005bcc:	4611      	mov	r1, r2
 8005bce:	2200      	movs	r2, #0
 8005bd0:	602a      	str	r2, [r5, #0]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f7fb fa3a 	bl	800104c <_lseek>
 8005bd8:	1c43      	adds	r3, r0, #1
 8005bda:	d102      	bne.n	8005be2 <_lseek_r+0x1e>
 8005bdc:	682b      	ldr	r3, [r5, #0]
 8005bde:	b103      	cbz	r3, 8005be2 <_lseek_r+0x1e>
 8005be0:	6023      	str	r3, [r4, #0]
 8005be2:	bd38      	pop	{r3, r4, r5, pc}
 8005be4:	20000354 	.word	0x20000354

08005be8 <_read_r>:
 8005be8:	b538      	push	{r3, r4, r5, lr}
 8005bea:	4d07      	ldr	r5, [pc, #28]	@ (8005c08 <_read_r+0x20>)
 8005bec:	4604      	mov	r4, r0
 8005bee:	4608      	mov	r0, r1
 8005bf0:	4611      	mov	r1, r2
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	602a      	str	r2, [r5, #0]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	f7fb f9c8 	bl	8000f8c <_read>
 8005bfc:	1c43      	adds	r3, r0, #1
 8005bfe:	d102      	bne.n	8005c06 <_read_r+0x1e>
 8005c00:	682b      	ldr	r3, [r5, #0]
 8005c02:	b103      	cbz	r3, 8005c06 <_read_r+0x1e>
 8005c04:	6023      	str	r3, [r4, #0]
 8005c06:	bd38      	pop	{r3, r4, r5, pc}
 8005c08:	20000354 	.word	0x20000354

08005c0c <_write_r>:
 8005c0c:	b538      	push	{r3, r4, r5, lr}
 8005c0e:	4d07      	ldr	r5, [pc, #28]	@ (8005c2c <_write_r+0x20>)
 8005c10:	4604      	mov	r4, r0
 8005c12:	4608      	mov	r0, r1
 8005c14:	4611      	mov	r1, r2
 8005c16:	2200      	movs	r2, #0
 8005c18:	602a      	str	r2, [r5, #0]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	f7fb f9d3 	bl	8000fc6 <_write>
 8005c20:	1c43      	adds	r3, r0, #1
 8005c22:	d102      	bne.n	8005c2a <_write_r+0x1e>
 8005c24:	682b      	ldr	r3, [r5, #0]
 8005c26:	b103      	cbz	r3, 8005c2a <_write_r+0x1e>
 8005c28:	6023      	str	r3, [r4, #0]
 8005c2a:	bd38      	pop	{r3, r4, r5, pc}
 8005c2c:	20000354 	.word	0x20000354

08005c30 <__errno>:
 8005c30:	4b01      	ldr	r3, [pc, #4]	@ (8005c38 <__errno+0x8>)
 8005c32:	6818      	ldr	r0, [r3, #0]
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	20000018 	.word	0x20000018

08005c3c <__libc_init_array>:
 8005c3c:	b570      	push	{r4, r5, r6, lr}
 8005c3e:	4d0d      	ldr	r5, [pc, #52]	@ (8005c74 <__libc_init_array+0x38>)
 8005c40:	4c0d      	ldr	r4, [pc, #52]	@ (8005c78 <__libc_init_array+0x3c>)
 8005c42:	1b64      	subs	r4, r4, r5
 8005c44:	10a4      	asrs	r4, r4, #2
 8005c46:	2600      	movs	r6, #0
 8005c48:	42a6      	cmp	r6, r4
 8005c4a:	d109      	bne.n	8005c60 <__libc_init_array+0x24>
 8005c4c:	4d0b      	ldr	r5, [pc, #44]	@ (8005c7c <__libc_init_array+0x40>)
 8005c4e:	4c0c      	ldr	r4, [pc, #48]	@ (8005c80 <__libc_init_array+0x44>)
 8005c50:	f000 ff6e 	bl	8006b30 <_init>
 8005c54:	1b64      	subs	r4, r4, r5
 8005c56:	10a4      	asrs	r4, r4, #2
 8005c58:	2600      	movs	r6, #0
 8005c5a:	42a6      	cmp	r6, r4
 8005c5c:	d105      	bne.n	8005c6a <__libc_init_array+0x2e>
 8005c5e:	bd70      	pop	{r4, r5, r6, pc}
 8005c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c64:	4798      	blx	r3
 8005c66:	3601      	adds	r6, #1
 8005c68:	e7ee      	b.n	8005c48 <__libc_init_array+0xc>
 8005c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c6e:	4798      	blx	r3
 8005c70:	3601      	adds	r6, #1
 8005c72:	e7f2      	b.n	8005c5a <__libc_init_array+0x1e>
 8005c74:	08006d54 	.word	0x08006d54
 8005c78:	08006d54 	.word	0x08006d54
 8005c7c:	08006d54 	.word	0x08006d54
 8005c80:	08006d58 	.word	0x08006d58

08005c84 <__retarget_lock_init_recursive>:
 8005c84:	4770      	bx	lr

08005c86 <__retarget_lock_acquire_recursive>:
 8005c86:	4770      	bx	lr

08005c88 <__retarget_lock_release_recursive>:
 8005c88:	4770      	bx	lr
	...

08005c8c <_free_r>:
 8005c8c:	b538      	push	{r3, r4, r5, lr}
 8005c8e:	4605      	mov	r5, r0
 8005c90:	2900      	cmp	r1, #0
 8005c92:	d041      	beq.n	8005d18 <_free_r+0x8c>
 8005c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c98:	1f0c      	subs	r4, r1, #4
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	bfb8      	it	lt
 8005c9e:	18e4      	addlt	r4, r4, r3
 8005ca0:	f000 f8e0 	bl	8005e64 <__malloc_lock>
 8005ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8005d1c <_free_r+0x90>)
 8005ca6:	6813      	ldr	r3, [r2, #0]
 8005ca8:	b933      	cbnz	r3, 8005cb8 <_free_r+0x2c>
 8005caa:	6063      	str	r3, [r4, #4]
 8005cac:	6014      	str	r4, [r2, #0]
 8005cae:	4628      	mov	r0, r5
 8005cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cb4:	f000 b8dc 	b.w	8005e70 <__malloc_unlock>
 8005cb8:	42a3      	cmp	r3, r4
 8005cba:	d908      	bls.n	8005cce <_free_r+0x42>
 8005cbc:	6820      	ldr	r0, [r4, #0]
 8005cbe:	1821      	adds	r1, r4, r0
 8005cc0:	428b      	cmp	r3, r1
 8005cc2:	bf01      	itttt	eq
 8005cc4:	6819      	ldreq	r1, [r3, #0]
 8005cc6:	685b      	ldreq	r3, [r3, #4]
 8005cc8:	1809      	addeq	r1, r1, r0
 8005cca:	6021      	streq	r1, [r4, #0]
 8005ccc:	e7ed      	b.n	8005caa <_free_r+0x1e>
 8005cce:	461a      	mov	r2, r3
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	b10b      	cbz	r3, 8005cd8 <_free_r+0x4c>
 8005cd4:	42a3      	cmp	r3, r4
 8005cd6:	d9fa      	bls.n	8005cce <_free_r+0x42>
 8005cd8:	6811      	ldr	r1, [r2, #0]
 8005cda:	1850      	adds	r0, r2, r1
 8005cdc:	42a0      	cmp	r0, r4
 8005cde:	d10b      	bne.n	8005cf8 <_free_r+0x6c>
 8005ce0:	6820      	ldr	r0, [r4, #0]
 8005ce2:	4401      	add	r1, r0
 8005ce4:	1850      	adds	r0, r2, r1
 8005ce6:	4283      	cmp	r3, r0
 8005ce8:	6011      	str	r1, [r2, #0]
 8005cea:	d1e0      	bne.n	8005cae <_free_r+0x22>
 8005cec:	6818      	ldr	r0, [r3, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	6053      	str	r3, [r2, #4]
 8005cf2:	4408      	add	r0, r1
 8005cf4:	6010      	str	r0, [r2, #0]
 8005cf6:	e7da      	b.n	8005cae <_free_r+0x22>
 8005cf8:	d902      	bls.n	8005d00 <_free_r+0x74>
 8005cfa:	230c      	movs	r3, #12
 8005cfc:	602b      	str	r3, [r5, #0]
 8005cfe:	e7d6      	b.n	8005cae <_free_r+0x22>
 8005d00:	6820      	ldr	r0, [r4, #0]
 8005d02:	1821      	adds	r1, r4, r0
 8005d04:	428b      	cmp	r3, r1
 8005d06:	bf04      	itt	eq
 8005d08:	6819      	ldreq	r1, [r3, #0]
 8005d0a:	685b      	ldreq	r3, [r3, #4]
 8005d0c:	6063      	str	r3, [r4, #4]
 8005d0e:	bf04      	itt	eq
 8005d10:	1809      	addeq	r1, r1, r0
 8005d12:	6021      	streq	r1, [r4, #0]
 8005d14:	6054      	str	r4, [r2, #4]
 8005d16:	e7ca      	b.n	8005cae <_free_r+0x22>
 8005d18:	bd38      	pop	{r3, r4, r5, pc}
 8005d1a:	bf00      	nop
 8005d1c:	20000360 	.word	0x20000360

08005d20 <sbrk_aligned>:
 8005d20:	b570      	push	{r4, r5, r6, lr}
 8005d22:	4e0f      	ldr	r6, [pc, #60]	@ (8005d60 <sbrk_aligned+0x40>)
 8005d24:	460c      	mov	r4, r1
 8005d26:	6831      	ldr	r1, [r6, #0]
 8005d28:	4605      	mov	r5, r0
 8005d2a:	b911      	cbnz	r1, 8005d32 <sbrk_aligned+0x12>
 8005d2c:	f000 fe28 	bl	8006980 <_sbrk_r>
 8005d30:	6030      	str	r0, [r6, #0]
 8005d32:	4621      	mov	r1, r4
 8005d34:	4628      	mov	r0, r5
 8005d36:	f000 fe23 	bl	8006980 <_sbrk_r>
 8005d3a:	1c43      	adds	r3, r0, #1
 8005d3c:	d103      	bne.n	8005d46 <sbrk_aligned+0x26>
 8005d3e:	f04f 34ff 	mov.w	r4, #4294967295
 8005d42:	4620      	mov	r0, r4
 8005d44:	bd70      	pop	{r4, r5, r6, pc}
 8005d46:	1cc4      	adds	r4, r0, #3
 8005d48:	f024 0403 	bic.w	r4, r4, #3
 8005d4c:	42a0      	cmp	r0, r4
 8005d4e:	d0f8      	beq.n	8005d42 <sbrk_aligned+0x22>
 8005d50:	1a21      	subs	r1, r4, r0
 8005d52:	4628      	mov	r0, r5
 8005d54:	f000 fe14 	bl	8006980 <_sbrk_r>
 8005d58:	3001      	adds	r0, #1
 8005d5a:	d1f2      	bne.n	8005d42 <sbrk_aligned+0x22>
 8005d5c:	e7ef      	b.n	8005d3e <sbrk_aligned+0x1e>
 8005d5e:	bf00      	nop
 8005d60:	2000035c 	.word	0x2000035c

08005d64 <_malloc_r>:
 8005d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d68:	1ccd      	adds	r5, r1, #3
 8005d6a:	f025 0503 	bic.w	r5, r5, #3
 8005d6e:	3508      	adds	r5, #8
 8005d70:	2d0c      	cmp	r5, #12
 8005d72:	bf38      	it	cc
 8005d74:	250c      	movcc	r5, #12
 8005d76:	2d00      	cmp	r5, #0
 8005d78:	4606      	mov	r6, r0
 8005d7a:	db01      	blt.n	8005d80 <_malloc_r+0x1c>
 8005d7c:	42a9      	cmp	r1, r5
 8005d7e:	d904      	bls.n	8005d8a <_malloc_r+0x26>
 8005d80:	230c      	movs	r3, #12
 8005d82:	6033      	str	r3, [r6, #0]
 8005d84:	2000      	movs	r0, #0
 8005d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005e60 <_malloc_r+0xfc>
 8005d8e:	f000 f869 	bl	8005e64 <__malloc_lock>
 8005d92:	f8d8 3000 	ldr.w	r3, [r8]
 8005d96:	461c      	mov	r4, r3
 8005d98:	bb44      	cbnz	r4, 8005dec <_malloc_r+0x88>
 8005d9a:	4629      	mov	r1, r5
 8005d9c:	4630      	mov	r0, r6
 8005d9e:	f7ff ffbf 	bl	8005d20 <sbrk_aligned>
 8005da2:	1c43      	adds	r3, r0, #1
 8005da4:	4604      	mov	r4, r0
 8005da6:	d158      	bne.n	8005e5a <_malloc_r+0xf6>
 8005da8:	f8d8 4000 	ldr.w	r4, [r8]
 8005dac:	4627      	mov	r7, r4
 8005dae:	2f00      	cmp	r7, #0
 8005db0:	d143      	bne.n	8005e3a <_malloc_r+0xd6>
 8005db2:	2c00      	cmp	r4, #0
 8005db4:	d04b      	beq.n	8005e4e <_malloc_r+0xea>
 8005db6:	6823      	ldr	r3, [r4, #0]
 8005db8:	4639      	mov	r1, r7
 8005dba:	4630      	mov	r0, r6
 8005dbc:	eb04 0903 	add.w	r9, r4, r3
 8005dc0:	f000 fdde 	bl	8006980 <_sbrk_r>
 8005dc4:	4581      	cmp	r9, r0
 8005dc6:	d142      	bne.n	8005e4e <_malloc_r+0xea>
 8005dc8:	6821      	ldr	r1, [r4, #0]
 8005dca:	1a6d      	subs	r5, r5, r1
 8005dcc:	4629      	mov	r1, r5
 8005dce:	4630      	mov	r0, r6
 8005dd0:	f7ff ffa6 	bl	8005d20 <sbrk_aligned>
 8005dd4:	3001      	adds	r0, #1
 8005dd6:	d03a      	beq.n	8005e4e <_malloc_r+0xea>
 8005dd8:	6823      	ldr	r3, [r4, #0]
 8005dda:	442b      	add	r3, r5
 8005ddc:	6023      	str	r3, [r4, #0]
 8005dde:	f8d8 3000 	ldr.w	r3, [r8]
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	bb62      	cbnz	r2, 8005e40 <_malloc_r+0xdc>
 8005de6:	f8c8 7000 	str.w	r7, [r8]
 8005dea:	e00f      	b.n	8005e0c <_malloc_r+0xa8>
 8005dec:	6822      	ldr	r2, [r4, #0]
 8005dee:	1b52      	subs	r2, r2, r5
 8005df0:	d420      	bmi.n	8005e34 <_malloc_r+0xd0>
 8005df2:	2a0b      	cmp	r2, #11
 8005df4:	d917      	bls.n	8005e26 <_malloc_r+0xc2>
 8005df6:	1961      	adds	r1, r4, r5
 8005df8:	42a3      	cmp	r3, r4
 8005dfa:	6025      	str	r5, [r4, #0]
 8005dfc:	bf18      	it	ne
 8005dfe:	6059      	strne	r1, [r3, #4]
 8005e00:	6863      	ldr	r3, [r4, #4]
 8005e02:	bf08      	it	eq
 8005e04:	f8c8 1000 	streq.w	r1, [r8]
 8005e08:	5162      	str	r2, [r4, r5]
 8005e0a:	604b      	str	r3, [r1, #4]
 8005e0c:	4630      	mov	r0, r6
 8005e0e:	f000 f82f 	bl	8005e70 <__malloc_unlock>
 8005e12:	f104 000b 	add.w	r0, r4, #11
 8005e16:	1d23      	adds	r3, r4, #4
 8005e18:	f020 0007 	bic.w	r0, r0, #7
 8005e1c:	1ac2      	subs	r2, r0, r3
 8005e1e:	bf1c      	itt	ne
 8005e20:	1a1b      	subne	r3, r3, r0
 8005e22:	50a3      	strne	r3, [r4, r2]
 8005e24:	e7af      	b.n	8005d86 <_malloc_r+0x22>
 8005e26:	6862      	ldr	r2, [r4, #4]
 8005e28:	42a3      	cmp	r3, r4
 8005e2a:	bf0c      	ite	eq
 8005e2c:	f8c8 2000 	streq.w	r2, [r8]
 8005e30:	605a      	strne	r2, [r3, #4]
 8005e32:	e7eb      	b.n	8005e0c <_malloc_r+0xa8>
 8005e34:	4623      	mov	r3, r4
 8005e36:	6864      	ldr	r4, [r4, #4]
 8005e38:	e7ae      	b.n	8005d98 <_malloc_r+0x34>
 8005e3a:	463c      	mov	r4, r7
 8005e3c:	687f      	ldr	r7, [r7, #4]
 8005e3e:	e7b6      	b.n	8005dae <_malloc_r+0x4a>
 8005e40:	461a      	mov	r2, r3
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	42a3      	cmp	r3, r4
 8005e46:	d1fb      	bne.n	8005e40 <_malloc_r+0xdc>
 8005e48:	2300      	movs	r3, #0
 8005e4a:	6053      	str	r3, [r2, #4]
 8005e4c:	e7de      	b.n	8005e0c <_malloc_r+0xa8>
 8005e4e:	230c      	movs	r3, #12
 8005e50:	6033      	str	r3, [r6, #0]
 8005e52:	4630      	mov	r0, r6
 8005e54:	f000 f80c 	bl	8005e70 <__malloc_unlock>
 8005e58:	e794      	b.n	8005d84 <_malloc_r+0x20>
 8005e5a:	6005      	str	r5, [r0, #0]
 8005e5c:	e7d6      	b.n	8005e0c <_malloc_r+0xa8>
 8005e5e:	bf00      	nop
 8005e60:	20000360 	.word	0x20000360

08005e64 <__malloc_lock>:
 8005e64:	4801      	ldr	r0, [pc, #4]	@ (8005e6c <__malloc_lock+0x8>)
 8005e66:	f7ff bf0e 	b.w	8005c86 <__retarget_lock_acquire_recursive>
 8005e6a:	bf00      	nop
 8005e6c:	20000358 	.word	0x20000358

08005e70 <__malloc_unlock>:
 8005e70:	4801      	ldr	r0, [pc, #4]	@ (8005e78 <__malloc_unlock+0x8>)
 8005e72:	f7ff bf09 	b.w	8005c88 <__retarget_lock_release_recursive>
 8005e76:	bf00      	nop
 8005e78:	20000358 	.word	0x20000358

08005e7c <__ssputs_r>:
 8005e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e80:	688e      	ldr	r6, [r1, #8]
 8005e82:	461f      	mov	r7, r3
 8005e84:	42be      	cmp	r6, r7
 8005e86:	680b      	ldr	r3, [r1, #0]
 8005e88:	4682      	mov	sl, r0
 8005e8a:	460c      	mov	r4, r1
 8005e8c:	4690      	mov	r8, r2
 8005e8e:	d82d      	bhi.n	8005eec <__ssputs_r+0x70>
 8005e90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005e98:	d026      	beq.n	8005ee8 <__ssputs_r+0x6c>
 8005e9a:	6965      	ldr	r5, [r4, #20]
 8005e9c:	6909      	ldr	r1, [r1, #16]
 8005e9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ea2:	eba3 0901 	sub.w	r9, r3, r1
 8005ea6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005eaa:	1c7b      	adds	r3, r7, #1
 8005eac:	444b      	add	r3, r9
 8005eae:	106d      	asrs	r5, r5, #1
 8005eb0:	429d      	cmp	r5, r3
 8005eb2:	bf38      	it	cc
 8005eb4:	461d      	movcc	r5, r3
 8005eb6:	0553      	lsls	r3, r2, #21
 8005eb8:	d527      	bpl.n	8005f0a <__ssputs_r+0x8e>
 8005eba:	4629      	mov	r1, r5
 8005ebc:	f7ff ff52 	bl	8005d64 <_malloc_r>
 8005ec0:	4606      	mov	r6, r0
 8005ec2:	b360      	cbz	r0, 8005f1e <__ssputs_r+0xa2>
 8005ec4:	6921      	ldr	r1, [r4, #16]
 8005ec6:	464a      	mov	r2, r9
 8005ec8:	f000 fd6a 	bl	80069a0 <memcpy>
 8005ecc:	89a3      	ldrh	r3, [r4, #12]
 8005ece:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005ed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ed6:	81a3      	strh	r3, [r4, #12]
 8005ed8:	6126      	str	r6, [r4, #16]
 8005eda:	6165      	str	r5, [r4, #20]
 8005edc:	444e      	add	r6, r9
 8005ede:	eba5 0509 	sub.w	r5, r5, r9
 8005ee2:	6026      	str	r6, [r4, #0]
 8005ee4:	60a5      	str	r5, [r4, #8]
 8005ee6:	463e      	mov	r6, r7
 8005ee8:	42be      	cmp	r6, r7
 8005eea:	d900      	bls.n	8005eee <__ssputs_r+0x72>
 8005eec:	463e      	mov	r6, r7
 8005eee:	6820      	ldr	r0, [r4, #0]
 8005ef0:	4632      	mov	r2, r6
 8005ef2:	4641      	mov	r1, r8
 8005ef4:	f000 fd2a 	bl	800694c <memmove>
 8005ef8:	68a3      	ldr	r3, [r4, #8]
 8005efa:	1b9b      	subs	r3, r3, r6
 8005efc:	60a3      	str	r3, [r4, #8]
 8005efe:	6823      	ldr	r3, [r4, #0]
 8005f00:	4433      	add	r3, r6
 8005f02:	6023      	str	r3, [r4, #0]
 8005f04:	2000      	movs	r0, #0
 8005f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f0a:	462a      	mov	r2, r5
 8005f0c:	f000 fd56 	bl	80069bc <_realloc_r>
 8005f10:	4606      	mov	r6, r0
 8005f12:	2800      	cmp	r0, #0
 8005f14:	d1e0      	bne.n	8005ed8 <__ssputs_r+0x5c>
 8005f16:	6921      	ldr	r1, [r4, #16]
 8005f18:	4650      	mov	r0, sl
 8005f1a:	f7ff feb7 	bl	8005c8c <_free_r>
 8005f1e:	230c      	movs	r3, #12
 8005f20:	f8ca 3000 	str.w	r3, [sl]
 8005f24:	89a3      	ldrh	r3, [r4, #12]
 8005f26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f2a:	81a3      	strh	r3, [r4, #12]
 8005f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f30:	e7e9      	b.n	8005f06 <__ssputs_r+0x8a>
	...

08005f34 <_svfiprintf_r>:
 8005f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f38:	4698      	mov	r8, r3
 8005f3a:	898b      	ldrh	r3, [r1, #12]
 8005f3c:	061b      	lsls	r3, r3, #24
 8005f3e:	b09d      	sub	sp, #116	@ 0x74
 8005f40:	4607      	mov	r7, r0
 8005f42:	460d      	mov	r5, r1
 8005f44:	4614      	mov	r4, r2
 8005f46:	d510      	bpl.n	8005f6a <_svfiprintf_r+0x36>
 8005f48:	690b      	ldr	r3, [r1, #16]
 8005f4a:	b973      	cbnz	r3, 8005f6a <_svfiprintf_r+0x36>
 8005f4c:	2140      	movs	r1, #64	@ 0x40
 8005f4e:	f7ff ff09 	bl	8005d64 <_malloc_r>
 8005f52:	6028      	str	r0, [r5, #0]
 8005f54:	6128      	str	r0, [r5, #16]
 8005f56:	b930      	cbnz	r0, 8005f66 <_svfiprintf_r+0x32>
 8005f58:	230c      	movs	r3, #12
 8005f5a:	603b      	str	r3, [r7, #0]
 8005f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f60:	b01d      	add	sp, #116	@ 0x74
 8005f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f66:	2340      	movs	r3, #64	@ 0x40
 8005f68:	616b      	str	r3, [r5, #20]
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f6e:	2320      	movs	r3, #32
 8005f70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f74:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f78:	2330      	movs	r3, #48	@ 0x30
 8005f7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006118 <_svfiprintf_r+0x1e4>
 8005f7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f82:	f04f 0901 	mov.w	r9, #1
 8005f86:	4623      	mov	r3, r4
 8005f88:	469a      	mov	sl, r3
 8005f8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f8e:	b10a      	cbz	r2, 8005f94 <_svfiprintf_r+0x60>
 8005f90:	2a25      	cmp	r2, #37	@ 0x25
 8005f92:	d1f9      	bne.n	8005f88 <_svfiprintf_r+0x54>
 8005f94:	ebba 0b04 	subs.w	fp, sl, r4
 8005f98:	d00b      	beq.n	8005fb2 <_svfiprintf_r+0x7e>
 8005f9a:	465b      	mov	r3, fp
 8005f9c:	4622      	mov	r2, r4
 8005f9e:	4629      	mov	r1, r5
 8005fa0:	4638      	mov	r0, r7
 8005fa2:	f7ff ff6b 	bl	8005e7c <__ssputs_r>
 8005fa6:	3001      	adds	r0, #1
 8005fa8:	f000 80a7 	beq.w	80060fa <_svfiprintf_r+0x1c6>
 8005fac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fae:	445a      	add	r2, fp
 8005fb0:	9209      	str	r2, [sp, #36]	@ 0x24
 8005fb2:	f89a 3000 	ldrb.w	r3, [sl]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	f000 809f 	beq.w	80060fa <_svfiprintf_r+0x1c6>
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8005fc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fc6:	f10a 0a01 	add.w	sl, sl, #1
 8005fca:	9304      	str	r3, [sp, #16]
 8005fcc:	9307      	str	r3, [sp, #28]
 8005fce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005fd2:	931a      	str	r3, [sp, #104]	@ 0x68
 8005fd4:	4654      	mov	r4, sl
 8005fd6:	2205      	movs	r2, #5
 8005fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fdc:	484e      	ldr	r0, [pc, #312]	@ (8006118 <_svfiprintf_r+0x1e4>)
 8005fde:	f7fa f8f7 	bl	80001d0 <memchr>
 8005fe2:	9a04      	ldr	r2, [sp, #16]
 8005fe4:	b9d8      	cbnz	r0, 800601e <_svfiprintf_r+0xea>
 8005fe6:	06d0      	lsls	r0, r2, #27
 8005fe8:	bf44      	itt	mi
 8005fea:	2320      	movmi	r3, #32
 8005fec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ff0:	0711      	lsls	r1, r2, #28
 8005ff2:	bf44      	itt	mi
 8005ff4:	232b      	movmi	r3, #43	@ 0x2b
 8005ff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ffa:	f89a 3000 	ldrb.w	r3, [sl]
 8005ffe:	2b2a      	cmp	r3, #42	@ 0x2a
 8006000:	d015      	beq.n	800602e <_svfiprintf_r+0xfa>
 8006002:	9a07      	ldr	r2, [sp, #28]
 8006004:	4654      	mov	r4, sl
 8006006:	2000      	movs	r0, #0
 8006008:	f04f 0c0a 	mov.w	ip, #10
 800600c:	4621      	mov	r1, r4
 800600e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006012:	3b30      	subs	r3, #48	@ 0x30
 8006014:	2b09      	cmp	r3, #9
 8006016:	d94b      	bls.n	80060b0 <_svfiprintf_r+0x17c>
 8006018:	b1b0      	cbz	r0, 8006048 <_svfiprintf_r+0x114>
 800601a:	9207      	str	r2, [sp, #28]
 800601c:	e014      	b.n	8006048 <_svfiprintf_r+0x114>
 800601e:	eba0 0308 	sub.w	r3, r0, r8
 8006022:	fa09 f303 	lsl.w	r3, r9, r3
 8006026:	4313      	orrs	r3, r2
 8006028:	9304      	str	r3, [sp, #16]
 800602a:	46a2      	mov	sl, r4
 800602c:	e7d2      	b.n	8005fd4 <_svfiprintf_r+0xa0>
 800602e:	9b03      	ldr	r3, [sp, #12]
 8006030:	1d19      	adds	r1, r3, #4
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	9103      	str	r1, [sp, #12]
 8006036:	2b00      	cmp	r3, #0
 8006038:	bfbb      	ittet	lt
 800603a:	425b      	neglt	r3, r3
 800603c:	f042 0202 	orrlt.w	r2, r2, #2
 8006040:	9307      	strge	r3, [sp, #28]
 8006042:	9307      	strlt	r3, [sp, #28]
 8006044:	bfb8      	it	lt
 8006046:	9204      	strlt	r2, [sp, #16]
 8006048:	7823      	ldrb	r3, [r4, #0]
 800604a:	2b2e      	cmp	r3, #46	@ 0x2e
 800604c:	d10a      	bne.n	8006064 <_svfiprintf_r+0x130>
 800604e:	7863      	ldrb	r3, [r4, #1]
 8006050:	2b2a      	cmp	r3, #42	@ 0x2a
 8006052:	d132      	bne.n	80060ba <_svfiprintf_r+0x186>
 8006054:	9b03      	ldr	r3, [sp, #12]
 8006056:	1d1a      	adds	r2, r3, #4
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	9203      	str	r2, [sp, #12]
 800605c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006060:	3402      	adds	r4, #2
 8006062:	9305      	str	r3, [sp, #20]
 8006064:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006128 <_svfiprintf_r+0x1f4>
 8006068:	7821      	ldrb	r1, [r4, #0]
 800606a:	2203      	movs	r2, #3
 800606c:	4650      	mov	r0, sl
 800606e:	f7fa f8af 	bl	80001d0 <memchr>
 8006072:	b138      	cbz	r0, 8006084 <_svfiprintf_r+0x150>
 8006074:	9b04      	ldr	r3, [sp, #16]
 8006076:	eba0 000a 	sub.w	r0, r0, sl
 800607a:	2240      	movs	r2, #64	@ 0x40
 800607c:	4082      	lsls	r2, r0
 800607e:	4313      	orrs	r3, r2
 8006080:	3401      	adds	r4, #1
 8006082:	9304      	str	r3, [sp, #16]
 8006084:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006088:	4824      	ldr	r0, [pc, #144]	@ (800611c <_svfiprintf_r+0x1e8>)
 800608a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800608e:	2206      	movs	r2, #6
 8006090:	f7fa f89e 	bl	80001d0 <memchr>
 8006094:	2800      	cmp	r0, #0
 8006096:	d036      	beq.n	8006106 <_svfiprintf_r+0x1d2>
 8006098:	4b21      	ldr	r3, [pc, #132]	@ (8006120 <_svfiprintf_r+0x1ec>)
 800609a:	bb1b      	cbnz	r3, 80060e4 <_svfiprintf_r+0x1b0>
 800609c:	9b03      	ldr	r3, [sp, #12]
 800609e:	3307      	adds	r3, #7
 80060a0:	f023 0307 	bic.w	r3, r3, #7
 80060a4:	3308      	adds	r3, #8
 80060a6:	9303      	str	r3, [sp, #12]
 80060a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060aa:	4433      	add	r3, r6
 80060ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80060ae:	e76a      	b.n	8005f86 <_svfiprintf_r+0x52>
 80060b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80060b4:	460c      	mov	r4, r1
 80060b6:	2001      	movs	r0, #1
 80060b8:	e7a8      	b.n	800600c <_svfiprintf_r+0xd8>
 80060ba:	2300      	movs	r3, #0
 80060bc:	3401      	adds	r4, #1
 80060be:	9305      	str	r3, [sp, #20]
 80060c0:	4619      	mov	r1, r3
 80060c2:	f04f 0c0a 	mov.w	ip, #10
 80060c6:	4620      	mov	r0, r4
 80060c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060cc:	3a30      	subs	r2, #48	@ 0x30
 80060ce:	2a09      	cmp	r2, #9
 80060d0:	d903      	bls.n	80060da <_svfiprintf_r+0x1a6>
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0c6      	beq.n	8006064 <_svfiprintf_r+0x130>
 80060d6:	9105      	str	r1, [sp, #20]
 80060d8:	e7c4      	b.n	8006064 <_svfiprintf_r+0x130>
 80060da:	fb0c 2101 	mla	r1, ip, r1, r2
 80060de:	4604      	mov	r4, r0
 80060e0:	2301      	movs	r3, #1
 80060e2:	e7f0      	b.n	80060c6 <_svfiprintf_r+0x192>
 80060e4:	ab03      	add	r3, sp, #12
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	462a      	mov	r2, r5
 80060ea:	4b0e      	ldr	r3, [pc, #56]	@ (8006124 <_svfiprintf_r+0x1f0>)
 80060ec:	a904      	add	r1, sp, #16
 80060ee:	4638      	mov	r0, r7
 80060f0:	f3af 8000 	nop.w
 80060f4:	1c42      	adds	r2, r0, #1
 80060f6:	4606      	mov	r6, r0
 80060f8:	d1d6      	bne.n	80060a8 <_svfiprintf_r+0x174>
 80060fa:	89ab      	ldrh	r3, [r5, #12]
 80060fc:	065b      	lsls	r3, r3, #25
 80060fe:	f53f af2d 	bmi.w	8005f5c <_svfiprintf_r+0x28>
 8006102:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006104:	e72c      	b.n	8005f60 <_svfiprintf_r+0x2c>
 8006106:	ab03      	add	r3, sp, #12
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	462a      	mov	r2, r5
 800610c:	4b05      	ldr	r3, [pc, #20]	@ (8006124 <_svfiprintf_r+0x1f0>)
 800610e:	a904      	add	r1, sp, #16
 8006110:	4638      	mov	r0, r7
 8006112:	f000 f9bb 	bl	800648c <_printf_i>
 8006116:	e7ed      	b.n	80060f4 <_svfiprintf_r+0x1c0>
 8006118:	08006d19 	.word	0x08006d19
 800611c:	08006d23 	.word	0x08006d23
 8006120:	00000000 	.word	0x00000000
 8006124:	08005e7d 	.word	0x08005e7d
 8006128:	08006d1f 	.word	0x08006d1f

0800612c <__sfputc_r>:
 800612c:	6893      	ldr	r3, [r2, #8]
 800612e:	3b01      	subs	r3, #1
 8006130:	2b00      	cmp	r3, #0
 8006132:	b410      	push	{r4}
 8006134:	6093      	str	r3, [r2, #8]
 8006136:	da08      	bge.n	800614a <__sfputc_r+0x1e>
 8006138:	6994      	ldr	r4, [r2, #24]
 800613a:	42a3      	cmp	r3, r4
 800613c:	db01      	blt.n	8006142 <__sfputc_r+0x16>
 800613e:	290a      	cmp	r1, #10
 8006140:	d103      	bne.n	800614a <__sfputc_r+0x1e>
 8006142:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006146:	f000 bb6d 	b.w	8006824 <__swbuf_r>
 800614a:	6813      	ldr	r3, [r2, #0]
 800614c:	1c58      	adds	r0, r3, #1
 800614e:	6010      	str	r0, [r2, #0]
 8006150:	7019      	strb	r1, [r3, #0]
 8006152:	4608      	mov	r0, r1
 8006154:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006158:	4770      	bx	lr

0800615a <__sfputs_r>:
 800615a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800615c:	4606      	mov	r6, r0
 800615e:	460f      	mov	r7, r1
 8006160:	4614      	mov	r4, r2
 8006162:	18d5      	adds	r5, r2, r3
 8006164:	42ac      	cmp	r4, r5
 8006166:	d101      	bne.n	800616c <__sfputs_r+0x12>
 8006168:	2000      	movs	r0, #0
 800616a:	e007      	b.n	800617c <__sfputs_r+0x22>
 800616c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006170:	463a      	mov	r2, r7
 8006172:	4630      	mov	r0, r6
 8006174:	f7ff ffda 	bl	800612c <__sfputc_r>
 8006178:	1c43      	adds	r3, r0, #1
 800617a:	d1f3      	bne.n	8006164 <__sfputs_r+0xa>
 800617c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006180 <_vfiprintf_r>:
 8006180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006184:	460d      	mov	r5, r1
 8006186:	b09d      	sub	sp, #116	@ 0x74
 8006188:	4614      	mov	r4, r2
 800618a:	4698      	mov	r8, r3
 800618c:	4606      	mov	r6, r0
 800618e:	b118      	cbz	r0, 8006198 <_vfiprintf_r+0x18>
 8006190:	6a03      	ldr	r3, [r0, #32]
 8006192:	b90b      	cbnz	r3, 8006198 <_vfiprintf_r+0x18>
 8006194:	f7ff fc52 	bl	8005a3c <__sinit>
 8006198:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800619a:	07d9      	lsls	r1, r3, #31
 800619c:	d405      	bmi.n	80061aa <_vfiprintf_r+0x2a>
 800619e:	89ab      	ldrh	r3, [r5, #12]
 80061a0:	059a      	lsls	r2, r3, #22
 80061a2:	d402      	bmi.n	80061aa <_vfiprintf_r+0x2a>
 80061a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80061a6:	f7ff fd6e 	bl	8005c86 <__retarget_lock_acquire_recursive>
 80061aa:	89ab      	ldrh	r3, [r5, #12]
 80061ac:	071b      	lsls	r3, r3, #28
 80061ae:	d501      	bpl.n	80061b4 <_vfiprintf_r+0x34>
 80061b0:	692b      	ldr	r3, [r5, #16]
 80061b2:	b99b      	cbnz	r3, 80061dc <_vfiprintf_r+0x5c>
 80061b4:	4629      	mov	r1, r5
 80061b6:	4630      	mov	r0, r6
 80061b8:	f000 fb72 	bl	80068a0 <__swsetup_r>
 80061bc:	b170      	cbz	r0, 80061dc <_vfiprintf_r+0x5c>
 80061be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80061c0:	07dc      	lsls	r4, r3, #31
 80061c2:	d504      	bpl.n	80061ce <_vfiprintf_r+0x4e>
 80061c4:	f04f 30ff 	mov.w	r0, #4294967295
 80061c8:	b01d      	add	sp, #116	@ 0x74
 80061ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ce:	89ab      	ldrh	r3, [r5, #12]
 80061d0:	0598      	lsls	r0, r3, #22
 80061d2:	d4f7      	bmi.n	80061c4 <_vfiprintf_r+0x44>
 80061d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80061d6:	f7ff fd57 	bl	8005c88 <__retarget_lock_release_recursive>
 80061da:	e7f3      	b.n	80061c4 <_vfiprintf_r+0x44>
 80061dc:	2300      	movs	r3, #0
 80061de:	9309      	str	r3, [sp, #36]	@ 0x24
 80061e0:	2320      	movs	r3, #32
 80061e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80061e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80061ea:	2330      	movs	r3, #48	@ 0x30
 80061ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800639c <_vfiprintf_r+0x21c>
 80061f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80061f4:	f04f 0901 	mov.w	r9, #1
 80061f8:	4623      	mov	r3, r4
 80061fa:	469a      	mov	sl, r3
 80061fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006200:	b10a      	cbz	r2, 8006206 <_vfiprintf_r+0x86>
 8006202:	2a25      	cmp	r2, #37	@ 0x25
 8006204:	d1f9      	bne.n	80061fa <_vfiprintf_r+0x7a>
 8006206:	ebba 0b04 	subs.w	fp, sl, r4
 800620a:	d00b      	beq.n	8006224 <_vfiprintf_r+0xa4>
 800620c:	465b      	mov	r3, fp
 800620e:	4622      	mov	r2, r4
 8006210:	4629      	mov	r1, r5
 8006212:	4630      	mov	r0, r6
 8006214:	f7ff ffa1 	bl	800615a <__sfputs_r>
 8006218:	3001      	adds	r0, #1
 800621a:	f000 80a7 	beq.w	800636c <_vfiprintf_r+0x1ec>
 800621e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006220:	445a      	add	r2, fp
 8006222:	9209      	str	r2, [sp, #36]	@ 0x24
 8006224:	f89a 3000 	ldrb.w	r3, [sl]
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 809f 	beq.w	800636c <_vfiprintf_r+0x1ec>
 800622e:	2300      	movs	r3, #0
 8006230:	f04f 32ff 	mov.w	r2, #4294967295
 8006234:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006238:	f10a 0a01 	add.w	sl, sl, #1
 800623c:	9304      	str	r3, [sp, #16]
 800623e:	9307      	str	r3, [sp, #28]
 8006240:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006244:	931a      	str	r3, [sp, #104]	@ 0x68
 8006246:	4654      	mov	r4, sl
 8006248:	2205      	movs	r2, #5
 800624a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800624e:	4853      	ldr	r0, [pc, #332]	@ (800639c <_vfiprintf_r+0x21c>)
 8006250:	f7f9 ffbe 	bl	80001d0 <memchr>
 8006254:	9a04      	ldr	r2, [sp, #16]
 8006256:	b9d8      	cbnz	r0, 8006290 <_vfiprintf_r+0x110>
 8006258:	06d1      	lsls	r1, r2, #27
 800625a:	bf44      	itt	mi
 800625c:	2320      	movmi	r3, #32
 800625e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006262:	0713      	lsls	r3, r2, #28
 8006264:	bf44      	itt	mi
 8006266:	232b      	movmi	r3, #43	@ 0x2b
 8006268:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800626c:	f89a 3000 	ldrb.w	r3, [sl]
 8006270:	2b2a      	cmp	r3, #42	@ 0x2a
 8006272:	d015      	beq.n	80062a0 <_vfiprintf_r+0x120>
 8006274:	9a07      	ldr	r2, [sp, #28]
 8006276:	4654      	mov	r4, sl
 8006278:	2000      	movs	r0, #0
 800627a:	f04f 0c0a 	mov.w	ip, #10
 800627e:	4621      	mov	r1, r4
 8006280:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006284:	3b30      	subs	r3, #48	@ 0x30
 8006286:	2b09      	cmp	r3, #9
 8006288:	d94b      	bls.n	8006322 <_vfiprintf_r+0x1a2>
 800628a:	b1b0      	cbz	r0, 80062ba <_vfiprintf_r+0x13a>
 800628c:	9207      	str	r2, [sp, #28]
 800628e:	e014      	b.n	80062ba <_vfiprintf_r+0x13a>
 8006290:	eba0 0308 	sub.w	r3, r0, r8
 8006294:	fa09 f303 	lsl.w	r3, r9, r3
 8006298:	4313      	orrs	r3, r2
 800629a:	9304      	str	r3, [sp, #16]
 800629c:	46a2      	mov	sl, r4
 800629e:	e7d2      	b.n	8006246 <_vfiprintf_r+0xc6>
 80062a0:	9b03      	ldr	r3, [sp, #12]
 80062a2:	1d19      	adds	r1, r3, #4
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	9103      	str	r1, [sp, #12]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	bfbb      	ittet	lt
 80062ac:	425b      	neglt	r3, r3
 80062ae:	f042 0202 	orrlt.w	r2, r2, #2
 80062b2:	9307      	strge	r3, [sp, #28]
 80062b4:	9307      	strlt	r3, [sp, #28]
 80062b6:	bfb8      	it	lt
 80062b8:	9204      	strlt	r2, [sp, #16]
 80062ba:	7823      	ldrb	r3, [r4, #0]
 80062bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80062be:	d10a      	bne.n	80062d6 <_vfiprintf_r+0x156>
 80062c0:	7863      	ldrb	r3, [r4, #1]
 80062c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80062c4:	d132      	bne.n	800632c <_vfiprintf_r+0x1ac>
 80062c6:	9b03      	ldr	r3, [sp, #12]
 80062c8:	1d1a      	adds	r2, r3, #4
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	9203      	str	r2, [sp, #12]
 80062ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80062d2:	3402      	adds	r4, #2
 80062d4:	9305      	str	r3, [sp, #20]
 80062d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80063ac <_vfiprintf_r+0x22c>
 80062da:	7821      	ldrb	r1, [r4, #0]
 80062dc:	2203      	movs	r2, #3
 80062de:	4650      	mov	r0, sl
 80062e0:	f7f9 ff76 	bl	80001d0 <memchr>
 80062e4:	b138      	cbz	r0, 80062f6 <_vfiprintf_r+0x176>
 80062e6:	9b04      	ldr	r3, [sp, #16]
 80062e8:	eba0 000a 	sub.w	r0, r0, sl
 80062ec:	2240      	movs	r2, #64	@ 0x40
 80062ee:	4082      	lsls	r2, r0
 80062f0:	4313      	orrs	r3, r2
 80062f2:	3401      	adds	r4, #1
 80062f4:	9304      	str	r3, [sp, #16]
 80062f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062fa:	4829      	ldr	r0, [pc, #164]	@ (80063a0 <_vfiprintf_r+0x220>)
 80062fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006300:	2206      	movs	r2, #6
 8006302:	f7f9 ff65 	bl	80001d0 <memchr>
 8006306:	2800      	cmp	r0, #0
 8006308:	d03f      	beq.n	800638a <_vfiprintf_r+0x20a>
 800630a:	4b26      	ldr	r3, [pc, #152]	@ (80063a4 <_vfiprintf_r+0x224>)
 800630c:	bb1b      	cbnz	r3, 8006356 <_vfiprintf_r+0x1d6>
 800630e:	9b03      	ldr	r3, [sp, #12]
 8006310:	3307      	adds	r3, #7
 8006312:	f023 0307 	bic.w	r3, r3, #7
 8006316:	3308      	adds	r3, #8
 8006318:	9303      	str	r3, [sp, #12]
 800631a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800631c:	443b      	add	r3, r7
 800631e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006320:	e76a      	b.n	80061f8 <_vfiprintf_r+0x78>
 8006322:	fb0c 3202 	mla	r2, ip, r2, r3
 8006326:	460c      	mov	r4, r1
 8006328:	2001      	movs	r0, #1
 800632a:	e7a8      	b.n	800627e <_vfiprintf_r+0xfe>
 800632c:	2300      	movs	r3, #0
 800632e:	3401      	adds	r4, #1
 8006330:	9305      	str	r3, [sp, #20]
 8006332:	4619      	mov	r1, r3
 8006334:	f04f 0c0a 	mov.w	ip, #10
 8006338:	4620      	mov	r0, r4
 800633a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800633e:	3a30      	subs	r2, #48	@ 0x30
 8006340:	2a09      	cmp	r2, #9
 8006342:	d903      	bls.n	800634c <_vfiprintf_r+0x1cc>
 8006344:	2b00      	cmp	r3, #0
 8006346:	d0c6      	beq.n	80062d6 <_vfiprintf_r+0x156>
 8006348:	9105      	str	r1, [sp, #20]
 800634a:	e7c4      	b.n	80062d6 <_vfiprintf_r+0x156>
 800634c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006350:	4604      	mov	r4, r0
 8006352:	2301      	movs	r3, #1
 8006354:	e7f0      	b.n	8006338 <_vfiprintf_r+0x1b8>
 8006356:	ab03      	add	r3, sp, #12
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	462a      	mov	r2, r5
 800635c:	4b12      	ldr	r3, [pc, #72]	@ (80063a8 <_vfiprintf_r+0x228>)
 800635e:	a904      	add	r1, sp, #16
 8006360:	4630      	mov	r0, r6
 8006362:	f3af 8000 	nop.w
 8006366:	4607      	mov	r7, r0
 8006368:	1c78      	adds	r0, r7, #1
 800636a:	d1d6      	bne.n	800631a <_vfiprintf_r+0x19a>
 800636c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800636e:	07d9      	lsls	r1, r3, #31
 8006370:	d405      	bmi.n	800637e <_vfiprintf_r+0x1fe>
 8006372:	89ab      	ldrh	r3, [r5, #12]
 8006374:	059a      	lsls	r2, r3, #22
 8006376:	d402      	bmi.n	800637e <_vfiprintf_r+0x1fe>
 8006378:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800637a:	f7ff fc85 	bl	8005c88 <__retarget_lock_release_recursive>
 800637e:	89ab      	ldrh	r3, [r5, #12]
 8006380:	065b      	lsls	r3, r3, #25
 8006382:	f53f af1f 	bmi.w	80061c4 <_vfiprintf_r+0x44>
 8006386:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006388:	e71e      	b.n	80061c8 <_vfiprintf_r+0x48>
 800638a:	ab03      	add	r3, sp, #12
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	462a      	mov	r2, r5
 8006390:	4b05      	ldr	r3, [pc, #20]	@ (80063a8 <_vfiprintf_r+0x228>)
 8006392:	a904      	add	r1, sp, #16
 8006394:	4630      	mov	r0, r6
 8006396:	f000 f879 	bl	800648c <_printf_i>
 800639a:	e7e4      	b.n	8006366 <_vfiprintf_r+0x1e6>
 800639c:	08006d19 	.word	0x08006d19
 80063a0:	08006d23 	.word	0x08006d23
 80063a4:	00000000 	.word	0x00000000
 80063a8:	0800615b 	.word	0x0800615b
 80063ac:	08006d1f 	.word	0x08006d1f

080063b0 <_printf_common>:
 80063b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063b4:	4616      	mov	r6, r2
 80063b6:	4698      	mov	r8, r3
 80063b8:	688a      	ldr	r2, [r1, #8]
 80063ba:	690b      	ldr	r3, [r1, #16]
 80063bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80063c0:	4293      	cmp	r3, r2
 80063c2:	bfb8      	it	lt
 80063c4:	4613      	movlt	r3, r2
 80063c6:	6033      	str	r3, [r6, #0]
 80063c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80063cc:	4607      	mov	r7, r0
 80063ce:	460c      	mov	r4, r1
 80063d0:	b10a      	cbz	r2, 80063d6 <_printf_common+0x26>
 80063d2:	3301      	adds	r3, #1
 80063d4:	6033      	str	r3, [r6, #0]
 80063d6:	6823      	ldr	r3, [r4, #0]
 80063d8:	0699      	lsls	r1, r3, #26
 80063da:	bf42      	ittt	mi
 80063dc:	6833      	ldrmi	r3, [r6, #0]
 80063de:	3302      	addmi	r3, #2
 80063e0:	6033      	strmi	r3, [r6, #0]
 80063e2:	6825      	ldr	r5, [r4, #0]
 80063e4:	f015 0506 	ands.w	r5, r5, #6
 80063e8:	d106      	bne.n	80063f8 <_printf_common+0x48>
 80063ea:	f104 0a19 	add.w	sl, r4, #25
 80063ee:	68e3      	ldr	r3, [r4, #12]
 80063f0:	6832      	ldr	r2, [r6, #0]
 80063f2:	1a9b      	subs	r3, r3, r2
 80063f4:	42ab      	cmp	r3, r5
 80063f6:	dc26      	bgt.n	8006446 <_printf_common+0x96>
 80063f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80063fc:	6822      	ldr	r2, [r4, #0]
 80063fe:	3b00      	subs	r3, #0
 8006400:	bf18      	it	ne
 8006402:	2301      	movne	r3, #1
 8006404:	0692      	lsls	r2, r2, #26
 8006406:	d42b      	bmi.n	8006460 <_printf_common+0xb0>
 8006408:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800640c:	4641      	mov	r1, r8
 800640e:	4638      	mov	r0, r7
 8006410:	47c8      	blx	r9
 8006412:	3001      	adds	r0, #1
 8006414:	d01e      	beq.n	8006454 <_printf_common+0xa4>
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	6922      	ldr	r2, [r4, #16]
 800641a:	f003 0306 	and.w	r3, r3, #6
 800641e:	2b04      	cmp	r3, #4
 8006420:	bf02      	ittt	eq
 8006422:	68e5      	ldreq	r5, [r4, #12]
 8006424:	6833      	ldreq	r3, [r6, #0]
 8006426:	1aed      	subeq	r5, r5, r3
 8006428:	68a3      	ldr	r3, [r4, #8]
 800642a:	bf0c      	ite	eq
 800642c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006430:	2500      	movne	r5, #0
 8006432:	4293      	cmp	r3, r2
 8006434:	bfc4      	itt	gt
 8006436:	1a9b      	subgt	r3, r3, r2
 8006438:	18ed      	addgt	r5, r5, r3
 800643a:	2600      	movs	r6, #0
 800643c:	341a      	adds	r4, #26
 800643e:	42b5      	cmp	r5, r6
 8006440:	d11a      	bne.n	8006478 <_printf_common+0xc8>
 8006442:	2000      	movs	r0, #0
 8006444:	e008      	b.n	8006458 <_printf_common+0xa8>
 8006446:	2301      	movs	r3, #1
 8006448:	4652      	mov	r2, sl
 800644a:	4641      	mov	r1, r8
 800644c:	4638      	mov	r0, r7
 800644e:	47c8      	blx	r9
 8006450:	3001      	adds	r0, #1
 8006452:	d103      	bne.n	800645c <_printf_common+0xac>
 8006454:	f04f 30ff 	mov.w	r0, #4294967295
 8006458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800645c:	3501      	adds	r5, #1
 800645e:	e7c6      	b.n	80063ee <_printf_common+0x3e>
 8006460:	18e1      	adds	r1, r4, r3
 8006462:	1c5a      	adds	r2, r3, #1
 8006464:	2030      	movs	r0, #48	@ 0x30
 8006466:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800646a:	4422      	add	r2, r4
 800646c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006470:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006474:	3302      	adds	r3, #2
 8006476:	e7c7      	b.n	8006408 <_printf_common+0x58>
 8006478:	2301      	movs	r3, #1
 800647a:	4622      	mov	r2, r4
 800647c:	4641      	mov	r1, r8
 800647e:	4638      	mov	r0, r7
 8006480:	47c8      	blx	r9
 8006482:	3001      	adds	r0, #1
 8006484:	d0e6      	beq.n	8006454 <_printf_common+0xa4>
 8006486:	3601      	adds	r6, #1
 8006488:	e7d9      	b.n	800643e <_printf_common+0x8e>
	...

0800648c <_printf_i>:
 800648c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006490:	7e0f      	ldrb	r7, [r1, #24]
 8006492:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006494:	2f78      	cmp	r7, #120	@ 0x78
 8006496:	4691      	mov	r9, r2
 8006498:	4680      	mov	r8, r0
 800649a:	460c      	mov	r4, r1
 800649c:	469a      	mov	sl, r3
 800649e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80064a2:	d807      	bhi.n	80064b4 <_printf_i+0x28>
 80064a4:	2f62      	cmp	r7, #98	@ 0x62
 80064a6:	d80a      	bhi.n	80064be <_printf_i+0x32>
 80064a8:	2f00      	cmp	r7, #0
 80064aa:	f000 80d2 	beq.w	8006652 <_printf_i+0x1c6>
 80064ae:	2f58      	cmp	r7, #88	@ 0x58
 80064b0:	f000 80b9 	beq.w	8006626 <_printf_i+0x19a>
 80064b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80064bc:	e03a      	b.n	8006534 <_printf_i+0xa8>
 80064be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80064c2:	2b15      	cmp	r3, #21
 80064c4:	d8f6      	bhi.n	80064b4 <_printf_i+0x28>
 80064c6:	a101      	add	r1, pc, #4	@ (adr r1, 80064cc <_printf_i+0x40>)
 80064c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064cc:	08006525 	.word	0x08006525
 80064d0:	08006539 	.word	0x08006539
 80064d4:	080064b5 	.word	0x080064b5
 80064d8:	080064b5 	.word	0x080064b5
 80064dc:	080064b5 	.word	0x080064b5
 80064e0:	080064b5 	.word	0x080064b5
 80064e4:	08006539 	.word	0x08006539
 80064e8:	080064b5 	.word	0x080064b5
 80064ec:	080064b5 	.word	0x080064b5
 80064f0:	080064b5 	.word	0x080064b5
 80064f4:	080064b5 	.word	0x080064b5
 80064f8:	08006639 	.word	0x08006639
 80064fc:	08006563 	.word	0x08006563
 8006500:	080065f3 	.word	0x080065f3
 8006504:	080064b5 	.word	0x080064b5
 8006508:	080064b5 	.word	0x080064b5
 800650c:	0800665b 	.word	0x0800665b
 8006510:	080064b5 	.word	0x080064b5
 8006514:	08006563 	.word	0x08006563
 8006518:	080064b5 	.word	0x080064b5
 800651c:	080064b5 	.word	0x080064b5
 8006520:	080065fb 	.word	0x080065fb
 8006524:	6833      	ldr	r3, [r6, #0]
 8006526:	1d1a      	adds	r2, r3, #4
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	6032      	str	r2, [r6, #0]
 800652c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006530:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006534:	2301      	movs	r3, #1
 8006536:	e09d      	b.n	8006674 <_printf_i+0x1e8>
 8006538:	6833      	ldr	r3, [r6, #0]
 800653a:	6820      	ldr	r0, [r4, #0]
 800653c:	1d19      	adds	r1, r3, #4
 800653e:	6031      	str	r1, [r6, #0]
 8006540:	0606      	lsls	r6, r0, #24
 8006542:	d501      	bpl.n	8006548 <_printf_i+0xbc>
 8006544:	681d      	ldr	r5, [r3, #0]
 8006546:	e003      	b.n	8006550 <_printf_i+0xc4>
 8006548:	0645      	lsls	r5, r0, #25
 800654a:	d5fb      	bpl.n	8006544 <_printf_i+0xb8>
 800654c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006550:	2d00      	cmp	r5, #0
 8006552:	da03      	bge.n	800655c <_printf_i+0xd0>
 8006554:	232d      	movs	r3, #45	@ 0x2d
 8006556:	426d      	negs	r5, r5
 8006558:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800655c:	4859      	ldr	r0, [pc, #356]	@ (80066c4 <_printf_i+0x238>)
 800655e:	230a      	movs	r3, #10
 8006560:	e011      	b.n	8006586 <_printf_i+0xfa>
 8006562:	6821      	ldr	r1, [r4, #0]
 8006564:	6833      	ldr	r3, [r6, #0]
 8006566:	0608      	lsls	r0, r1, #24
 8006568:	f853 5b04 	ldr.w	r5, [r3], #4
 800656c:	d402      	bmi.n	8006574 <_printf_i+0xe8>
 800656e:	0649      	lsls	r1, r1, #25
 8006570:	bf48      	it	mi
 8006572:	b2ad      	uxthmi	r5, r5
 8006574:	2f6f      	cmp	r7, #111	@ 0x6f
 8006576:	4853      	ldr	r0, [pc, #332]	@ (80066c4 <_printf_i+0x238>)
 8006578:	6033      	str	r3, [r6, #0]
 800657a:	bf14      	ite	ne
 800657c:	230a      	movne	r3, #10
 800657e:	2308      	moveq	r3, #8
 8006580:	2100      	movs	r1, #0
 8006582:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006586:	6866      	ldr	r6, [r4, #4]
 8006588:	60a6      	str	r6, [r4, #8]
 800658a:	2e00      	cmp	r6, #0
 800658c:	bfa2      	ittt	ge
 800658e:	6821      	ldrge	r1, [r4, #0]
 8006590:	f021 0104 	bicge.w	r1, r1, #4
 8006594:	6021      	strge	r1, [r4, #0]
 8006596:	b90d      	cbnz	r5, 800659c <_printf_i+0x110>
 8006598:	2e00      	cmp	r6, #0
 800659a:	d04b      	beq.n	8006634 <_printf_i+0x1a8>
 800659c:	4616      	mov	r6, r2
 800659e:	fbb5 f1f3 	udiv	r1, r5, r3
 80065a2:	fb03 5711 	mls	r7, r3, r1, r5
 80065a6:	5dc7      	ldrb	r7, [r0, r7]
 80065a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80065ac:	462f      	mov	r7, r5
 80065ae:	42bb      	cmp	r3, r7
 80065b0:	460d      	mov	r5, r1
 80065b2:	d9f4      	bls.n	800659e <_printf_i+0x112>
 80065b4:	2b08      	cmp	r3, #8
 80065b6:	d10b      	bne.n	80065d0 <_printf_i+0x144>
 80065b8:	6823      	ldr	r3, [r4, #0]
 80065ba:	07df      	lsls	r7, r3, #31
 80065bc:	d508      	bpl.n	80065d0 <_printf_i+0x144>
 80065be:	6923      	ldr	r3, [r4, #16]
 80065c0:	6861      	ldr	r1, [r4, #4]
 80065c2:	4299      	cmp	r1, r3
 80065c4:	bfde      	ittt	le
 80065c6:	2330      	movle	r3, #48	@ 0x30
 80065c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80065d0:	1b92      	subs	r2, r2, r6
 80065d2:	6122      	str	r2, [r4, #16]
 80065d4:	f8cd a000 	str.w	sl, [sp]
 80065d8:	464b      	mov	r3, r9
 80065da:	aa03      	add	r2, sp, #12
 80065dc:	4621      	mov	r1, r4
 80065de:	4640      	mov	r0, r8
 80065e0:	f7ff fee6 	bl	80063b0 <_printf_common>
 80065e4:	3001      	adds	r0, #1
 80065e6:	d14a      	bne.n	800667e <_printf_i+0x1f2>
 80065e8:	f04f 30ff 	mov.w	r0, #4294967295
 80065ec:	b004      	add	sp, #16
 80065ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065f2:	6823      	ldr	r3, [r4, #0]
 80065f4:	f043 0320 	orr.w	r3, r3, #32
 80065f8:	6023      	str	r3, [r4, #0]
 80065fa:	4833      	ldr	r0, [pc, #204]	@ (80066c8 <_printf_i+0x23c>)
 80065fc:	2778      	movs	r7, #120	@ 0x78
 80065fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	6831      	ldr	r1, [r6, #0]
 8006606:	061f      	lsls	r7, r3, #24
 8006608:	f851 5b04 	ldr.w	r5, [r1], #4
 800660c:	d402      	bmi.n	8006614 <_printf_i+0x188>
 800660e:	065f      	lsls	r7, r3, #25
 8006610:	bf48      	it	mi
 8006612:	b2ad      	uxthmi	r5, r5
 8006614:	6031      	str	r1, [r6, #0]
 8006616:	07d9      	lsls	r1, r3, #31
 8006618:	bf44      	itt	mi
 800661a:	f043 0320 	orrmi.w	r3, r3, #32
 800661e:	6023      	strmi	r3, [r4, #0]
 8006620:	b11d      	cbz	r5, 800662a <_printf_i+0x19e>
 8006622:	2310      	movs	r3, #16
 8006624:	e7ac      	b.n	8006580 <_printf_i+0xf4>
 8006626:	4827      	ldr	r0, [pc, #156]	@ (80066c4 <_printf_i+0x238>)
 8006628:	e7e9      	b.n	80065fe <_printf_i+0x172>
 800662a:	6823      	ldr	r3, [r4, #0]
 800662c:	f023 0320 	bic.w	r3, r3, #32
 8006630:	6023      	str	r3, [r4, #0]
 8006632:	e7f6      	b.n	8006622 <_printf_i+0x196>
 8006634:	4616      	mov	r6, r2
 8006636:	e7bd      	b.n	80065b4 <_printf_i+0x128>
 8006638:	6833      	ldr	r3, [r6, #0]
 800663a:	6825      	ldr	r5, [r4, #0]
 800663c:	6961      	ldr	r1, [r4, #20]
 800663e:	1d18      	adds	r0, r3, #4
 8006640:	6030      	str	r0, [r6, #0]
 8006642:	062e      	lsls	r6, r5, #24
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	d501      	bpl.n	800664c <_printf_i+0x1c0>
 8006648:	6019      	str	r1, [r3, #0]
 800664a:	e002      	b.n	8006652 <_printf_i+0x1c6>
 800664c:	0668      	lsls	r0, r5, #25
 800664e:	d5fb      	bpl.n	8006648 <_printf_i+0x1bc>
 8006650:	8019      	strh	r1, [r3, #0]
 8006652:	2300      	movs	r3, #0
 8006654:	6123      	str	r3, [r4, #16]
 8006656:	4616      	mov	r6, r2
 8006658:	e7bc      	b.n	80065d4 <_printf_i+0x148>
 800665a:	6833      	ldr	r3, [r6, #0]
 800665c:	1d1a      	adds	r2, r3, #4
 800665e:	6032      	str	r2, [r6, #0]
 8006660:	681e      	ldr	r6, [r3, #0]
 8006662:	6862      	ldr	r2, [r4, #4]
 8006664:	2100      	movs	r1, #0
 8006666:	4630      	mov	r0, r6
 8006668:	f7f9 fdb2 	bl	80001d0 <memchr>
 800666c:	b108      	cbz	r0, 8006672 <_printf_i+0x1e6>
 800666e:	1b80      	subs	r0, r0, r6
 8006670:	6060      	str	r0, [r4, #4]
 8006672:	6863      	ldr	r3, [r4, #4]
 8006674:	6123      	str	r3, [r4, #16]
 8006676:	2300      	movs	r3, #0
 8006678:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800667c:	e7aa      	b.n	80065d4 <_printf_i+0x148>
 800667e:	6923      	ldr	r3, [r4, #16]
 8006680:	4632      	mov	r2, r6
 8006682:	4649      	mov	r1, r9
 8006684:	4640      	mov	r0, r8
 8006686:	47d0      	blx	sl
 8006688:	3001      	adds	r0, #1
 800668a:	d0ad      	beq.n	80065e8 <_printf_i+0x15c>
 800668c:	6823      	ldr	r3, [r4, #0]
 800668e:	079b      	lsls	r3, r3, #30
 8006690:	d413      	bmi.n	80066ba <_printf_i+0x22e>
 8006692:	68e0      	ldr	r0, [r4, #12]
 8006694:	9b03      	ldr	r3, [sp, #12]
 8006696:	4298      	cmp	r0, r3
 8006698:	bfb8      	it	lt
 800669a:	4618      	movlt	r0, r3
 800669c:	e7a6      	b.n	80065ec <_printf_i+0x160>
 800669e:	2301      	movs	r3, #1
 80066a0:	4632      	mov	r2, r6
 80066a2:	4649      	mov	r1, r9
 80066a4:	4640      	mov	r0, r8
 80066a6:	47d0      	blx	sl
 80066a8:	3001      	adds	r0, #1
 80066aa:	d09d      	beq.n	80065e8 <_printf_i+0x15c>
 80066ac:	3501      	adds	r5, #1
 80066ae:	68e3      	ldr	r3, [r4, #12]
 80066b0:	9903      	ldr	r1, [sp, #12]
 80066b2:	1a5b      	subs	r3, r3, r1
 80066b4:	42ab      	cmp	r3, r5
 80066b6:	dcf2      	bgt.n	800669e <_printf_i+0x212>
 80066b8:	e7eb      	b.n	8006692 <_printf_i+0x206>
 80066ba:	2500      	movs	r5, #0
 80066bc:	f104 0619 	add.w	r6, r4, #25
 80066c0:	e7f5      	b.n	80066ae <_printf_i+0x222>
 80066c2:	bf00      	nop
 80066c4:	08006d2a 	.word	0x08006d2a
 80066c8:	08006d3b 	.word	0x08006d3b

080066cc <__sflush_r>:
 80066cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80066d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066d4:	0716      	lsls	r6, r2, #28
 80066d6:	4605      	mov	r5, r0
 80066d8:	460c      	mov	r4, r1
 80066da:	d454      	bmi.n	8006786 <__sflush_r+0xba>
 80066dc:	684b      	ldr	r3, [r1, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	dc02      	bgt.n	80066e8 <__sflush_r+0x1c>
 80066e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	dd48      	ble.n	800677a <__sflush_r+0xae>
 80066e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80066ea:	2e00      	cmp	r6, #0
 80066ec:	d045      	beq.n	800677a <__sflush_r+0xae>
 80066ee:	2300      	movs	r3, #0
 80066f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80066f4:	682f      	ldr	r7, [r5, #0]
 80066f6:	6a21      	ldr	r1, [r4, #32]
 80066f8:	602b      	str	r3, [r5, #0]
 80066fa:	d030      	beq.n	800675e <__sflush_r+0x92>
 80066fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80066fe:	89a3      	ldrh	r3, [r4, #12]
 8006700:	0759      	lsls	r1, r3, #29
 8006702:	d505      	bpl.n	8006710 <__sflush_r+0x44>
 8006704:	6863      	ldr	r3, [r4, #4]
 8006706:	1ad2      	subs	r2, r2, r3
 8006708:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800670a:	b10b      	cbz	r3, 8006710 <__sflush_r+0x44>
 800670c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800670e:	1ad2      	subs	r2, r2, r3
 8006710:	2300      	movs	r3, #0
 8006712:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006714:	6a21      	ldr	r1, [r4, #32]
 8006716:	4628      	mov	r0, r5
 8006718:	47b0      	blx	r6
 800671a:	1c43      	adds	r3, r0, #1
 800671c:	89a3      	ldrh	r3, [r4, #12]
 800671e:	d106      	bne.n	800672e <__sflush_r+0x62>
 8006720:	6829      	ldr	r1, [r5, #0]
 8006722:	291d      	cmp	r1, #29
 8006724:	d82b      	bhi.n	800677e <__sflush_r+0xb2>
 8006726:	4a2a      	ldr	r2, [pc, #168]	@ (80067d0 <__sflush_r+0x104>)
 8006728:	410a      	asrs	r2, r1
 800672a:	07d6      	lsls	r6, r2, #31
 800672c:	d427      	bmi.n	800677e <__sflush_r+0xb2>
 800672e:	2200      	movs	r2, #0
 8006730:	6062      	str	r2, [r4, #4]
 8006732:	04d9      	lsls	r1, r3, #19
 8006734:	6922      	ldr	r2, [r4, #16]
 8006736:	6022      	str	r2, [r4, #0]
 8006738:	d504      	bpl.n	8006744 <__sflush_r+0x78>
 800673a:	1c42      	adds	r2, r0, #1
 800673c:	d101      	bne.n	8006742 <__sflush_r+0x76>
 800673e:	682b      	ldr	r3, [r5, #0]
 8006740:	b903      	cbnz	r3, 8006744 <__sflush_r+0x78>
 8006742:	6560      	str	r0, [r4, #84]	@ 0x54
 8006744:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006746:	602f      	str	r7, [r5, #0]
 8006748:	b1b9      	cbz	r1, 800677a <__sflush_r+0xae>
 800674a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800674e:	4299      	cmp	r1, r3
 8006750:	d002      	beq.n	8006758 <__sflush_r+0x8c>
 8006752:	4628      	mov	r0, r5
 8006754:	f7ff fa9a 	bl	8005c8c <_free_r>
 8006758:	2300      	movs	r3, #0
 800675a:	6363      	str	r3, [r4, #52]	@ 0x34
 800675c:	e00d      	b.n	800677a <__sflush_r+0xae>
 800675e:	2301      	movs	r3, #1
 8006760:	4628      	mov	r0, r5
 8006762:	47b0      	blx	r6
 8006764:	4602      	mov	r2, r0
 8006766:	1c50      	adds	r0, r2, #1
 8006768:	d1c9      	bne.n	80066fe <__sflush_r+0x32>
 800676a:	682b      	ldr	r3, [r5, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d0c6      	beq.n	80066fe <__sflush_r+0x32>
 8006770:	2b1d      	cmp	r3, #29
 8006772:	d001      	beq.n	8006778 <__sflush_r+0xac>
 8006774:	2b16      	cmp	r3, #22
 8006776:	d11e      	bne.n	80067b6 <__sflush_r+0xea>
 8006778:	602f      	str	r7, [r5, #0]
 800677a:	2000      	movs	r0, #0
 800677c:	e022      	b.n	80067c4 <__sflush_r+0xf8>
 800677e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006782:	b21b      	sxth	r3, r3
 8006784:	e01b      	b.n	80067be <__sflush_r+0xf2>
 8006786:	690f      	ldr	r7, [r1, #16]
 8006788:	2f00      	cmp	r7, #0
 800678a:	d0f6      	beq.n	800677a <__sflush_r+0xae>
 800678c:	0793      	lsls	r3, r2, #30
 800678e:	680e      	ldr	r6, [r1, #0]
 8006790:	bf08      	it	eq
 8006792:	694b      	ldreq	r3, [r1, #20]
 8006794:	600f      	str	r7, [r1, #0]
 8006796:	bf18      	it	ne
 8006798:	2300      	movne	r3, #0
 800679a:	eba6 0807 	sub.w	r8, r6, r7
 800679e:	608b      	str	r3, [r1, #8]
 80067a0:	f1b8 0f00 	cmp.w	r8, #0
 80067a4:	dde9      	ble.n	800677a <__sflush_r+0xae>
 80067a6:	6a21      	ldr	r1, [r4, #32]
 80067a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80067aa:	4643      	mov	r3, r8
 80067ac:	463a      	mov	r2, r7
 80067ae:	4628      	mov	r0, r5
 80067b0:	47b0      	blx	r6
 80067b2:	2800      	cmp	r0, #0
 80067b4:	dc08      	bgt.n	80067c8 <__sflush_r+0xfc>
 80067b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067be:	81a3      	strh	r3, [r4, #12]
 80067c0:	f04f 30ff 	mov.w	r0, #4294967295
 80067c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067c8:	4407      	add	r7, r0
 80067ca:	eba8 0800 	sub.w	r8, r8, r0
 80067ce:	e7e7      	b.n	80067a0 <__sflush_r+0xd4>
 80067d0:	dfbffffe 	.word	0xdfbffffe

080067d4 <_fflush_r>:
 80067d4:	b538      	push	{r3, r4, r5, lr}
 80067d6:	690b      	ldr	r3, [r1, #16]
 80067d8:	4605      	mov	r5, r0
 80067da:	460c      	mov	r4, r1
 80067dc:	b913      	cbnz	r3, 80067e4 <_fflush_r+0x10>
 80067de:	2500      	movs	r5, #0
 80067e0:	4628      	mov	r0, r5
 80067e2:	bd38      	pop	{r3, r4, r5, pc}
 80067e4:	b118      	cbz	r0, 80067ee <_fflush_r+0x1a>
 80067e6:	6a03      	ldr	r3, [r0, #32]
 80067e8:	b90b      	cbnz	r3, 80067ee <_fflush_r+0x1a>
 80067ea:	f7ff f927 	bl	8005a3c <__sinit>
 80067ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d0f3      	beq.n	80067de <_fflush_r+0xa>
 80067f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80067f8:	07d0      	lsls	r0, r2, #31
 80067fa:	d404      	bmi.n	8006806 <_fflush_r+0x32>
 80067fc:	0599      	lsls	r1, r3, #22
 80067fe:	d402      	bmi.n	8006806 <_fflush_r+0x32>
 8006800:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006802:	f7ff fa40 	bl	8005c86 <__retarget_lock_acquire_recursive>
 8006806:	4628      	mov	r0, r5
 8006808:	4621      	mov	r1, r4
 800680a:	f7ff ff5f 	bl	80066cc <__sflush_r>
 800680e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006810:	07da      	lsls	r2, r3, #31
 8006812:	4605      	mov	r5, r0
 8006814:	d4e4      	bmi.n	80067e0 <_fflush_r+0xc>
 8006816:	89a3      	ldrh	r3, [r4, #12]
 8006818:	059b      	lsls	r3, r3, #22
 800681a:	d4e1      	bmi.n	80067e0 <_fflush_r+0xc>
 800681c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800681e:	f7ff fa33 	bl	8005c88 <__retarget_lock_release_recursive>
 8006822:	e7dd      	b.n	80067e0 <_fflush_r+0xc>

08006824 <__swbuf_r>:
 8006824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006826:	460e      	mov	r6, r1
 8006828:	4614      	mov	r4, r2
 800682a:	4605      	mov	r5, r0
 800682c:	b118      	cbz	r0, 8006836 <__swbuf_r+0x12>
 800682e:	6a03      	ldr	r3, [r0, #32]
 8006830:	b90b      	cbnz	r3, 8006836 <__swbuf_r+0x12>
 8006832:	f7ff f903 	bl	8005a3c <__sinit>
 8006836:	69a3      	ldr	r3, [r4, #24]
 8006838:	60a3      	str	r3, [r4, #8]
 800683a:	89a3      	ldrh	r3, [r4, #12]
 800683c:	071a      	lsls	r2, r3, #28
 800683e:	d501      	bpl.n	8006844 <__swbuf_r+0x20>
 8006840:	6923      	ldr	r3, [r4, #16]
 8006842:	b943      	cbnz	r3, 8006856 <__swbuf_r+0x32>
 8006844:	4621      	mov	r1, r4
 8006846:	4628      	mov	r0, r5
 8006848:	f000 f82a 	bl	80068a0 <__swsetup_r>
 800684c:	b118      	cbz	r0, 8006856 <__swbuf_r+0x32>
 800684e:	f04f 37ff 	mov.w	r7, #4294967295
 8006852:	4638      	mov	r0, r7
 8006854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006856:	6823      	ldr	r3, [r4, #0]
 8006858:	6922      	ldr	r2, [r4, #16]
 800685a:	1a98      	subs	r0, r3, r2
 800685c:	6963      	ldr	r3, [r4, #20]
 800685e:	b2f6      	uxtb	r6, r6
 8006860:	4283      	cmp	r3, r0
 8006862:	4637      	mov	r7, r6
 8006864:	dc05      	bgt.n	8006872 <__swbuf_r+0x4e>
 8006866:	4621      	mov	r1, r4
 8006868:	4628      	mov	r0, r5
 800686a:	f7ff ffb3 	bl	80067d4 <_fflush_r>
 800686e:	2800      	cmp	r0, #0
 8006870:	d1ed      	bne.n	800684e <__swbuf_r+0x2a>
 8006872:	68a3      	ldr	r3, [r4, #8]
 8006874:	3b01      	subs	r3, #1
 8006876:	60a3      	str	r3, [r4, #8]
 8006878:	6823      	ldr	r3, [r4, #0]
 800687a:	1c5a      	adds	r2, r3, #1
 800687c:	6022      	str	r2, [r4, #0]
 800687e:	701e      	strb	r6, [r3, #0]
 8006880:	6962      	ldr	r2, [r4, #20]
 8006882:	1c43      	adds	r3, r0, #1
 8006884:	429a      	cmp	r2, r3
 8006886:	d004      	beq.n	8006892 <__swbuf_r+0x6e>
 8006888:	89a3      	ldrh	r3, [r4, #12]
 800688a:	07db      	lsls	r3, r3, #31
 800688c:	d5e1      	bpl.n	8006852 <__swbuf_r+0x2e>
 800688e:	2e0a      	cmp	r6, #10
 8006890:	d1df      	bne.n	8006852 <__swbuf_r+0x2e>
 8006892:	4621      	mov	r1, r4
 8006894:	4628      	mov	r0, r5
 8006896:	f7ff ff9d 	bl	80067d4 <_fflush_r>
 800689a:	2800      	cmp	r0, #0
 800689c:	d0d9      	beq.n	8006852 <__swbuf_r+0x2e>
 800689e:	e7d6      	b.n	800684e <__swbuf_r+0x2a>

080068a0 <__swsetup_r>:
 80068a0:	b538      	push	{r3, r4, r5, lr}
 80068a2:	4b29      	ldr	r3, [pc, #164]	@ (8006948 <__swsetup_r+0xa8>)
 80068a4:	4605      	mov	r5, r0
 80068a6:	6818      	ldr	r0, [r3, #0]
 80068a8:	460c      	mov	r4, r1
 80068aa:	b118      	cbz	r0, 80068b4 <__swsetup_r+0x14>
 80068ac:	6a03      	ldr	r3, [r0, #32]
 80068ae:	b90b      	cbnz	r3, 80068b4 <__swsetup_r+0x14>
 80068b0:	f7ff f8c4 	bl	8005a3c <__sinit>
 80068b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068b8:	0719      	lsls	r1, r3, #28
 80068ba:	d422      	bmi.n	8006902 <__swsetup_r+0x62>
 80068bc:	06da      	lsls	r2, r3, #27
 80068be:	d407      	bmi.n	80068d0 <__swsetup_r+0x30>
 80068c0:	2209      	movs	r2, #9
 80068c2:	602a      	str	r2, [r5, #0]
 80068c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068c8:	81a3      	strh	r3, [r4, #12]
 80068ca:	f04f 30ff 	mov.w	r0, #4294967295
 80068ce:	e033      	b.n	8006938 <__swsetup_r+0x98>
 80068d0:	0758      	lsls	r0, r3, #29
 80068d2:	d512      	bpl.n	80068fa <__swsetup_r+0x5a>
 80068d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80068d6:	b141      	cbz	r1, 80068ea <__swsetup_r+0x4a>
 80068d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80068dc:	4299      	cmp	r1, r3
 80068de:	d002      	beq.n	80068e6 <__swsetup_r+0x46>
 80068e0:	4628      	mov	r0, r5
 80068e2:	f7ff f9d3 	bl	8005c8c <_free_r>
 80068e6:	2300      	movs	r3, #0
 80068e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80068ea:	89a3      	ldrh	r3, [r4, #12]
 80068ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80068f0:	81a3      	strh	r3, [r4, #12]
 80068f2:	2300      	movs	r3, #0
 80068f4:	6063      	str	r3, [r4, #4]
 80068f6:	6923      	ldr	r3, [r4, #16]
 80068f8:	6023      	str	r3, [r4, #0]
 80068fa:	89a3      	ldrh	r3, [r4, #12]
 80068fc:	f043 0308 	orr.w	r3, r3, #8
 8006900:	81a3      	strh	r3, [r4, #12]
 8006902:	6923      	ldr	r3, [r4, #16]
 8006904:	b94b      	cbnz	r3, 800691a <__swsetup_r+0x7a>
 8006906:	89a3      	ldrh	r3, [r4, #12]
 8006908:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800690c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006910:	d003      	beq.n	800691a <__swsetup_r+0x7a>
 8006912:	4621      	mov	r1, r4
 8006914:	4628      	mov	r0, r5
 8006916:	f000 f8a5 	bl	8006a64 <__smakebuf_r>
 800691a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800691e:	f013 0201 	ands.w	r2, r3, #1
 8006922:	d00a      	beq.n	800693a <__swsetup_r+0x9a>
 8006924:	2200      	movs	r2, #0
 8006926:	60a2      	str	r2, [r4, #8]
 8006928:	6962      	ldr	r2, [r4, #20]
 800692a:	4252      	negs	r2, r2
 800692c:	61a2      	str	r2, [r4, #24]
 800692e:	6922      	ldr	r2, [r4, #16]
 8006930:	b942      	cbnz	r2, 8006944 <__swsetup_r+0xa4>
 8006932:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006936:	d1c5      	bne.n	80068c4 <__swsetup_r+0x24>
 8006938:	bd38      	pop	{r3, r4, r5, pc}
 800693a:	0799      	lsls	r1, r3, #30
 800693c:	bf58      	it	pl
 800693e:	6962      	ldrpl	r2, [r4, #20]
 8006940:	60a2      	str	r2, [r4, #8]
 8006942:	e7f4      	b.n	800692e <__swsetup_r+0x8e>
 8006944:	2000      	movs	r0, #0
 8006946:	e7f7      	b.n	8006938 <__swsetup_r+0x98>
 8006948:	20000018 	.word	0x20000018

0800694c <memmove>:
 800694c:	4288      	cmp	r0, r1
 800694e:	b510      	push	{r4, lr}
 8006950:	eb01 0402 	add.w	r4, r1, r2
 8006954:	d902      	bls.n	800695c <memmove+0x10>
 8006956:	4284      	cmp	r4, r0
 8006958:	4623      	mov	r3, r4
 800695a:	d807      	bhi.n	800696c <memmove+0x20>
 800695c:	1e43      	subs	r3, r0, #1
 800695e:	42a1      	cmp	r1, r4
 8006960:	d008      	beq.n	8006974 <memmove+0x28>
 8006962:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006966:	f803 2f01 	strb.w	r2, [r3, #1]!
 800696a:	e7f8      	b.n	800695e <memmove+0x12>
 800696c:	4402      	add	r2, r0
 800696e:	4601      	mov	r1, r0
 8006970:	428a      	cmp	r2, r1
 8006972:	d100      	bne.n	8006976 <memmove+0x2a>
 8006974:	bd10      	pop	{r4, pc}
 8006976:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800697a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800697e:	e7f7      	b.n	8006970 <memmove+0x24>

08006980 <_sbrk_r>:
 8006980:	b538      	push	{r3, r4, r5, lr}
 8006982:	4d06      	ldr	r5, [pc, #24]	@ (800699c <_sbrk_r+0x1c>)
 8006984:	2300      	movs	r3, #0
 8006986:	4604      	mov	r4, r0
 8006988:	4608      	mov	r0, r1
 800698a:	602b      	str	r3, [r5, #0]
 800698c:	f7fa fb6c 	bl	8001068 <_sbrk>
 8006990:	1c43      	adds	r3, r0, #1
 8006992:	d102      	bne.n	800699a <_sbrk_r+0x1a>
 8006994:	682b      	ldr	r3, [r5, #0]
 8006996:	b103      	cbz	r3, 800699a <_sbrk_r+0x1a>
 8006998:	6023      	str	r3, [r4, #0]
 800699a:	bd38      	pop	{r3, r4, r5, pc}
 800699c:	20000354 	.word	0x20000354

080069a0 <memcpy>:
 80069a0:	440a      	add	r2, r1
 80069a2:	4291      	cmp	r1, r2
 80069a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80069a8:	d100      	bne.n	80069ac <memcpy+0xc>
 80069aa:	4770      	bx	lr
 80069ac:	b510      	push	{r4, lr}
 80069ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069b6:	4291      	cmp	r1, r2
 80069b8:	d1f9      	bne.n	80069ae <memcpy+0xe>
 80069ba:	bd10      	pop	{r4, pc}

080069bc <_realloc_r>:
 80069bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069c0:	4680      	mov	r8, r0
 80069c2:	4615      	mov	r5, r2
 80069c4:	460c      	mov	r4, r1
 80069c6:	b921      	cbnz	r1, 80069d2 <_realloc_r+0x16>
 80069c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069cc:	4611      	mov	r1, r2
 80069ce:	f7ff b9c9 	b.w	8005d64 <_malloc_r>
 80069d2:	b92a      	cbnz	r2, 80069e0 <_realloc_r+0x24>
 80069d4:	f7ff f95a 	bl	8005c8c <_free_r>
 80069d8:	2400      	movs	r4, #0
 80069da:	4620      	mov	r0, r4
 80069dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069e0:	f000 f89e 	bl	8006b20 <_malloc_usable_size_r>
 80069e4:	4285      	cmp	r5, r0
 80069e6:	4606      	mov	r6, r0
 80069e8:	d802      	bhi.n	80069f0 <_realloc_r+0x34>
 80069ea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80069ee:	d8f4      	bhi.n	80069da <_realloc_r+0x1e>
 80069f0:	4629      	mov	r1, r5
 80069f2:	4640      	mov	r0, r8
 80069f4:	f7ff f9b6 	bl	8005d64 <_malloc_r>
 80069f8:	4607      	mov	r7, r0
 80069fa:	2800      	cmp	r0, #0
 80069fc:	d0ec      	beq.n	80069d8 <_realloc_r+0x1c>
 80069fe:	42b5      	cmp	r5, r6
 8006a00:	462a      	mov	r2, r5
 8006a02:	4621      	mov	r1, r4
 8006a04:	bf28      	it	cs
 8006a06:	4632      	movcs	r2, r6
 8006a08:	f7ff ffca 	bl	80069a0 <memcpy>
 8006a0c:	4621      	mov	r1, r4
 8006a0e:	4640      	mov	r0, r8
 8006a10:	f7ff f93c 	bl	8005c8c <_free_r>
 8006a14:	463c      	mov	r4, r7
 8006a16:	e7e0      	b.n	80069da <_realloc_r+0x1e>

08006a18 <__swhatbuf_r>:
 8006a18:	b570      	push	{r4, r5, r6, lr}
 8006a1a:	460c      	mov	r4, r1
 8006a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a20:	2900      	cmp	r1, #0
 8006a22:	b096      	sub	sp, #88	@ 0x58
 8006a24:	4615      	mov	r5, r2
 8006a26:	461e      	mov	r6, r3
 8006a28:	da0d      	bge.n	8006a46 <__swhatbuf_r+0x2e>
 8006a2a:	89a3      	ldrh	r3, [r4, #12]
 8006a2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006a30:	f04f 0100 	mov.w	r1, #0
 8006a34:	bf14      	ite	ne
 8006a36:	2340      	movne	r3, #64	@ 0x40
 8006a38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006a3c:	2000      	movs	r0, #0
 8006a3e:	6031      	str	r1, [r6, #0]
 8006a40:	602b      	str	r3, [r5, #0]
 8006a42:	b016      	add	sp, #88	@ 0x58
 8006a44:	bd70      	pop	{r4, r5, r6, pc}
 8006a46:	466a      	mov	r2, sp
 8006a48:	f000 f848 	bl	8006adc <_fstat_r>
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	dbec      	blt.n	8006a2a <__swhatbuf_r+0x12>
 8006a50:	9901      	ldr	r1, [sp, #4]
 8006a52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006a56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006a5a:	4259      	negs	r1, r3
 8006a5c:	4159      	adcs	r1, r3
 8006a5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a62:	e7eb      	b.n	8006a3c <__swhatbuf_r+0x24>

08006a64 <__smakebuf_r>:
 8006a64:	898b      	ldrh	r3, [r1, #12]
 8006a66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a68:	079d      	lsls	r5, r3, #30
 8006a6a:	4606      	mov	r6, r0
 8006a6c:	460c      	mov	r4, r1
 8006a6e:	d507      	bpl.n	8006a80 <__smakebuf_r+0x1c>
 8006a70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006a74:	6023      	str	r3, [r4, #0]
 8006a76:	6123      	str	r3, [r4, #16]
 8006a78:	2301      	movs	r3, #1
 8006a7a:	6163      	str	r3, [r4, #20]
 8006a7c:	b003      	add	sp, #12
 8006a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a80:	ab01      	add	r3, sp, #4
 8006a82:	466a      	mov	r2, sp
 8006a84:	f7ff ffc8 	bl	8006a18 <__swhatbuf_r>
 8006a88:	9f00      	ldr	r7, [sp, #0]
 8006a8a:	4605      	mov	r5, r0
 8006a8c:	4639      	mov	r1, r7
 8006a8e:	4630      	mov	r0, r6
 8006a90:	f7ff f968 	bl	8005d64 <_malloc_r>
 8006a94:	b948      	cbnz	r0, 8006aaa <__smakebuf_r+0x46>
 8006a96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a9a:	059a      	lsls	r2, r3, #22
 8006a9c:	d4ee      	bmi.n	8006a7c <__smakebuf_r+0x18>
 8006a9e:	f023 0303 	bic.w	r3, r3, #3
 8006aa2:	f043 0302 	orr.w	r3, r3, #2
 8006aa6:	81a3      	strh	r3, [r4, #12]
 8006aa8:	e7e2      	b.n	8006a70 <__smakebuf_r+0xc>
 8006aaa:	89a3      	ldrh	r3, [r4, #12]
 8006aac:	6020      	str	r0, [r4, #0]
 8006aae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ab2:	81a3      	strh	r3, [r4, #12]
 8006ab4:	9b01      	ldr	r3, [sp, #4]
 8006ab6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006aba:	b15b      	cbz	r3, 8006ad4 <__smakebuf_r+0x70>
 8006abc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	f000 f81d 	bl	8006b00 <_isatty_r>
 8006ac6:	b128      	cbz	r0, 8006ad4 <__smakebuf_r+0x70>
 8006ac8:	89a3      	ldrh	r3, [r4, #12]
 8006aca:	f023 0303 	bic.w	r3, r3, #3
 8006ace:	f043 0301 	orr.w	r3, r3, #1
 8006ad2:	81a3      	strh	r3, [r4, #12]
 8006ad4:	89a3      	ldrh	r3, [r4, #12]
 8006ad6:	431d      	orrs	r5, r3
 8006ad8:	81a5      	strh	r5, [r4, #12]
 8006ada:	e7cf      	b.n	8006a7c <__smakebuf_r+0x18>

08006adc <_fstat_r>:
 8006adc:	b538      	push	{r3, r4, r5, lr}
 8006ade:	4d07      	ldr	r5, [pc, #28]	@ (8006afc <_fstat_r+0x20>)
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	4604      	mov	r4, r0
 8006ae4:	4608      	mov	r0, r1
 8006ae6:	4611      	mov	r1, r2
 8006ae8:	602b      	str	r3, [r5, #0]
 8006aea:	f7fa fa94 	bl	8001016 <_fstat>
 8006aee:	1c43      	adds	r3, r0, #1
 8006af0:	d102      	bne.n	8006af8 <_fstat_r+0x1c>
 8006af2:	682b      	ldr	r3, [r5, #0]
 8006af4:	b103      	cbz	r3, 8006af8 <_fstat_r+0x1c>
 8006af6:	6023      	str	r3, [r4, #0]
 8006af8:	bd38      	pop	{r3, r4, r5, pc}
 8006afa:	bf00      	nop
 8006afc:	20000354 	.word	0x20000354

08006b00 <_isatty_r>:
 8006b00:	b538      	push	{r3, r4, r5, lr}
 8006b02:	4d06      	ldr	r5, [pc, #24]	@ (8006b1c <_isatty_r+0x1c>)
 8006b04:	2300      	movs	r3, #0
 8006b06:	4604      	mov	r4, r0
 8006b08:	4608      	mov	r0, r1
 8006b0a:	602b      	str	r3, [r5, #0]
 8006b0c:	f7fa fa93 	bl	8001036 <_isatty>
 8006b10:	1c43      	adds	r3, r0, #1
 8006b12:	d102      	bne.n	8006b1a <_isatty_r+0x1a>
 8006b14:	682b      	ldr	r3, [r5, #0]
 8006b16:	b103      	cbz	r3, 8006b1a <_isatty_r+0x1a>
 8006b18:	6023      	str	r3, [r4, #0]
 8006b1a:	bd38      	pop	{r3, r4, r5, pc}
 8006b1c:	20000354 	.word	0x20000354

08006b20 <_malloc_usable_size_r>:
 8006b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b24:	1f18      	subs	r0, r3, #4
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	bfbc      	itt	lt
 8006b2a:	580b      	ldrlt	r3, [r1, r0]
 8006b2c:	18c0      	addlt	r0, r0, r3
 8006b2e:	4770      	bx	lr

08006b30 <_init>:
 8006b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b32:	bf00      	nop
 8006b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b36:	bc08      	pop	{r3}
 8006b38:	469e      	mov	lr, r3
 8006b3a:	4770      	bx	lr

08006b3c <_fini>:
 8006b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b3e:	bf00      	nop
 8006b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b42:	bc08      	pop	{r3}
 8006b44:	469e      	mov	lr, r3
 8006b46:	4770      	bx	lr
